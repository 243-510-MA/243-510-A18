

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Oct 29 12:00:15 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F46J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK5,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    75                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    76                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           ; Version 1.45
    79                           ; Generated 16/11/2017 GMT
    80                           ; 
    81                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F46J50 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataCOMRAM
   114  003A52                     __pidataCOMRAM:
   115                           	opt stack 0
   116                           
   117                           ;initializer for _defaultHops
   118  003A52  04                 	db	4
   119                           
   120                           ;initializer for _BankIndex
   121  003A53  FF                 	db	255
   122                           
   123                           	psect	idataBANK1
   124  003A3E                     __pidataBANK1:
   125                           	opt stack 0
   126                           
   127                           ;initializer for _AcknowledgementSeq
   128  003A3E  FF                 	db	255
   129                           
   130                           ;initializer for _myLongAddress
   131  003A3F  01                 	db	1
   132  003A40  77                 	db	119
   133  003A41  66                 	db	102
   134  003A42  55                 	db	85
   135  003A43  44                 	db	68
   136  003A44  33                 	db	51
   137  003A45  22                 	db	34
   138  003A46  11                 	db	17
   139                           
   140                           ;initializer for _myChannel
   141  003A47  14                 	db	20
   142                           
   143                           	psect	idataBANK5
   144  002976                     __pidataBANK5:
   145                           	opt stack 0
   146                           
   147                           ;initializer for _crcTable
   148  002976  00                 	db	0
   149  002977  31                 	db	49
   150  002978  62                 	db	98
   151  002979  53                 	db	83
   152  00297A  C4                 	db	196
   153  00297B  F5                 	db	245
   154  00297C  A6                 	db	166
   155  00297D  97                 	db	151
   156  00297E  B9                 	db	185
   157  00297F  88                 	db	136
   158  002980  DB                 	db	219
   159  002981  EA                 	db	234
   160  002982  7D                 	db	125
   161  002983  4C                 	db	76
   162  002984  1F                 	db	31
   163  002985  2E                 	db	46
   164  002986  43                 	db	67
   165  002987  72                 	db	114
   166  002988  21                 	db	33
   167  002989  10                 	db	16
   168  00298A  87                 	db	135
   169  00298B  B6                 	db	182
   170  00298C  E5                 	db	229
   171  00298D  D4                 	db	212
   172  00298E  FA                 	db	250
   173  00298F  CB                 	db	203
   174  002990  98                 	db	152
   175  002991  A9                 	db	169
   176  002992  3E                 	db	62
   177  002993  0F                 	db	15
   178  002994  5C                 	db	92
   179  002995  6D                 	db	109
   180  002996  86                 	db	134
   181  002997  B7                 	db	183
   182  002998  E4                 	db	228
   183  002999  D5                 	db	213
   184  00299A  42                 	db	66
   185  00299B  73                 	db	115
   186  00299C  20                 	db	32
   187  00299D  11                 	db	17
   188  00299E  3F                 	db	63
   189  00299F  0E                 	db	14
   190  0029A0  5D                 	db	93
   191  0029A1  6C                 	db	108
   192  0029A2  FB                 	db	251
   193  0029A3  CA                 	db	202
   194  0029A4  99                 	db	153
   195  0029A5  A8                 	db	168
   196  0029A6  C5                 	db	197
   197  0029A7  F4                 	db	244
   198  0029A8  A7                 	db	167
   199  0029A9  96                 	db	150
   200  0029AA  01                 	db	1
   201  0029AB  30                 	db	48
   202  0029AC  63                 	db	99
   203  0029AD  52                 	db	82
   204  0029AE  7C                 	db	124
   205  0029AF  4D                 	db	77
   206  0029B0  1E                 	db	30
   207  0029B1  2F                 	db	47
   208  0029B2  B8                 	db	184
   209  0029B3  89                 	db	137
   210  0029B4  DA                 	db	218
   211  0029B5  EB                 	db	235
   212  0029B6  3D                 	db	61
   213  0029B7  0C                 	db	12
   214  0029B8  5F                 	db	95
   215  0029B9  6E                 	db	110
   216  0029BA  F9                 	db	249
   217  0029BB  C8                 	db	200
   218  0029BC  9B                 	db	155
   219  0029BD  AA                 	db	170
   220  0029BE  84                 	db	132
   221  0029BF  B5                 	db	181
   222  0029C0  E6                 	db	230
   223  0029C1  D7                 	db	215
   224  0029C2  40                 	db	64
   225  0029C3  71                 	db	113
   226  0029C4  22                 	db	34
   227  0029C5  13                 	db	19
   228  0029C6  7E                 	db	126
   229  0029C7  4F                 	db	79
   230  0029C8  1C                 	db	28
   231  0029C9  2D                 	db	45
   232  0029CA  BA                 	db	186
   233  0029CB  8B                 	db	139
   234  0029CC  D8                 	db	216
   235  0029CD  E9                 	db	233
   236  0029CE  C7                 	db	199
   237  0029CF  F6                 	db	246
   238  0029D0  A5                 	db	165
   239  0029D1  94                 	db	148
   240  0029D2  03                 	db	3
   241  0029D3  32                 	db	50
   242  0029D4  61                 	db	97
   243  0029D5  50                 	db	80
   244  0029D6  BB                 	db	187
   245  0029D7  8A                 	db	138
   246  0029D8  D9                 	db	217
   247  0029D9  E8                 	db	232
   248  0029DA  7F                 	db	127
   249  0029DB  4E                 	db	78
   250  0029DC  1D                 	db	29
   251  0029DD  2C                 	db	44
   252  0029DE  02                 	db	2
   253  0029DF  33                 	db	51
   254  0029E0  60                 	db	96
   255  0029E1  51                 	db	81
   256  0029E2  C6                 	db	198
   257  0029E3  F7                 	db	247
   258  0029E4  A4                 	db	164
   259  0029E5  95                 	db	149
   260  0029E6  F8                 	db	248
   261  0029E7  C9                 	db	201
   262  0029E8  9A                 	db	154
   263  0029E9  AB                 	db	171
   264  0029EA  3C                 	db	60
   265  0029EB  0D                 	db	13
   266  0029EC  5E                 	db	94
   267  0029ED  6F                 	db	111
   268  0029EE  41                 	db	65
   269  0029EF  70                 	db	112
   270  0029F0  23                 	db	35
   271  0029F1  12                 	db	18
   272  0029F2  85                 	db	133
   273  0029F3  B4                 	db	180
   274  0029F4  E7                 	db	231
   275  0029F5  D6                 	db	214
   276  0029F6  7A                 	db	122
   277  0029F7  4B                 	db	75
   278  0029F8  18                 	db	24
   279  0029F9  29                 	db	41
   280  0029FA  BE                 	db	190
   281  0029FB  8F                 	db	143
   282  0029FC  DC                 	db	220
   283  0029FD  ED                 	db	237
   284  0029FE  C3                 	db	195
   285  0029FF  F2                 	db	242
   286  002A00  A1                 	db	161
   287  002A01  90                 	db	144
   288  002A02  07                 	db	7
   289  002A03  36                 	db	54
   290  002A04  65                 	db	101
   291  002A05  54                 	db	84
   292  002A06  39                 	db	57
   293  002A07  08                 	db	8
   294  002A08  5B                 	db	91
   295  002A09  6A                 	db	106
   296  002A0A  FD                 	db	253
   297  002A0B  CC                 	db	204
   298  002A0C  9F                 	db	159
   299  002A0D  AE                 	db	174
   300  002A0E  80                 	db	128
   301  002A0F  B1                 	db	177
   302  002A10  E2                 	db	226
   303  002A11  D3                 	db	211
   304  002A12  44                 	db	68
   305  002A13  75                 	db	117
   306  002A14  26                 	db	38
   307  002A15  17                 	db	23
   308  002A16  FC                 	db	252
   309  002A17  CD                 	db	205
   310  002A18  9E                 	db	158
   311  002A19  AF                 	db	175
   312  002A1A  38                 	db	56
   313  002A1B  09                 	db	9
   314  002A1C  5A                 	db	90
   315  002A1D  6B                 	db	107
   316  002A1E  45                 	db	69
   317  002A1F  74                 	db	116
   318  002A20  27                 	db	39
   319  002A21  16                 	db	22
   320  002A22  81                 	db	129
   321  002A23  B0                 	db	176
   322  002A24  E3                 	db	227
   323  002A25  D2                 	db	210
   324  002A26  BF                 	db	191
   325  002A27  8E                 	db	142
   326  002A28  DD                 	db	221
   327  002A29  EC                 	db	236
   328  002A2A  7B                 	db	123
   329  002A2B  4A                 	db	74
   330  002A2C  19                 	db	25
   331  002A2D  28                 	db	40
   332  002A2E  06                 	db	6
   333  002A2F  37                 	db	55
   334  002A30  64                 	db	100
   335  002A31  55                 	db	85
   336  002A32  C2                 	db	194
   337  002A33  F3                 	db	243
   338  002A34  A0                 	db	160
   339  002A35  91                 	db	145
   340  002A36  47                 	db	71
   341  002A37  76                 	db	118
   342  002A38  25                 	db	37
   343  002A39  14                 	db	20
   344  002A3A  83                 	db	131
   345  002A3B  B2                 	db	178
   346  002A3C  E1                 	db	225
   347  002A3D  D0                 	db	208
   348  002A3E  FE                 	db	254
   349  002A3F  CF                 	db	207
   350  002A40  9C                 	db	156
   351  002A41  AD                 	db	173
   352  002A42  3A                 	db	58
   353  002A43  0B                 	db	11
   354  002A44  58                 	db	88
   355  002A45  69                 	db	105
   356  002A46  04                 	db	4
   357  002A47  35                 	db	53
   358  002A48  66                 	db	102
   359  002A49  57                 	db	87
   360  002A4A  C0                 	db	192
   361  002A4B  F1                 	db	241
   362  002A4C  A2                 	db	162
   363  002A4D  93                 	db	147
   364  002A4E  BD                 	db	189
   365  002A4F  8C                 	db	140
   366  002A50  DF                 	db	223
   367  002A51  EE                 	db	238
   368  002A52  79                 	db	121
   369  002A53  48                 	db	72
   370  002A54  1B                 	db	27
   371  002A55  2A                 	db	42
   372  002A56  C1                 	db	193
   373  002A57  F0                 	db	240
   374  002A58  A3                 	db	163
   375  002A59  92                 	db	146
   376  002A5A  05                 	db	5
   377  002A5B  34                 	db	52
   378  002A5C  67                 	db	103
   379  002A5D  56                 	db	86
   380  002A5E  78                 	db	120
   381  002A5F  49                 	db	73
   382  002A60  1A                 	db	26
   383  002A61  2B                 	db	43
   384  002A62  BC                 	db	188
   385  002A63  8D                 	db	141
   386  002A64  DE                 	db	222
   387  002A65  EF                 	db	239
   388  002A66  82                 	db	130
   389  002A67  B3                 	db	179
   390  002A68  E0                 	db	224
   391  002A69  D1                 	db	209
   392  002A6A  46                 	db	70
   393  002A6B  77                 	db	119
   394  002A6C  24                 	db	36
   395  002A6D  15                 	db	21
   396  002A6E  3B                 	db	59
   397  002A6F  0A                 	db	10
   398  002A70  59                 	db	89
   399  002A71  68                 	db	104
   400  002A72  FF                 	db	255
   401  002A73  CE                 	db	206
   402  002A74  9D                 	db	157
   403  002A75  AC                 	db	172
   404                           
   405                           	psect	mediumconst
   406  00FB02                     __pmediumconst:
   407                           	opt stack 0
   408  00FB02  00                 	db	0
   409  00FB03                     _ScanTime:
   410                           	opt stack 0
   411  00FB03  03C0               	dw	960
   412  00FB05  0000               	dw	0
   413  00FB07  05A0               	dw	1440
   414  00FB09  0000               	dw	0
   415  00FB0B  0960               	dw	2400
   416  00FB0D  0000               	dw	0
   417  00FB0F  10E0               	dw	4320
   418  00FB11  0000               	dw	0
   419  00FB13  1FE0               	dw	8160
   420  00FB15  0000               	dw	0
   421  00FB17  3DE0               	dw	15840
   422  00FB19  0000               	dw	0
   423  00FB1B  79E0               	dw	31200
   424  00FB1D  0000               	dw	0
   425  00FB1F  F1E0               	dw	61920
   426  00FB21  0000               	dw	0
   427  00FB23  E1E0               	dw	57824
   428  00FB25  0001               	dw	1
   429  00FB27  C1E0               	dw	49632
   430  00FB29  0003               	dw	3
   431  00FB2B  81E0               	dw	33248
   432  00FB2D  0007               	dw	7
   433  00FB2F  01E0               	dw	480
   434  00FB31  000F               	dw	15
   435  00FB33  01E0               	dw	480
   436  00FB35  001E               	dw	30
   437  00FB37  3D44               	dw	15684
   438  00FB39  001B               	dw	27
   439  00FB3B  B40D               	dw	46093
   440  00FB3D  0015               	dw	21
   441  00FB3F                     __end_of_ScanTime:
   442                           	opt stack 0
   443  00FB3F                     _octpowers:
   444                           	opt stack 0
   445  00FB3F  0001               	dw	1
   446  00FB41  0000               	dw	0
   447  00FB43  0008               	dw	8
   448  00FB45  0000               	dw	0
   449  00FB47  0040               	dw	64
   450  00FB49  0000               	dw	0
   451  00FB4B  0200               	dw	512
   452  00FB4D  0000               	dw	0
   453  00FB4F  1000               	dw	4096
   454  00FB51  0000               	dw	0
   455  00FB53  8000               	dw	32768
   456  00FB55  0000               	dw	0
   457  00FB57  0000               	dw	0
   458  00FB59  0004               	dw	4
   459  00FB5B  0000               	dw	0
   460  00FB5D  0020               	dw	32
   461  00FB5F  0000               	dw	0
   462  00FB61  0100               	dw	256
   463  00FB63  0000               	dw	0
   464  00FB65  0800               	dw	2048
   465  00FB67  0000               	dw	0
   466  00FB69  4000               	dw	16384
   467  00FB6B  0000               	dw	0
   468  00FB6D  0000               	dw	0
   469  00FB6F                     __end_of_octpowers:
   470                           	opt stack 0
   471  00FB6F                     _dpowers:
   472                           	opt stack 0
   473  00FB6F  0001               	dw	1
   474  00FB71  0000               	dw	0
   475  00FB73  000A               	dw	10
   476  00FB75  0000               	dw	0
   477  00FB77  0064               	dw	100
   478  00FB79  0000               	dw	0
   479  00FB7B  03E8               	dw	1000
   480  00FB7D  0000               	dw	0
   481  00FB7F  2710               	dw	10000
   482  00FB81  0000               	dw	0
   483  00FB83  86A0               	dw	34464
   484  00FB85  0001               	dw	1
   485  00FB87  4240               	dw	16960
   486  00FB89  000F               	dw	15
   487  00FB8B  9680               	dw	38528
   488  00FB8D  0098               	dw	152
   489  00FB8F  E100               	dw	57600
   490  00FB91  05F5               	dw	1525
   491  00FB93  CA00               	dw	51712
   492  00FB95  3B9A               	dw	15258
   493  00FB97                     __end_of_dpowers:
   494                           	opt stack 0
   495  00FB97                     __powers_:
   496                           	opt stack 0
   497  00FB97  00                 	db	0
   498  00FB98  80                 	db	128
   499  00FB99  3F                 	db	63
   500  00FB9A  00                 	db	0
   501  00FB9B  20                 	db	32
   502  00FB9C  41                 	db	65
   503  00FB9D  00                 	db	0
   504  00FB9E  C8                 	db	200
   505  00FB9F  42                 	db	66
   506  00FBA0  00                 	db	0
   507  00FBA1  7A                 	db	122
   508  00FBA2  44                 	db	68
   509  00FBA3  40                 	db	64
   510  00FBA4  1C                 	db	28
   511  00FBA5  46                 	db	70
   512  00FBA6  50                 	db	80
   513  00FBA7  C3                 	db	195
   514  00FBA8  47                 	db	71
   515  00FBA9  24                 	db	36
   516  00FBAA  74                 	db	116
   517  00FBAB  49                 	db	73
   518  00FBAC  97                 	db	151
   519  00FBAD  18                 	db	24
   520  00FBAE  4B                 	db	75
   521  00FBAF  BC                 	db	188
   522  00FBB0  BE                 	db	190
   523  00FBB1  4C                 	db	76
   524  00FBB2  6B                 	db	107
   525  00FBB3  6E                 	db	110
   526  00FBB4  4E                 	db	78
   527  00FBB5  03                 	db	3
   528  00FBB6  15                 	db	21
   529  00FBB7  50                 	db	80
   530  00FBB8  79                 	db	121
   531  00FBB9  AD                 	db	173
   532  00FBBA  60                 	db	96
   533  00FBBB  F3                 	db	243
   534  00FBBC  49                 	db	73
   535  00FBBD  71                 	db	113
   536  00FBBE                     __end_of__powers_:
   537                           	opt stack 0
   538  00FBBE                     __npowers_:
   539                           	opt stack 0
   540  00FBBE  00                 	db	0
   541  00FBBF  80                 	db	128
   542  00FBC0  3F                 	db	63
   543  00FBC1  CD                 	db	205
   544  00FBC2  CC                 	db	204
   545  00FBC3  3D                 	db	61
   546  00FBC4  D7                 	db	215
   547  00FBC5  23                 	db	35
   548  00FBC6  3C                 	db	60
   549  00FBC7  12                 	db	18
   550  00FBC8  83                 	db	131
   551  00FBC9  3A                 	db	58
   552  00FBCA  B7                 	db	183
   553  00FBCB  D1                 	db	209
   554  00FBCC  38                 	db	56
   555  00FBCD  C6                 	db	198
   556  00FBCE  27                 	db	39
   557  00FBCF  37                 	db	55
   558  00FBD0  38                 	db	56
   559  00FBD1  86                 	db	134
   560  00FBD2  35                 	db	53
   561  00FBD3  C0                 	db	192
   562  00FBD4  D6                 	db	214
   563  00FBD5  33                 	db	51
   564  00FBD6  CC                 	db	204
   565  00FBD7  2B                 	db	43
   566  00FBD8  32                 	db	50
   567  00FBD9  70                 	db	112
   568  00FBDA  89                 	db	137
   569  00FBDB  30                 	db	48
   570  00FBDC  E7                 	db	231
   571  00FBDD  DB                 	db	219
   572  00FBDE  2E                 	db	46
   573  00FBDF  E5                 	db	229
   574  00FBE0  3C                 	db	60
   575  00FBE1  1E                 	db	30
   576  00FBE2  42                 	db	66
   577  00FBE3  A2                 	db	162
   578  00FBE4  0D                 	db	13
   579  00FBE5                     __end_of__npowers_:
   580                           	opt stack 0
   581  00FBE5                     _hexpowers:
   582                           	opt stack 0
   583  00FBE5  0001               	dw	1
   584  00FBE7  0000               	dw	0
   585  00FBE9  0010               	dw	16
   586  00FBEB  0000               	dw	0
   587  00FBED  0100               	dw	256
   588  00FBEF  0000               	dw	0
   589  00FBF1  1000               	dw	4096
   590  00FBF3  0000               	dw	0
   591  00FBF5  0000               	dw	0
   592  00FBF7  0001               	dw	1
   593  00FBF9  0000               	dw	0
   594  00FBFB  0010               	dw	16
   595  00FBFD  0000               	dw	0
   596  00FBFF  0100               	dw	256
   597  00FC01  0000               	dw	0
   598  00FC03  1000               	dw	4096
   599  00FC05                     __end_of_hexpowers:
   600                           	opt stack 0
   601  0000                     _RPOR19	set	3801
   602  0000                     _RPOR21	set	3803
   603  0000                     _RPINR21	set	3835
   604  0000                     _RPINR1	set	3815
   605  0000                     _PPSCONbits	set	3839
   606  0000                     _ANCON1	set	3913
   607  0000                     _ANCON0	set	3912
   608  0000                     _ANCON1bits	set	3913
   609  0000                     _T1RUN	set	31380
   610  0000                     _ADRES	set	4035
   611  0000                     _TMR3	set	3962
   612  0000                     _SSP2CON1	set	3954
   613  0000                     _SSP2STAT	set	3955
   614  0000                     _TRISEbits	set	3990
   615  0000                     _SSP1CON1	set	4038
   616  0000                     _SSP1STAT	set	4039
   617  0000                     _TRISDbits	set	3989
   618  0000                     _INTCON2bits	set	4081
   619  0000                     _TRISBbits	set	3987
   620  0000                     _TRISCbits	set	3988
   621  0000                     _EECON2	set	4007
   622  0000                     _WDTCONbits	set	4032
   623  0000                     _OSCTUNEbits	set	3995
   624  0000                     _OSCCON	set	4051
   625  0000                     _TMR1H	set	4047
   626  0000                     _TMR1L	set	4046
   627  0000                     _T1CONbits	set	4045
   628  0000                     _T1CON	set	4045
   629  0000                     _SSP2CON1bits	set	3954
   630  0000                     _SSP2BUF	set	3957
   631  0000                     _SSP1CON1bits	set	4038
   632  0000                     _SSP1BUF	set	4041
   633  0000                     _TRISAbits	set	3986
   634  0000                     _PORTAbits	set	3968
   635  0000                     _PIR3bits	set	4004
   636  0000                     _TMR0L	set	4054
   637  0000                     _PORTBbits	set	3969
   638  0000                     _LATCbits	set	3979
   639  0000                     _ADCON0bits	set	4034
   640  0000                     _PIE1bits	set	3997
   641  0000                     _PIR1bits	set	3998
   642  0000                     _ADCON1	set	4033
   643  0000                     _ADCON0	set	4034
   644  0000                     _LATBbits	set	3978
   645  0000                     _TRISB	set	3987
   646  0000                     _LATEbits	set	3981
   647  0000                     _INTCONbits	set	4082
   648  0000                     _T3CON	set	3961
   649  0000                     _RCONbits	set	4048
   650  0000                     _LATDbits	set	3980
   651  0000                     _LATAbits	set	3977
   652  0000                     _TMR3IF	set	32009
   653  0000                     _TMR3IE	set	32001
   654  0000                     _TMR3IP	set	32017
   655  00FC05  53                 	db	83	;'S'
   656  00FC06  57                 	db	87	;'W'
   657  00FC07  31                 	db	49	;'1'
   658  00FC08  3A                 	db	58	;':'
   659  00FC09  20                 	db	32
   660  00FC0A  51                 	db	81	;'Q'
   661  00FC0B  55                 	db	85	;'U'
   662  00FC0C  45                 	db	69	;'E'
   663  00FC0D  53                 	db	83	;'S'
   664  00FC0E  54                 	db	84	;'T'
   665  00FC0F  49                 	db	73	;'I'
   666  00FC10  4F                 	db	79	;'O'
   667  00FC11  4E                 	db	78	;'N'
   668  00FC12  4E                 	db	78	;'N'
   669  00FC13  41                 	db	65	;'A'
   670  00FC14  49                 	db	73	;'I'
   671  00FC15  52                 	db	82	;'R'
   672  00FC16  45                 	db	69	;'E'
   673  00FC17  20                 	db	32
   674  00FC18  53                 	db	83	;'S'
   675  00FC19  57                 	db	87	;'W'
   676  00FC1A  32                 	db	50	;'2'
   677  00FC1B  3A                 	db	58	;':'
   678  00FC1C  20                 	db	32
   679  00FC1D  53                 	db	83	;'S'
   680  00FC1E  75                 	db	117	;'u'
   681  00FC1F  69                 	db	105	;'i'
   682  00FC20  76                 	db	118	;'v'
   683  00FC21  61                 	db	97	;'a'
   684  00FC22  6E                 	db	110	;'n'
   685  00FC23  74                 	db	116	;'t'
   686  00FC24  20                 	db	32
   687  00FC25  20                 	db	32
   688  00FC26  20                 	db	32
   689  00FC27  20                 	db	32
   690  00FC28  00                 	db	0
   691  00FC29  57                 	db	87	;'W'
   692  00FC2A  61                 	db	97	;'a'
   693  00FC2B  69                 	db	105	;'i'
   694  00FC2C  74                 	db	116	;'t'
   695  00FC2D  69                 	db	105	;'i'
   696  00FC2E  6E                 	db	110	;'n'
   697  00FC2F  67                 	db	103	;'g'
   698  00FC30  20                 	db	32
   699  00FC31  66                 	db	102	;'f'
   700  00FC32  6F                 	db	111	;'o'
   701  00FC33  72                 	db	114	;'r'
   702  00FC34  20                 	db	32
   703  00FC35  50                 	db	80	;'P'
   704  00FC36  41                 	db	65	;'A'
   705  00FC37  4E                 	db	78	;'N'
   706  00FC38  20                 	db	32
   707  00FC39  52                 	db	82	;'R'
   708  00FC3A  65                 	db	101	;'e'
   709  00FC3B  73                 	db	115	;'s'
   710  00FC3C  63                 	db	99	;'c'
   711  00FC3D  61                 	db	97	;'a'
   712  00FC3E  6E                 	db	110	;'n'
   713  00FC3F  6E                 	db	110	;'n'
   714  00FC40  69                 	db	105	;'i'
   715  00FC41  6E                 	db	110	;'n'
   716  00FC42  67                 	db	103	;'g'
   717  00FC43  2E                 	db	46
   718  00FC44  2E                 	db	46
   719  00FC45  2E                 	db	46
   720  00FC46  2E                 	db	46
   721  00FC47  2E                 	db	46
   722  00FC48  2E                 	db	46
   723  00FC49  00                 	db	0
   724  00FC4A  20                 	db	32
   725  00FC4B  20                 	db	32
   726  00FC4C  20                 	db	32
   727  00FC4D  4D                 	db	77	;'M'
   728  00FC4E  69                 	db	105	;'i'
   729  00FC4F  57                 	db	87	;'W'
   730  00FC50  69                 	db	105	;'i'
   731  00FC51  20                 	db	32
   732  00FC52  20                 	db	32
   733  00FC53  44                 	db	68	;'D'
   734  00FC54  65                 	db	101	;'e'
   735  00FC55  6D                 	db	109	;'m'
   736  00FC56  6F                 	db	111	;'o'
   737  00FC57  20                 	db	32
   738  00FC58  20                 	db	32
   739  00FC59  20                 	db	32
   740  00FC5A  20                 	db	32
   741  00FC5B  53                 	db	83	;'S'
   742  00FC5C  65                 	db	101	;'e'
   743  00FC5D  6C                 	db	108	;'l'
   744  00FC5E  66                 	db	102	;'f'
   745  00FC5F  20                 	db	32
   746  00FC60  54                 	db	84	;'T'
   747  00FC61  65                 	db	101	;'e'
   748  00FC62  73                 	db	115	;'s'
   749  00FC63  74                 	db	116	;'t'
   750  00FC64  20                 	db	32
   751  00FC65  4D                 	db	77	;'M'
   752  00FC66  6F                 	db	111	;'o'
   753  00FC67  64                 	db	100	;'d'
   754  00FC68  65                 	db	101	;'e'
   755  00FC69  20                 	db	32
   756  00FC6A  00                 	db	0
   757  00FC6B  20                 	db	32
   758  00FC6C  47                 	db	71	;'G'
   759  00FC6D  65                 	db	101	;'e'
   760  00FC6E  74                 	db	116	;'t'
   761  00FC6F  20                 	db	32
   762  00FC70  43                 	db	67	;'C'
   763  00FC71  6C                 	db	108	;'l'
   764  00FC72  6F                 	db	111	;'o'
   765  00FC73  73                 	db	115	;'s'
   766  00FC74  65                 	db	101	;'e'
   767  00FC75  72                 	db	114	;'r'
   768  00FC76  20                 	db	32
   769  00FC77  74                 	db	116	;'t'
   770  00FC78  6F                 	db	111	;'o'
   771  00FC79  20                 	db	32
   772  00FC7A  20                 	db	32
   773  00FC7B  20                 	db	32
   774  00FC7C  20                 	db	32
   775  00FC7D  20                 	db	32
   776  00FC7E  20                 	db	32
   777  00FC7F  74                 	db	116	;'t'
   778  00FC80  68                 	db	104	;'h'
   779  00FC81  65                 	db	101	;'e'
   780  00FC82  20                 	db	32
   781  00FC83  44                 	db	68	;'D'
   782  00FC84  6F                 	db	111	;'o'
   783  00FC85  6F                 	db	111	;'o'
   784  00FC86  72                 	db	114	;'r'
   785  00FC87  20                 	db	32
   786  00FC88  20                 	db	32
   787  00FC89  20                 	db	32
   788  00FC8A  20                 	db	32
   789  00FC8B  00                 	db	0
   790  00FC8C  20                 	db	32
   791  00FC8D  20                 	db	32
   792  00FC8E  20                 	db	32
   793  00FC8F  4D                 	db	77	;'M'
   794  00FC90  69                 	db	105	;'i'
   795  00FC91  63                 	db	99	;'c'
   796  00FC92  72                 	db	114	;'r'
   797  00FC93  6F                 	db	111	;'o'
   798  00FC94  63                 	db	99	;'c'
   799  00FC95  68                 	db	104	;'h'
   800  00FC96  69                 	db	105	;'i'
   801  00FC97  70                 	db	112	;'p'
   802  00FC98  20                 	db	32
   803  00FC99  20                 	db	32
   804  00FC9A  20                 	db	32
   805  00FC9B  20                 	db	32
   806  00FC9C  20                 	db	32
   807  00FC9D  20                 	db	32
   808  00FC9E  20                 	db	32
   809  00FC9F  44                 	db	68	;'D'
   810  00FCA0  6F                 	db	111	;'o'
   811  00FCA1  6F                 	db	111	;'o'
   812  00FCA2  72                 	db	114	;'r'
   813  00FCA3  20                 	db	32
   814  00FCA4  55                 	db	85	;'U'
   815  00FCA5  6E                 	db	110	;'n'
   816  00FCA6  6C                 	db	108	;'l'
   817  00FCA7  6F                 	db	111	;'o'
   818  00FCA8  63                 	db	99	;'c'
   819  00FCA9  6B                 	db	107	;'k'
   820  00FCAA  20                 	db	32
   821  00FCAB  20                 	db	32
   822  00FCAC  00                 	db	0
   823  00FCAD  4E                 	db	78	;'N'
   824  00FCAE  6F                 	db	111	;'o'
   825  00FCAF  20                 	db	32
   826  00FCB0  44                 	db	68	;'D'
   827  00FCB1  65                 	db	101	;'e'
   828  00FCB2  76                 	db	118	;'v'
   829  00FCB3  69                 	db	105	;'i'
   830  00FCB4  63                 	db	99	;'c'
   831  00FCB5  65                 	db	101	;'e'
   832  00FCB6  20                 	db	32
   833  00FCB7  46                 	db	70	;'F'
   834  00FCB8  6F                 	db	111	;'o'
   835  00FCB9  75                 	db	117	;'u'
   836  00FCBA  6E                 	db	110	;'n'
   837  00FCBB  64                 	db	100	;'d'
   838  00FCBC  20                 	db	32
   839  00FCBD  6F                 	db	111	;'o'
   840  00FCBE  72                 	db	114	;'r'
   841  00FCBF  20                 	db	32
   842  00FCC0  4F                 	db	79	;'O'
   843  00FCC1  75                 	db	117	;'u'
   844  00FCC2  74                 	db	116	;'t'
   845  00FCC3  20                 	db	32
   846  00FCC4  6F                 	db	111	;'o'
   847  00FCC5  66                 	db	102	;'f'
   848  00FCC6  20                 	db	32
   849  00FCC7  52                 	db	82	;'R'
   850  00FCC8  61                 	db	97	;'a'
   851  00FCC9  6E                 	db	110	;'n'
   852  00FCCA  67                 	db	103	;'g'
   853  00FCCB  65                 	db	101	;'e'
   854  00FCCC  20                 	db	32
   855  00FCCD  00                 	db	0
   856  00FCCE  20                 	db	32
   857  00FCCF  55                 	db	85	;'U'
   858  00FCD0  6E                 	db	110	;'n'
   859  00FCD1  6C                 	db	108	;'l'
   860  00FCD2  6F                 	db	111	;'o'
   861  00FCD3  63                 	db	99	;'c'
   862  00FCD4  6B                 	db	107	;'k'
   863  00FCD5  20                 	db	32
   864  00FCD6  44                 	db	68	;'D'
   865  00FCD7  6F                 	db	111	;'o'
   866  00FCD8  6F                 	db	111	;'o'
   867  00FCD9  72                 	db	114	;'r'
   868  00FCDA  20                 	db	32
   869  00FCDB  3F                 	db	63	;'?'
   870  00FCDC  20                 	db	32
   871  00FCDD  20                 	db	32
   872  00FCDE  53                 	db	83	;'S'
   873  00FCDF  57                 	db	87	;'W'
   874  00FCE0  31                 	db	49	;'1'
   875  00FCE1  3A                 	db	58	;':'
   876  00FCE2  20                 	db	32
   877  00FCE3  59                 	db	89	;'Y'
   878  00FCE4  45                 	db	69	;'E'
   879  00FCE5  53                 	db	83	;'S'
   880  00FCE6  20                 	db	32
   881  00FCE7  20                 	db	32
   882  00FCE8  53                 	db	83	;'S'
   883  00FCE9  57                 	db	87	;'W'
   884  00FCEA  32                 	db	50	;'2'
   885  00FCEB  3A                 	db	58	;':'
   886  00FCEC  4E                 	db	78	;'N'
   887  00FCED  4F                 	db	79	;'O'
   888  00FCEE  00                 	db	0
   889  00FCEF  53                 	db	83	;'S'
   890  00FCF0  57                 	db	87	;'W'
   891  00FCF1  31                 	db	49	;'1'
   892  00FCF2  3A                 	db	58	;':'
   893  00FCF3  20                 	db	32
   894  00FCF4  41                 	db	65	;'A'
   895  00FCF5  20                 	db	32
   896  00FCF6  20                 	db	32
   897  00FCF7  20                 	db	32
   898  00FCF8  20                 	db	32
   899  00FCF9  20                 	db	32
   900  00FCFA  20                 	db	32
   901  00FCFB  20                 	db	32
   902  00FCFC  20                 	db	32
   903  00FCFD  20                 	db	32
   904  00FCFE  20                 	db	32
   905  00FCFF  53                 	db	83	;'S'
   906  00FD00  57                 	db	87	;'W'
   907  00FD01  32                 	db	50	;'2'
   908  00FD02  3A                 	db	58	;':'
   909  00FD03  20                 	db	32
   910  00FD04  53                 	db	83	;'S'
   911  00FD05  75                 	db	117	;'u'
   912  00FD06  69                 	db	105	;'i'
   913  00FD07  76                 	db	118	;'v'
   914  00FD08  61                 	db	97	;'a'
   915  00FD09  6E                 	db	110	;'n'
   916  00FD0A  74                 	db	116	;'t'
   917  00FD0B  20                 	db	32
   918  00FD0C  20                 	db	32
   919  00FD0D  20                 	db	32
   920  00FD0E  20                 	db	32
   921  00FD0F  00                 	db	0
   922  00FD10  52                 	db	82	;'R'
   923  00FD11  65                 	db	101	;'e'
   924  00FD12  70                 	db	112	;'p'
   925  00FD13  6F                 	db	111	;'o'
   926  00FD14  6E                 	db	110	;'n'
   927  00FD15  73                 	db	115	;'s'
   928  00FD16  65                 	db	101	;'e'
   929  00FD17  20                 	db	32
   930  00FD18  65                 	db	101	;'e'
   931  00FD19  6E                 	db	110	;'n'
   932  00FD1A  76                 	db	118	;'v'
   933  00FD1B  6F                 	db	111	;'o'
   934  00FD1C  79                 	db	121	;'y'
   935  00FD1D  65                 	db	101	;'e'
   936  00FD1E  65                 	db	101	;'e'
   937  00FD1F  2E                 	db	46
   938  00FD20  20                 	db	32
   939  00FD21  20                 	db	32
   940  00FD22  20                 	db	32
   941  00FD23  20                 	db	32
   942  00FD24  20                 	db	32
   943  00FD25  20                 	db	32
   944  00FD26  41                 	db	65	;'A'
   945  00FD27  74                 	db	116	;'t'
   946  00FD28  74                 	db	116	;'t'
   947  00FD29  65                 	db	101	;'e'
   948  00FD2A  6E                 	db	110	;'n'
   949  00FD2B  74                 	db	116	;'t'
   950  00FD2C  65                 	db	101	;'e'
   951  00FD2D  2E                 	db	46
   952  00FD2E  2E                 	db	46
   953  00FD2F  2E                 	db	46
   954  00FD30  00                 	db	0
   955  00FD31  53                 	db	83	;'S'
   956  00FD32  57                 	db	87	;'W'
   957  00FD33  31                 	db	49	;'1'
   958  00FD34  3A                 	db	58	;':'
   959  00FD35  20                 	db	32
   960  00FD36  44                 	db	68	;'D'
   961  00FD37  4F                 	db	79	;'O'
   962  00FD38  57                 	db	87	;'W'
   963  00FD39  4E                 	db	78	;'N'
   964  00FD3A  20                 	db	32
   965  00FD3B  20                 	db	32
   966  00FD3C  20                 	db	32
   967  00FD3D  20                 	db	32
   968  00FD3E  20                 	db	32
   969  00FD3F  20                 	db	32
   970  00FD40  20                 	db	32
   971  00FD41  53                 	db	83	;'S'
   972  00FD42  57                 	db	87	;'W'
   973  00FD43  32                 	db	50	;'2'
   974  00FD44  3A                 	db	58	;':'
   975  00FD45  20                 	db	32
   976  00FD46  55                 	db	85	;'U'
   977  00FD47  50                 	db	80	;'P'
   978  00FD48  20                 	db	32
   979  00FD49  20                 	db	32
   980  00FD4A  20                 	db	32
   981  00FD4B  20                 	db	32
   982  00FD4C  20                 	db	32
   983  00FD4D  20                 	db	32
   984  00FD4E  20                 	db	32
   985  00FD4F  20                 	db	32
   986  00FD50  20                 	db	32
   987  00FD51  00                 	db	0
   988  00FD52                     STR_3:
   989  00FD52  53                 	db	83	;'S'
   990  00FD53  57                 	db	87	;'W'
   991  00FD54  31                 	db	49	;'1'
   992  00FD55  3A                 	db	58	;':'
   993  00FD56  20                 	db	32
   994  00FD57  4F                 	db	79	;'O'
   995  00FD58  4E                 	db	78	;'N'
   996  00FD59  20                 	db	32
   997  00FD5A  20                 	db	32
   998  00FD5B  20                 	db	32
   999  00FD5C  20                 	db	32
  1000  00FD5D  20                 	db	32
  1001  00FD5E  20                 	db	32
  1002  00FD5F  20                 	db	32
  1003  00FD60  20                 	db	32
  1004  00FD61  20                 	db	32
  1005  00FD62  53                 	db	83	;'S'
  1006  00FD63  57                 	db	87	;'W'
  1007  00FD64  32                 	db	50	;'2'
  1008  00FD65  3A                 	db	58	;':'
  1009  00FD66  20                 	db	32
  1010  00FD67  4F                 	db	79	;'O'
  1011  00FD68  46                 	db	70	;'F'
  1012  00FD69  46                 	db	70	;'F'
  1013  00FD6A  20                 	db	32
  1014  00FD6B  20                 	db	32
  1015  00FD6C  20                 	db	32
  1016  00FD6D  20                 	db	32
  1017  00FD6E  20                 	db	32
  1018  00FD6F  20                 	db	32
  1019  00FD70  20                 	db	32
  1020  00FD71  20                 	db	32
  1021  00FD72  00                 	db	0
  1022  00FD73  53                 	db	83	;'S'
  1023  00FD74  57                 	db	87	;'W'
  1024  00FD75  31                 	db	49	;'1'
  1025  00FD76  3A                 	db	58	;':'
  1026  00FD77  20                 	db	32
  1027  00FD78  20                 	db	32
  1028  00FD79  20                 	db	32
  1029  00FD7A  41                 	db	65	;'A'
  1030  00FD7B  4C                 	db	76	;'L'
  1031  00FD7C  41                 	db	65	;'A'
  1032  00FD7D  52                 	db	82	;'R'
  1033  00FD7E  4D                 	db	77	;'M'
  1034  00FD7F  20                 	db	32
  1035  00FD80  20                 	db	32
  1036  00FD81  20                 	db	32
  1037  00FD82  20                 	db	32
  1038  00FD83  53                 	db	83	;'S'
  1039  00FD84  57                 	db	87	;'W'
  1040  00FD85  32                 	db	50	;'2'
  1041  00FD86  3A                 	db	58	;':'
  1042  00FD87  20                 	db	32
  1043  00FD88  53                 	db	83	;'S'
  1044  00FD89  75                 	db	117	;'u'
  1045  00FD8A  69                 	db	105	;'i'
  1046  00FD8B  76                 	db	118	;'v'
  1047  00FD8C  61                 	db	97	;'a'
  1048  00FD8D  6E                 	db	110	;'n'
  1049  00FD8E  74                 	db	116	;'t'
  1050  00FD8F  20                 	db	32
  1051  00FD90  20                 	db	32
  1052  00FD91  20                 	db	32
  1053  00FD92  20                 	db	32
  1054  00FD93  00                 	db	0
  1055  00FD94  53                 	db	83	;'S'
  1056  00FD95  57                 	db	87	;'W'
  1057  00FD96  31                 	db	49	;'1'
  1058  00FD97  3A                 	db	58	;':'
  1059  00FD98  20                 	db	32
  1060  00FD99  50                 	db	80	;'P'
  1061  00FD9A  52                 	db	82	;'R'
  1062  00FD9B  4F                 	db	79	;'O'
  1063  00FD9C  4A                 	db	74	;'J'
  1064  00FD9D  20                 	db	32
  1065  00FD9E  4D                 	db	77	;'M'
  1066  00FD9F  4F                 	db	79	;'O'
  1067  00FDA0  54                 	db	84	;'T'
  1068  00FDA1  4F                 	db	79	;'O'
  1069  00FDA2  52                 	db	82	;'R'
  1070  00FDA3  20                 	db	32
  1071  00FDA4  53                 	db	83	;'S'
  1072  00FDA5  57                 	db	87	;'W'
  1073  00FDA6  32                 	db	50	;'2'
  1074  00FDA7  3A                 	db	58	;':'
  1075  00FDA8  20                 	db	32
  1076  00FDA9  53                 	db	83	;'S'
  1077  00FDAA  75                 	db	117	;'u'
  1078  00FDAB  69                 	db	105	;'i'
  1079  00FDAC  76                 	db	118	;'v'
  1080  00FDAD  61                 	db	97	;'a'
  1081  00FDAE  6E                 	db	110	;'n'
  1082  00FDAF  74                 	db	116	;'t'
  1083  00FDB0  20                 	db	32
  1084  00FDB1  20                 	db	32
  1085  00FDB2  20                 	db	32
  1086  00FDB3  20                 	db	32
  1087  00FDB4  00                 	db	0
  1088  00FDB5                     STR_38:
  1089  00FDB5  20                 	db	32
  1090  00FDB6  20                 	db	32
  1091  00FDB7  20                 	db	32
  1092  00FDB8  45                 	db	69	;'E'
  1093  00FDB9  78                 	db	120	;'x'
  1094  00FDBA  69                 	db	105	;'i'
  1095  00FDBB  74                 	db	116	;'t'
  1096  00FDBC  69                 	db	105	;'i'
  1097  00FDBD  6E                 	db	110	;'n'
  1098  00FDBE  67                 	db	103	;'g'
  1099  00FDBF  2E                 	db	46
  1100  00FDC0  2E                 	db	46
  1101  00FDC1  2E                 	db	46
  1102  00FDC2  2E                 	db	46
  1103  00FDC3  20                 	db	32
  1104  00FDC4  20                 	db	32
  1105  00FDC5  20                 	db	32
  1106  00FDC6  20                 	db	32
  1107  00FDC7  20                 	db	32
  1108  00FDC8  52                 	db	82	;'R'
  1109  00FDC9  61                 	db	97	;'a'
  1110  00FDCA  6E                 	db	110	;'n'
  1111  00FDCB  67                 	db	103	;'g'
  1112  00FDCC  65                 	db	101	;'e'
  1113  00FDCD  20                 	db	32
  1114  00FDCE  44                 	db	68	;'D'
  1115  00FDCF  65                 	db	101	;'e'
  1116  00FDD0  6D                 	db	109	;'m'
  1117  00FDD1  6F                 	db	111	;'o'
  1118  00FDD2  20                 	db	32
  1119  00FDD3  20                 	db	32
  1120  00FDD4  00                 	db	0
  1121  00FDD5  53                 	db	83	;'S'
  1122  00FDD6  57                 	db	87	;'W'
  1123  00FDD7  31                 	db	49	;'1'
  1124  00FDD8  3A                 	db	58	;':'
  1125  00FDD9  20                 	db	32
  1126  00FDDA  53                 	db	83	;'S'
  1127  00FDDB  74                 	db	116	;'t'
  1128  00FDDC  61                 	db	97	;'a'
  1129  00FDDD  72                 	db	114	;'r'
  1130  00FDDE  74                 	db	116	;'t'
  1131  00FDDF  20                 	db	32
  1132  00FDE0  54                 	db	84	;'T'
  1133  00FDE1  65                 	db	101	;'e'
  1134  00FDE2  73                 	db	115	;'s'
  1135  00FDE3  74                 	db	116	;'t'
  1136  00FDE4  20                 	db	32
  1137  00FDE5  53                 	db	83	;'S'
  1138  00FDE6  57                 	db	87	;'W'
  1139  00FDE7  32                 	db	50	;'2'
  1140  00FDE8  3A                 	db	58	;':'
  1141  00FDE9  20                 	db	32
  1142  00FDEA  45                 	db	69	;'E'
  1143  00FDEB  78                 	db	120	;'x'
  1144  00FDEC  69                 	db	105	;'i'
  1145  00FDED  74                 	db	116	;'t'
  1146  00FDEE  20                 	db	32
  1147  00FDEF  54                 	db	84	;'T'
  1148  00FDF0  65                 	db	101	;'e'
  1149  00FDF1  73                 	db	115	;'s'
  1150  00FDF2  74                 	db	116	;'t'
  1151  00FDF3  00                 	db	0
  1152  00FDF4  20                 	db	32
  1153  00FDF5  20                 	db	32
  1154  00FDF6  20                 	db	32
  1155  00FDF7  4D                 	db	77	;'M'
  1156  00FDF8  69                 	db	105	;'i'
  1157  00FDF9  63                 	db	99	;'c'
  1158  00FDFA  72                 	db	114	;'r'
  1159  00FDFB  6F                 	db	111	;'o'
  1160  00FDFC  63                 	db	99	;'c'
  1161  00FDFD  68                 	db	104	;'h'
  1162  00FDFE  69                 	db	105	;'i'
  1163  00FDFF  70                 	db	112	;'p'
  1164  00FE00  20                 	db	32
  1165  00FE01  20                 	db	32
  1166  00FE02  20                 	db	32
  1167  00FE03  20                 	db	32
  1168  00FE04  20                 	db	32
  1169  00FE05  20                 	db	32
  1170  00FE06  20                 	db	32
  1171  00FE07  54                 	db	84	;'T'
  1172  00FE08  65                 	db	101	;'e'
  1173  00FE09  6D                 	db	109	;'m'
  1174  00FE0A  70                 	db	112	;'p'
  1175  00FE0B  20                 	db	32
  1176  00FE0C  44                 	db	68	;'D'
  1177  00FE0D  65                 	db	101	;'e'
  1178  00FE0E  6D                 	db	109	;'m'
  1179  00FE0F  6F                 	db	111	;'o'
  1180  00FE10  20                 	db	32
  1181  00FE11  20                 	db	32
  1182  00FE12  00                 	db	0
  1183  00FE13                     STR_26:
  1184  00FE13  20                 	db	32
  1185  00FE14  20                 	db	32
  1186  00FE15  20                 	db	32
  1187  00FE16  45                 	db	69	;'E'
  1188  00FE17  78                 	db	120	;'x'
  1189  00FE18  69                 	db	105	;'i'
  1190  00FE19  74                 	db	116	;'t'
  1191  00FE1A  69                 	db	105	;'i'
  1192  00FE1B  6E                 	db	110	;'n'
  1193  00FE1C  67                 	db	103	;'g'
  1194  00FE1D  2E                 	db	46
  1195  00FE1E  2E                 	db	46
  1196  00FE1F  2E                 	db	46
  1197  00FE20  2E                 	db	46
  1198  00FE21  20                 	db	32
  1199  00FE22  20                 	db	32
  1200  00FE23  20                 	db	32
  1201  00FE24  20                 	db	32
  1202  00FE25  20                 	db	32
  1203  00FE26  54                 	db	84	;'T'
  1204  00FE27  65                 	db	101	;'e'
  1205  00FE28  6D                 	db	109	;'m'
  1206  00FE29  70                 	db	112	;'p'
  1207  00FE2A  20                 	db	32
  1208  00FE2B  44                 	db	68	;'D'
  1209  00FE2C  65                 	db	101	;'e'
  1210  00FE2D  6D                 	db	109	;'m'
  1211  00FE2E  6F                 	db	111	;'o'
  1212  00FE2F  20                 	db	32
  1213  00FE30  20                 	db	32
  1214  00FE31  00                 	db	0
  1215  00FE32                     STR_2:
  1216  00FE32  53                 	db	83	;'S'
  1217  00FE33  57                 	db	87	;'W'
  1218  00FE34  31                 	db	49	;'1'
  1219  00FE35  3A                 	db	58	;':'
  1220  00FE36  20                 	db	32
  1221  00FE37  50                 	db	80	;'P'
  1222  00FE38  52                 	db	82	;'R'
  1223  00FE39  4F                 	db	79	;'O'
  1224  00FE3A  4A                 	db	74	;'J'
  1225  00FE3B  45                 	db	69	;'E'
  1226  00FE3C  43                 	db	67	;'C'
  1227  00FE3D  54                 	db	84	;'T'
  1228  00FE3E  4F                 	db	79	;'O'
  1229  00FE3F  52                 	db	82	;'R'
  1230  00FE40  20                 	db	32
  1231  00FE41  20                 	db	32
  1232  00FE42  53                 	db	83	;'S'
  1233  00FE43  57                 	db	87	;'W'
  1234  00FE44  32                 	db	50	;'2'
  1235  00FE45  3A                 	db	58	;':'
  1236  00FE46  20                 	db	32
  1237  00FE47  53                 	db	83	;'S'
  1238  00FE48  75                 	db	117	;'u'
  1239  00FE49  69                 	db	105	;'i'
  1240  00FE4A  76                 	db	118	;'v'
  1241  00FE4B  61                 	db	97	;'a'
  1242  00FE4C  6E                 	db	110	;'n'
  1243  00FE4D  74                 	db	116	;'t'
  1244  00FE4E  20                 	db	32
  1245  00FE4F  20                 	db	32
  1246  00FE50  00                 	db	0
  1247  00FE51                     STR_4:
  1248  00FE51  53                 	db	83	;'S'
  1249  00FE52  57                 	db	87	;'W'
  1250  00FE53  31                 	db	49	;'1'
  1251  00FE54  3A                 	db	58	;':'
  1252  00FE55  20                 	db	32
  1253  00FE56  55                 	db	85	;'U'
  1254  00FE57  6E                 	db	110	;'n'
  1255  00FE58  6C                 	db	108	;'l'
  1256  00FE59  6F                 	db	111	;'o'
  1257  00FE5A  63                 	db	99	;'c'
  1258  00FE5B  6B                 	db	107	;'k'
  1259  00FE5C  20                 	db	32
  1260  00FE5D  44                 	db	68	;'D'
  1261  00FE5E  6F                 	db	111	;'o'
  1262  00FE5F  6F                 	db	111	;'o'
  1263  00FE60  72                 	db	114	;'r'
  1264  00FE61  53                 	db	83	;'S'
  1265  00FE62  57                 	db	87	;'W'
  1266  00FE63  32                 	db	50	;'2'
  1267  00FE64  3A                 	db	58	;':'
  1268  00FE65  20                 	db	32
  1269  00FE66  53                 	db	83	;'S'
  1270  00FE67  75                 	db	117	;'u'
  1271  00FE68  69                 	db	105	;'i'
  1272  00FE69  76                 	db	118	;'v'
  1273  00FE6A  61                 	db	97	;'a'
  1274  00FE6B  6E                 	db	110	;'n'
  1275  00FE6C  74                 	db	116	;'t'
  1276  00FE6D  20                 	db	32
  1277  00FE6E  20                 	db	32
  1278  00FE6F  00                 	db	0
  1279  00FE70  53                 	db	83	;'S'
  1280  00FE71  57                 	db	87	;'W'
  1281  00FE72  31                 	db	49	;'1'
  1282  00FE73  3A                 	db	58	;':'
  1283  00FE74  20                 	db	32
  1284  00FE75  42                 	db	66	;'B'
  1285  00FE76  20                 	db	32
  1286  00FE77  20                 	db	32
  1287  00FE78  20                 	db	32
  1288  00FE79  20                 	db	32
  1289  00FE7A  20                 	db	32
  1290  00FE7B  20                 	db	32
  1291  00FE7C  20                 	db	32
  1292  00FE7D  20                 	db	32
  1293  00FE7E  20                 	db	32
  1294  00FE7F  20                 	db	32
  1295  00FE80  53                 	db	83	;'S'
  1296  00FE81  57                 	db	87	;'W'
  1297  00FE82  32                 	db	50	;'2'
  1298  00FE83  3A                 	db	58	;':'
  1299  00FE84  20                 	db	32
  1300  00FE85  53                 	db	83	;'S'
  1301  00FE86  75                 	db	117	;'u'
  1302  00FE87  69                 	db	105	;'i'
  1303  00FE88  76                 	db	118	;'v'
  1304  00FE89  61                 	db	97	;'a'
  1305  00FE8A  6E                 	db	110	;'n'
  1306  00FE8B  74                 	db	116	;'t'
  1307  00FE8C  00                 	db	0
  1308  00FE8D  53                 	db	83	;'S'
  1309  00FE8E  57                 	db	87	;'W'
  1310  00FE8F  31                 	db	49	;'1'
  1311  00FE90  3A                 	db	58	;':'
  1312  00FE91  20                 	db	32
  1313  00FE92  43                 	db	67	;'C'
  1314  00FE93  20                 	db	32
  1315  00FE94  20                 	db	32
  1316  00FE95  20                 	db	32
  1317  00FE96  20                 	db	32
  1318  00FE97  20                 	db	32
  1319  00FE98  20                 	db	32
  1320  00FE99  20                 	db	32
  1321  00FE9A  20                 	db	32
  1322  00FE9B  20                 	db	32
  1323  00FE9C  20                 	db	32
  1324  00FE9D  53                 	db	83	;'S'
  1325  00FE9E  57                 	db	87	;'W'
  1326  00FE9F  32                 	db	50	;'2'
  1327  00FEA0  3A                 	db	58	;':'
  1328  00FEA1  20                 	db	32
  1329  00FEA2  53                 	db	83	;'S'
  1330  00FEA3  75                 	db	117	;'u'
  1331  00FEA4  69                 	db	105	;'i'
  1332  00FEA5  76                 	db	118	;'v'
  1333  00FEA6  61                 	db	97	;'a'
  1334  00FEA7  6E                 	db	110	;'n'
  1335  00FEA8  74                 	db	116	;'t'
  1336  00FEA9  00                 	db	0
  1337  00FEAA  41                 	db	65	;'A'
  1338  00FEAB  3A                 	db	58	;':'
  1339  00FEAC  20                 	db	32
  1340  00FEAD  25                 	db	37
  1341  00FEAE  75                 	db	117	;'u'
  1342  00FEAF  20                 	db	32
  1343  00FEB0  42                 	db	66	;'B'
  1344  00FEB1  3A                 	db	58	;':'
  1345  00FEB2  20                 	db	32
  1346  00FEB3  25                 	db	37
  1347  00FEB4  75                 	db	117	;'u'
  1348  00FEB5  20                 	db	32
  1349  00FEB6  43                 	db	67	;'C'
  1350  00FEB7  3A                 	db	58	;':'
  1351  00FEB8  20                 	db	32
  1352  00FEB9  25                 	db	37
  1353  00FEBA  75                 	db	117	;'u'
  1354  00FEBB  20                 	db	32
  1355  00FEBC  44                 	db	68	;'D'
  1356  00FEBD  3A                 	db	58	;':'
  1357  00FEBE  20                 	db	32
  1358  00FEBF  25                 	db	37
  1359  00FEC0  75                 	db	117	;'u'
  1360  00FEC1  20                 	db	32
  1361  00FEC2  20                 	db	32
  1362  00FEC3  20                 	db	32
  1363  00FEC4  00                 	db	0
  1364  00FEC5  53                 	db	83	;'S'
  1365  00FEC6  65                 	db	101	;'e'
  1366  00FEC7  6C                 	db	108	;'l'
  1367  00FEC8  66                 	db	102	;'f'
  1368  00FEC9  20                 	db	32
  1369  00FECA  54                 	db	84	;'T'
  1370  00FECB  65                 	db	101	;'e'
  1371  00FECC  73                 	db	115	;'s'
  1372  00FECD  74                 	db	116	;'t'
  1373  00FECE  20                 	db	32
  1374  00FECF  4D                 	db	77	;'M'
  1375  00FED0  6F                 	db	111	;'o'
  1376  00FED1  64                 	db	100	;'d'
  1377  00FED2  65                 	db	101	;'e'
  1378  00FED3  20                 	db	32
  1379  00FED4  20                 	db	32
  1380  00FED5  54                 	db	84	;'T'
  1381  00FED6  65                 	db	101	;'e'
  1382  00FED7  73                 	db	115	;'s'
  1383  00FED8  74                 	db	116	;'t'
  1384  00FED9  20                 	db	32
  1385  00FEDA  46                 	db	70	;'F'
  1386  00FEDB  61                 	db	97	;'a'
  1387  00FEDC  69                 	db	105	;'i'
  1388  00FEDD  6C                 	db	108	;'l'
  1389  00FEDE  00                 	db	0
  1390  00FEDF  53                 	db	83	;'S'
  1391  00FEE0  65                 	db	101	;'e'
  1392  00FEE1  6C                 	db	108	;'l'
  1393  00FEE2  66                 	db	102	;'f'
  1394  00FEE3  20                 	db	32
  1395  00FEE4  54                 	db	84	;'T'
  1396  00FEE5  65                 	db	101	;'e'
  1397  00FEE6  73                 	db	115	;'s'
  1398  00FEE7  74                 	db	116	;'t'
  1399  00FEE8  20                 	db	32
  1400  00FEE9  4D                 	db	77	;'M'
  1401  00FEEA  6F                 	db	111	;'o'
  1402  00FEEB  64                 	db	100	;'d'
  1403  00FEEC  65                 	db	101	;'e'
  1404  00FEED  20                 	db	32
  1405  00FEEE  20                 	db	32
  1406  00FEEF  54                 	db	84	;'T'
  1407  00FEF0  65                 	db	101	;'e'
  1408  00FEF1  73                 	db	115	;'s'
  1409  00FEF2  74                 	db	116	;'t'
  1410  00FEF3  20                 	db	32
  1411  00FEF4  50                 	db	80	;'P'
  1412  00FEF5  61                 	db	97	;'a'
  1413  00FEF6  73                 	db	115	;'s'
  1414  00FEF7  73                 	db	115	;'s'
  1415  00FEF8  00                 	db	0
  1416  00FEF9  53                 	db	83	;'S'
  1417  00FEFA  57                 	db	87	;'W'
  1418  00FEFB  31                 	db	49	;'1'
  1419  00FEFC  3A                 	db	58	;':'
  1420  00FEFD  20                 	db	32
  1421  00FEFE  51                 	db	81	;'Q'
  1422  00FEFF  55                 	db	85	;'U'
  1423  00FF00  45                 	db	69	;'E'
  1424  00FF01  53                 	db	83	;'S'
  1425  00FF02  54                 	db	84	;'T'
  1426  00FF03  49                 	db	73	;'I'
  1427  00FF04  4F                 	db	79	;'O'
  1428  00FF05  4E                 	db	78	;'N'
  1429  00FF06  20                 	db	32
  1430  00FF07  45                 	db	69	;'E'
  1431  00FF08  4E                 	db	78	;'N'
  1432  00FF09  56                 	db	86	;'V'
  1433  00FF0A  4F                 	db	79	;'O'
  1434  00FF0B  59                 	db	89	;'Y'
  1435  00FF0C  45                 	db	69	;'E'
  1436  00FF0D  2E                 	db	46
  1437  00FF0E  20                 	db	32
  1438  00FF0F  20                 	db	32
  1439  00FF10  20                 	db	32
  1440  00FF11  20                 	db	32
  1441  00FF12  00                 	db	0
  1442  00FF13  50                 	db	80	;'P'
  1443  00FF14  41                 	db	65	;'A'
  1444  00FF15  4E                 	db	78	;'N'
  1445  00FF16  49                 	db	73	;'I'
  1446  00FF17  44                 	db	68	;'D'
  1447  00FF18  3A                 	db	58	;':'
  1448  00FF19  25                 	db	37
  1449  00FF1A  30                 	db	48	;'0'
  1450  00FF1B  32                 	db	50	;'2'
  1451  00FF1C  78                 	db	120	;'x'
  1452  00FF1D  25                 	db	37
  1453  00FF1E  30                 	db	48	;'0'
  1454  00FF1F  32                 	db	50	;'2'
  1455  00FF20  78                 	db	120	;'x'
  1456  00FF21  20                 	db	32
  1457  00FF22  43                 	db	67	;'C'
  1458  00FF23  68                 	db	104	;'h'
  1459  00FF24  3A                 	db	58	;':'
  1460  00FF25  25                 	db	37
  1461  00FF26  30                 	db	48	;'0'
  1462  00FF27  32                 	db	50	;'2'
  1463  00FF28  64                 	db	100	;'d'
  1464  00FF29  00                 	db	0
  1465  00FF2A  41                 	db	65	;'A'
  1466  00FF2B  64                 	db	100	;'d'
  1467  00FF2C  64                 	db	100	;'d'
  1468  00FF2D  72                 	db	114	;'r'
  1469  00FF2E  65                 	db	101	;'e'
  1470  00FF2F  73                 	db	115	;'s'
  1471  00FF30  73                 	db	115	;'s'
  1472  00FF31  3A                 	db	58	;':'
  1473  00FF32  20                 	db	32
  1474  00FF33  25                 	db	37
  1475  00FF34  30                 	db	48	;'0'
  1476  00FF35  32                 	db	50	;'2'
  1477  00FF36  78                 	db	120	;'x'
  1478  00FF37  25                 	db	37
  1479  00FF38  30                 	db	48	;'0'
  1480  00FF39  32                 	db	50	;'2'
  1481  00FF3A  78                 	db	120	;'x'
  1482  00FF3B  00                 	db	0
  1483  00FF3C                     STR_53:
  1484  00FF3C  30                 	db	48	;'0'
  1485  00FF3D  31                 	db	49	;'1'
  1486  00FF3E  32                 	db	50	;'2'
  1487  00FF3F  33                 	db	51	;'3'
  1488  00FF40  34                 	db	52	;'4'
  1489  00FF41  35                 	db	53	;'5'
  1490  00FF42  36                 	db	54	;'6'
  1491  00FF43  37                 	db	55	;'7'
  1492  00FF44  38                 	db	56	;'8'
  1493  00FF45  39                 	db	57	;'9'
  1494  00FF46  41                 	db	65	;'A'
  1495  00FF47  42                 	db	66	;'B'
  1496  00FF48  43                 	db	67	;'C'
  1497  00FF49  44                 	db	68	;'D'
  1498  00FF4A  45                 	db	69	;'E'
  1499  00FF4B  46                 	db	70	;'F'
  1500  00FF4C  00                 	db	0
  1501  00FF4D                     STR_54:
  1502  00FF4D  30                 	db	48	;'0'
  1503  00FF4E  31                 	db	49	;'1'
  1504  00FF4F  32                 	db	50	;'2'
  1505  00FF50  33                 	db	51	;'3'
  1506  00FF51  34                 	db	52	;'4'
  1507  00FF52  35                 	db	53	;'5'
  1508  00FF53  36                 	db	54	;'6'
  1509  00FF54  37                 	db	55	;'7'
  1510  00FF55  38                 	db	56	;'8'
  1511  00FF56  39                 	db	57	;'9'
  1512  00FF57  61                 	db	97	;'a'
  1513  00FF58  62                 	db	98	;'b'
  1514  00FF59  63                 	db	99	;'c'
  1515  00FF5A  64                 	db	100	;'d'
  1516  00FF5B  65                 	db	101	;'e'
  1517  00FF5C  66                 	db	102	;'f'
  1518  00FF5D  00                 	db	0
  1519  00FF5E  20                 	db	32
  1520  00FF5F  20                 	db	32
  1521  00FF60  20                 	db	32
  1522  00FF61  4C                 	db	76	;'L'
  1523  00FF62  6F                 	db	111	;'o'
  1524  00FF63  63                 	db	99	;'c'
  1525  00FF64  61                 	db	97	;'a'
  1526  00FF65  6C                 	db	108	;'l'
  1527  00FF66  20                 	db	32
  1528  00FF67  54                 	db	84	;'T'
  1529  00FF68  65                 	db	101	;'e'
  1530  00FF69  6D                 	db	109	;'m'
  1531  00FF6A  70                 	db	112	;'p'
  1532  00FF6B  20                 	db	32
  1533  00FF6C  20                 	db	32
  1534  00FF6D  20                 	db	32
  1535  00FF6E  00                 	db	0
  1536  00FF6F  20                 	db	32
  1537  00FF70  53                 	db	83	;'S'
  1538  00FF71  54                 	db	84	;'T'
  1539  00FF72  55                 	db	85	;'U'
  1540  00FF73  44                 	db	68	;'D'
  1541  00FF74  45                 	db	69	;'E'
  1542  00FF75  4E                 	db	78	;'N'
  1543  00FF76  54                 	db	84	;'T'
  1544  00FF77  20                 	db	32
  1545  00FF78  44                 	db	68	;'D'
  1546  00FF79  45                 	db	69	;'E'
  1547  00FF7A  56                 	db	86	;'V'
  1548  00FF7B  49                 	db	73	;'I'
  1549  00FF7C  43                 	db	67	;'C'
  1550  00FF7D  45                 	db	69	;'E'
  1551  00FF7E  20                 	db	32
  1552  00FF7F  00                 	db	0
  1553  00FF80  20                 	db	32
  1554  00FF81  54                 	db	84	;'T'
  1555  00FF82  45                 	db	69	;'E'
  1556  00FF83  41                 	db	65	;'A'
  1557  00FF84  43                 	db	67	;'C'
  1558  00FF85  48                 	db	72	;'H'
  1559  00FF86  45                 	db	69	;'E'
  1560  00FF87  52                 	db	82	;'R'
  1561  00FF88  20                 	db	32
  1562  00FF89  44                 	db	68	;'D'
  1563  00FF8A  45                 	db	69	;'E'
  1564  00FF8B  56                 	db	86	;'V'
  1565  00FF8C  49                 	db	73	;'I'
  1566  00FF8D  43                 	db	67	;'C'
  1567  00FF8E  45                 	db	69	;'E'
  1568  00FF8F  20                 	db	32
  1569  00FF90  00                 	db	0
  1570  00FF91  20                 	db	32
  1571  00FF92  20                 	db	32
  1572  00FF93  52                 	db	82	;'R'
  1573  00FF94  65                 	db	101	;'e'
  1574  00FF95  6D                 	db	109	;'m'
  1575  00FF96  6F                 	db	111	;'o'
  1576  00FF97  74                 	db	116	;'t'
  1577  00FF98  65                 	db	101	;'e'
  1578  00FF99  20                 	db	32
  1579  00FF9A  54                 	db	84	;'T'
  1580  00FF9B  65                 	db	101	;'e'
  1581  00FF9C  6D                 	db	109	;'m'
  1582  00FF9D  70                 	db	112	;'p'
  1583  00FF9E  20                 	db	32
  1584  00FF9F  20                 	db	32
  1585  00FFA0  00                 	db	0
  1586  00FFA1  53                 	db	83	;'S'
  1587  00FFA2  57                 	db	87	;'W'
  1588  00FFA3  31                 	db	49	;'1'
  1589  00FFA4  3A                 	db	58	;':'
  1590  00FFA5  20                 	db	32
  1591  00FFA6  44                 	db	68	;'D'
  1592  00FFA7  20                 	db	32
  1593  00FFA8  20                 	db	32
  1594  00FFA9  20                 	db	32
  1595  00FFAA  20                 	db	32
  1596  00FFAB  20                 	db	32
  1597  00FFAC  20                 	db	32
  1598  00FFAD  20                 	db	32
  1599  00FFAE  20                 	db	32
  1600  00FFAF  00                 	db	0
  1601  00FFB0                     STR_49:
  1602  00FFB0  57                 	db	87	;'W'
  1603  00FFB1  65                 	db	101	;'e'
  1604  00FFB2  74                 	db	116	;'t'
  1605  00FFB3  4E                 	db	78	;'N'
  1606  00FFB4  45                 	db	69	;'E'
  1607  00FFB5  53                 	db	83	;'S'
  1608  00FFB6  20                 	db	32
  1609  00FFB7  3A                 	db	58	;':'
  1610  00FFB8  20                 	db	32
  1611  00FFB9  25                 	db	37
  1612  00FFBA  2E                 	db	46
  1613  00FFBB  32                 	db	50	;'2'
  1614  00FFBC  66                 	db	102	;'f'
  1615  00FFBD  00                 	db	0
  1616  00FFBE                     STR_48:
  1617  00FFBE  54                 	db	84	;'T'
  1618  00FFBF  65                 	db	101	;'e'
  1619  00FFC0  6D                 	db	109	;'m'
  1620  00FFC1  70                 	db	112	;'p'
  1621  00FFC2  20                 	db	32
  1622  00FFC3  3A                 	db	58	;':'
  1623  00FFC4  20                 	db	32
  1624  00FFC5  25                 	db	37
  1625  00FFC6  2E                 	db	46
  1626  00FFC7  32                 	db	50	;'2'
  1627  00FFC8  66                 	db	102	;'f'
  1628  00FFC9  00                 	db	0
  1629  00FFCA  54                 	db	84	;'T'
  1630  00FFCB  65                 	db	101	;'e'
  1631  00FFCC  73                 	db	115	;'s'
  1632  00FFCD  74                 	db	116	;'t'
  1633  00FFCE  69                 	db	105	;'i'
  1634  00FFCF  6E                 	db	110	;'n'
  1635  00FFD0  67                 	db	103	;'g'
  1636  00FFD1  20                 	db	32
  1637  00FFD2  2E                 	db	46
  1638  00FFD3  2E                 	db	46
  1639  00FFD4  2E                 	db	46
  1640  00FFD5  00                 	db	0
  1641  00FFD6  51                 	db	81	;'Q'
  1642  00FFD7  55                 	db	85	;'U'
  1643  00FFD8  45                 	db	69	;'E'
  1644  00FFD9  53                 	db	83	;'S'
  1645  00FFDA  54                 	db	84	;'T'
  1646  00FFDB  2E                 	db	46
  1647  00FFDC  20                 	db	32
  1648  00FFDD  46                 	db	70	;'F'
  1649  00FFDE  49                 	db	73	;'I'
  1650  00FFDF  4E                 	db	78	;'N'
  1651  00FFE0  49                 	db	73	;'I'
  1652  00FFE1  00                 	db	0
  1653  00FFE2  25                 	db	37
  1654  00FFE3  30                 	db	48	;'0'
  1655  00FFE4  32                 	db	50	;'2'
  1656  00FFE5  78                 	db	120	;'x'
  1657  00FFE6  25                 	db	37
  1658  00FFE7  30                 	db	48	;'0'
  1659  00FFE8  32                 	db	50	;'2'
  1660  00FFE9  78                 	db	120	;'x'
  1661  00FFEA  3A                 	db	58	;':'
  1662  00FFEB  00                 	db	0
  1663  00FFEC                     STR_34:
  1664  00FFEC  2F                 	db	47
  1665  00FFED  20                 	db	32
  1666  00FFEE  25                 	db	37
  1667  00FFEF  64                 	db	100	;'d'
  1668  00FFF0  00                 	db	0
  1669  00FFF1  20                 	db	32
  1670  00FFF2  2D                 	db	45
  1671  00FFF3  20                 	db	32
  1672  00FFF4  00                 	db	0
  1673  00FFF5  43                 	db	67	;'C'
  1674  00FFF6  00                 	db	0
  1675  0000                     
  1676                           ; #config settings
  1677  00FFF7  00                 	db	0	; dummy byte at the end
  1678  0000                     
  1679                           	psect	cinit
  1680  002EAE                     __pcinit:
  1681                           	opt stack 0
  1682  002EAE                     start_initialization:
  1683                           	opt stack 0
  1684  002EAE                     __initialization:
  1685                           	opt stack 0
  1686                           
  1687                           ; Initialize objects allocated to BANK5 (256 bytes)
  1688                           ; load TBLPTR registers with __pidataBANK5
  1689  002EAE  0E76               	movlw	low __pidataBANK5
  1690  002EB0  6EF6               	movwf	tblptrl,c
  1691  002EB2  0E29               	movlw	high __pidataBANK5
  1692  002EB4  6EF7               	movwf	tblptrh,c
  1693  002EB6  0E00               	movlw	low (__pidataBANK5 shr (0+16))
  1694  002EB8  6EF8               	movwf	tblptru,c
  1695  002EBA  EE05  F000         	lfsr	0,__pdataBANK5
  1696  002EBE  EE11 F000          	lfsr	1,256
  1697  002EC2                     copy_data0:
  1698  002EC2  0009               	tblrd		*+
  1699  002EC4  CFF5 FFEE          	movff	tablat,postinc0
  1700  002EC8  50E5               	movf	postdec1,w,c
  1701  002ECA  50E1               	movf	fsr1l,w,c
  1702  002ECC  E1FA               	bnz	copy_data0
  1703  002ECE  50E2               	movf	fsr1h,w,c
  1704  002ED0  E1F8               	bnz	copy_data0
  1705                           
  1706                           ; Initialize objects allocated to BANK1 (10 bytes)
  1707                           ; load TBLPTR registers with __pidataBANK1
  1708  002ED2  0E3E               	movlw	low __pidataBANK1
  1709  002ED4  6EF6               	movwf	tblptrl,c
  1710  002ED6  0E3A               	movlw	high __pidataBANK1
  1711  002ED8  6EF7               	movwf	tblptrh,c
  1712  002EDA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1713  002EDC  6EF8               	movwf	tblptru,c
  1714  002EDE  EE01  F0F3         	lfsr	0,__pdataBANK1
  1715  002EE2  EE10 F00A          	lfsr	1,10
  1716  002EE6                     copy_data1:
  1717  002EE6  0009               	tblrd		*+
  1718  002EE8  CFF5 FFEE          	movff	tablat,postinc0
  1719  002EEC  50E5               	movf	postdec1,w,c
  1720  002EEE  50E1               	movf	fsr1l,w,c
  1721  002EF0  E1FA               	bnz	copy_data1
  1722                           
  1723                           ; Initialize objects allocated to COMRAM (2 bytes)
  1724                           ; load TBLPTR registers with __pidataCOMRAM
  1725  002EF2  0E52               	movlw	low __pidataCOMRAM
  1726  002EF4  6EF6               	movwf	tblptrl,c
  1727  002EF6  0E3A               	movlw	high __pidataCOMRAM
  1728  002EF8  6EF7               	movwf	tblptrh,c
  1729  002EFA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1730  002EFC  6EF8               	movwf	tblptru,c
  1731  002EFE  0009               	tblrd		*+	;fetch initializer
  1732  002F00  CFF5 F053          	movff	tablat,__pdataCOMRAM
  1733  002F04  0009               	tblrd		*+	;fetch initializer
  1734  002F06  CFF5 F054          	movff	tablat,__pdataCOMRAM+1
  1735                           
  1736                           ; Clear objects allocated to BANK4 (134 bytes)
  1737  002F0A  EE04  F000         	lfsr	0,__pbssBANK4
  1738  002F0E  0E86               	movlw	134
  1739  002F10                     clear_0:
  1740  002F10  6AEE               	clrf	postinc0,c
  1741  002F12  06E8               	decf	wreg,f,c
  1742  002F14  E1FD               	bnz	clear_0
  1743                           
  1744                           ; Clear objects allocated to BANK3 (190 bytes)
  1745  002F16  EE03  F000         	lfsr	0,__pbssBANK3
  1746  002F1A  0EBE               	movlw	190
  1747  002F1C                     clear_1:
  1748  002F1C  6AEE               	clrf	postinc0,c
  1749  002F1E  06E8               	decf	wreg,f,c
  1750  002F20  E1FD               	bnz	clear_1
  1751                           
  1752                           ; Clear objects allocated to BANK2 (232 bytes)
  1753  002F22  EE02  F000         	lfsr	0,__pbssBANK2
  1754  002F26  0EE8               	movlw	232
  1755  002F28                     clear_2:
  1756  002F28  6AEE               	clrf	postinc0,c
  1757  002F2A  06E8               	decf	wreg,f,c
  1758  002F2C  E1FD               	bnz	clear_2
  1759                           
  1760                           ; Clear objects allocated to BANK1 (180 bytes)
  1761  002F2E  EE01  F000         	lfsr	0,__pbssBANK1
  1762  002F32  0EB4               	movlw	180
  1763  002F34                     clear_3:
  1764  002F34  6AEE               	clrf	postinc0,c
  1765  002F36  06E8               	decf	wreg,f,c
  1766  002F38  E1FD               	bnz	clear_3
  1767                           
  1768                           ; Clear objects allocated to BANK0 (2 bytes)
  1769  002F3A  0100               	movlb	0
  1770  002F3C  6BFD               	clrf	(__pbssBANK0+1)& (0+255),b
  1771  002F3E  6BFC               	clrf	__pbssBANK0& (0+255),b
  1772                           
  1773                           ; Clear objects allocated to COMRAM (40 bytes)
  1774  002F40  EE00  F02B         	lfsr	0,__pbssCOMRAM
  1775  002F44  0E28               	movlw	40
  1776  002F46                     clear_4:
  1777  002F46  6AEE               	clrf	postinc0,c
  1778  002F48  06E8               	decf	wreg,f,c
  1779  002F4A  E1FD               	bnz	clear_4
  1780  002F4C                     end_of_initialization:
  1781                           	opt stack 0
  1782  002F4C                     __end_of__initialization:
  1783                           	opt stack 0
  1784  002F4C  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1785  002F4E  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1786  002F50  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1787  002F52  6EF8               	movwf	tblptru,c
  1788  002F54  0100               	movlb	0
  1789  002F56  EF8F  F01B         	goto	_main	;jump to C main() function
  1790                           tblptru	equ	0xFF8
  1791                           tblptrh	equ	0xFF7
  1792                           tblptrl	equ	0xFF6
  1793                           tablat	equ	0xFF5
  1794                           postinc0	equ	0xFEE
  1795                           wreg	equ	0xFE8
  1796                           postdec1	equ	0xFE5
  1797                           fsr1h	equ	0xFE2
  1798                           fsr1l	equ	0xFE1
  1799                           
  1800                           	psect	bssCOMRAM
  1801  00002B                     __pbssCOMRAM:
  1802                           	opt stack 0
  1803  00002B                     _MACRxPacket:
  1804                           	opt stack 0
  1805  00002B                     	ds	11
  1806  000036                     _MTP:
  1807                           	opt stack 0
  1808  000036                     	ds	7
  1809  00003D                     _MiWiStateMachine:
  1810                           	opt stack 0
  1811  00003D                     	ds	2
  1812  00003F                     _role:
  1813                           	opt stack 0
  1814  00003F                     	ds	1
  1815  000040                     _MiWiSeqNum:
  1816                           	opt stack 0
  1817  000040                     	ds	1
  1818  000041                     _myParent:
  1819                           	opt stack 0
  1820  000041                     	ds	1
  1821  000042                     _ActiveScanResultIndex:
  1822                           	opt stack 0
  1823  000042                     	ds	1
  1824  000043                     _ConnMode:
  1825                           	opt stack 0
  1826  000043                     	ds	1
  1827  000044                     _AdditionalNodeID:
  1828                           	opt stack 0
  1829  000044                     	ds	1
  1830  000045                     _MRF24J40Status:
  1831                           	opt stack 0
  1832  000045                     	ds	1
  1833  000046                     _timerExtension1:
  1834                           	opt stack 0
  1835  000046                     	ds	1
  1836  000047                     _CurrentNodeIndex:
  1837                           	opt stack 0
  1838  000047                     	ds	1
  1839  000048                     _switch_val:
  1840                           	opt stack 0
  1841  000048                     	ds	1
  1842  000049                     _TxData:
  1843                           	opt stack 0
  1844  000049                     	ds	1
  1845  00004A                     _myPANID:
  1846                           	opt stack 0
  1847  00004A                     	ds	2
  1848  00004C                     _tempShortAddress:
  1849                           	opt stack 0
  1850  00004C                     	ds	2
  1851  00004E                     _MAC_PANID:
  1852                           	opt stack 0
  1853  00004E                     	ds	2
  1854  000050                     _myShortAddress:
  1855                           	opt stack 0
  1856  000050                     	ds	2
  1857  000052                     _currentChannel:
  1858                           	opt stack 0
  1859  000052                     	ds	1
  1860                           tblptru	equ	0xFF8
  1861                           tblptrh	equ	0xFF7
  1862                           tblptrl	equ	0xFF6
  1863                           tablat	equ	0xFF5
  1864                           postinc0	equ	0xFEE
  1865                           wreg	equ	0xFE8
  1866                           postdec1	equ	0xFE5
  1867                           fsr1h	equ	0xFE2
  1868                           fsr1l	equ	0xFE1
  1869                           
  1870                           	psect	dataCOMRAM
  1871  000053                     __pdataCOMRAM:
  1872                           	opt stack 0
  1873  000053                     _defaultHops:
  1874                           	opt stack 0
  1875  000053                     	ds	1
  1876  000054                     _BankIndex:
  1877                           	opt stack 0
  1878  000054                     	ds	1
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           postdec1	equ	0xFE5
  1886                           fsr1h	equ	0xFE2
  1887                           fsr1l	equ	0xFE1
  1888                           
  1889                           	psect	bssBANK0
  1890  0000FC                     __pbssBANK0:
  1891                           	opt stack 0
  1892  0000FC                     _tempNodeStatus:
  1893                           	opt stack 0
  1894  0000FC                     	ds	1
  1895  0000FD                     _ConnectionEntry:
  1896                           	opt stack 0
  1897  0000FD                     	ds	1
  1898                           tblptru	equ	0xFF8
  1899                           tblptrh	equ	0xFF7
  1900                           tblptrl	equ	0xFF6
  1901                           tablat	equ	0xFF5
  1902                           postinc0	equ	0xFEE
  1903                           wreg	equ	0xFE8
  1904                           postdec1	equ	0xFE5
  1905                           fsr1h	equ	0xFE2
  1906                           fsr1l	equ	0xFE1
  1907                           
  1908                           	psect	bssBANK1
  1909  000100                     __pbssBANK1:
  1910                           	opt stack 0
  1911  000100                     _rxMessage:
  1912                           	opt stack 0
  1913  000100                     	ds	10
  1914  00010A                     _RouterFailures:
  1915                           	opt stack 0
  1916  00010A                     	ds	8
  1917  000112                     _RoutingTable:
  1918                           	opt stack 0
  1919  000112                     	ds	8
  1920  00011A                     _tempLongAddress:
  1921                           	opt stack 0
  1922  00011A                     	ds	8
  1923  000122                     _switch1PressTime:
  1924                           	opt stack 0
  1925  000122                     	ds	4
  1926  000126                     _switch0PressTime:
  1927                           	opt stack 0
  1928  000126                     	ds	4
  1929  00012A                     _MACInitParams:
  1930                           	opt stack 0
  1931  00012A                     	ds	3
  1932  00012D                     _AcknowledgementAddr:
  1933                           	opt stack 0
  1934  00012D                     	ds	2
  1935  00012F                     _failureCounter:
  1936                           	opt stack 0
  1937  00012F                     	ds	2
  1938  000131                     _tempAverage:
  1939                           	opt stack 0
  1940  000131                     	ds	2
  1941  000133                     _knownCoordinators:
  1942                           	opt stack 0
  1943  000133                     	ds	1
  1944  000134                     _MiWiAckRequired:
  1945                           	opt stack 0
  1946  000134                     	ds	1
  1947  000135                     _MiWiCapacityInfo:
  1948                           	opt stack 0
  1949  000135                     	ds	1
  1950  000136                     high_isr@u:
  1951                           	opt stack 0
  1952  000136                     	ds	1
  1953  000137                     _MACCurrentChannel:
  1954                           	opt stack 0
  1955  000137                     	ds	1
  1956  000138                     _IEEESeqNum:
  1957                           	opt stack 0
  1958  000138                     	ds	1
  1959  000139                     _BuzzerStatus:
  1960                           	opt stack 0
  1961  000139                     	ds	1
  1962  00013A                     _timerExtension2:
  1963                           	opt stack 0
  1964  00013A                     	ds	1
  1965  00013B                     _init_case:
  1966                           	opt stack 0
  1967  00013B                     	ds	1
  1968  00013C                     _questionnaire:
  1969                           	opt stack 0
  1970  00013C                     	ds	1
  1971  00013D                     _TxBuffer:
  1972                           	opt stack 0
  1973  00013D                     	ds	51
  1974  000170                     _LCDText:
  1975                           	opt stack 0
  1976  000170                     	ds	33
  1977  000191                     _openSocketInfo:
  1978                           	opt stack 0
  1979  000191                     	ds	27
  1980  0001AC                     _EEPROM_Val:
  1981                           	opt stack 0
  1982  0001AC                     	ds	3
  1983  0001AF                     _tempPANID:
  1984                           	opt stack 0
  1985  0001AF                     	ds	2
  1986  0001B1                     _myNetworkAddress:
  1987                           	opt stack 0
  1988  0001B1                     	ds	2
  1989  0001B3                     _SST_Val:
  1990                           	opt stack 0
  1991  0001B3                     	ds	1
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           tblptrl	equ	0xFF6
  1995                           tablat	equ	0xFF5
  1996                           postinc0	equ	0xFEE
  1997                           wreg	equ	0xFE8
  1998                           postdec1	equ	0xFE5
  1999                           fsr1h	equ	0xFE2
  2000                           fsr1l	equ	0xFE1
  2001                           
  2002                           	psect	dataBANK1
  2003  0001F3                     __pdataBANK1:
  2004                           	opt stack 0
  2005  0001F3                     _AcknowledgementSeq:
  2006                           	opt stack 0
  2007  0001F3                     	ds	1
  2008  0001F4                     _myLongAddress:
  2009                           	opt stack 0
  2010  0001F4                     	ds	8
  2011  0001FC                     _myChannel:
  2012                           	opt stack 0
  2013  0001FC                     	ds	1
  2014                           tblptru	equ	0xFF8
  2015                           tblptrh	equ	0xFF7
  2016                           tblptrl	equ	0xFF6
  2017                           tablat	equ	0xFF5
  2018                           postinc0	equ	0xFEE
  2019                           wreg	equ	0xFE8
  2020                           postdec1	equ	0xFE5
  2021                           fsr1h	equ	0xFE2
  2022                           fsr1l	equ	0xFE1
  2023                           
  2024                           	psect	bssBANK2
  2025  000200                     __pbssBANK2:
  2026                           	opt stack 0
  2027  000200                     _ActiveScanResults:
  2028                           	opt stack 0
  2029  000200                     	ds	60
  2030  00023C                     _BroadcastRecords:
  2031                           	opt stack 0
  2032  00023C                     	ds	32
  2033  00025C                     _ConnectionTable:
  2034                           	opt stack 0
  2035  00025C                     	ds	140
  2036                           tblptru	equ	0xFF8
  2037                           tblptrh	equ	0xFF7
  2038                           tblptrl	equ	0xFF6
  2039                           tablat	equ	0xFF5
  2040                           postinc0	equ	0xFEE
  2041                           wreg	equ	0xFE8
  2042                           postdec1	equ	0xFE5
  2043                           fsr1h	equ	0xFE2
  2044                           fsr1l	equ	0xFE1
  2045                           
  2046                           	psect	bssBANK3
  2047  000300                     __pbssBANK3:
  2048                           	opt stack 0
  2049  000300                     _NodeTemp:
  2050                           	opt stack 0
  2051  000300                     	ds	30
  2052  00031E                     _RxBuffer:
  2053                           	opt stack 0
  2054  00031E                     	ds	160
  2055                           tblptru	equ	0xFF8
  2056                           tblptrh	equ	0xFF7
  2057                           tblptrl	equ	0xFF6
  2058                           tablat	equ	0xFF5
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           postdec1	equ	0xFE5
  2062                           fsr1h	equ	0xFE2
  2063                           fsr1l	equ	0xFE1
  2064                           
  2065                           	psect	bssBANK4
  2066  000400                     __pbssBANK4:
  2067                           	opt stack 0
  2068  000400                     _indirectMessages:
  2069                           	opt stack 0
  2070  000400                     	ds	134
  2071                           tblptru	equ	0xFF8
  2072                           tblptrh	equ	0xFF7
  2073                           tblptrl	equ	0xFF6
  2074                           tablat	equ	0xFF5
  2075                           postinc0	equ	0xFEE
  2076                           wreg	equ	0xFE8
  2077                           postdec1	equ	0xFE5
  2078                           fsr1h	equ	0xFE2
  2079                           fsr1l	equ	0xFE1
  2080                           
  2081                           	psect	dataBANK5
  2082  000500                     __pdataBANK5:
  2083                           	opt stack 0
  2084  000500                     _crcTable:
  2085                           	opt stack 0
  2086  000500                     	ds	256
  2087                           tblptru	equ	0xFF8
  2088                           tblptrh	equ	0xFF7
  2089                           tblptrl	equ	0xFF6
  2090                           tablat	equ	0xFF5
  2091                           postinc0	equ	0xFEE
  2092                           wreg	equ	0xFE8
  2093                           postdec1	equ	0xFE5
  2094                           fsr1h	equ	0xFE2
  2095                           fsr1l	equ	0xFE1
  2096                           
  2097                           	psect	cstackBANK1
  2098  0001B4                     __pcstackBANK1:
  2099                           	opt stack 0
  2100  0001B4                     ?_sprintf:
  2101                           	opt stack 0
  2102  0001B4                     sprintf@sp:
  2103                           	opt stack 0
  2104                           
  2105                           ; 2 bytes @ 0x0
  2106  0001B4                     	ds	2
  2107  0001B6                     sprintf@f:
  2108                           	opt stack 0
  2109                           
  2110                           ; 2 bytes @ 0x2
  2111  0001B6                     	ds	10
  2112  0001C0                     _sprintf$5669:
  2113                           	opt stack 0
  2114                           
  2115                           ; 3 bytes @ 0xC
  2116  0001C0                     	ds	3
  2117  0001C3                     sprintf@idx:
  2118                           	opt stack 0
  2119                           
  2120                           ; 1 bytes @ 0xF
  2121  0001C3                     	ds	1
  2122  0001C4                     sprintf@cp:
  2123                           	opt stack 0
  2124                           
  2125                           ; 2 bytes @ 0x10
  2126  0001C4                     	ds	2
  2127  0001C6                     _sprintf$4949:
  2128                           	opt stack 0
  2129                           
  2130                           ; 2 bytes @ 0x12
  2131  0001C6                     	ds	2
  2132  0001C8                     _sprintf$4950:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x14
  2136  0001C8                     	ds	2
  2137  0001CA                     _sprintf$4953:
  2138                           	opt stack 0
  2139                           
  2140                           ; 2 bytes @ 0x16
  2141  0001CA                     	ds	2
  2142  0001CC                     _sprintf$4954:
  2143                           	opt stack 0
  2144                           
  2145                           ; 2 bytes @ 0x18
  2146  0001CC                     	ds	2
  2147  0001CE                     _sprintf$4955:
  2148                           	opt stack 0
  2149                           
  2150                           ; 2 bytes @ 0x1A
  2151  0001CE                     	ds	2
  2152  0001D0                     _sprintf$4956:
  2153                           	opt stack 0
  2154                           
  2155                           ; 2 bytes @ 0x1C
  2156  0001D0                     	ds	2
  2157  0001D2                     _sprintf$4957:
  2158                           	opt stack 0
  2159                           
  2160                           ; 2 bytes @ 0x1E
  2161  0001D2                     	ds	2
  2162  0001D4                     _sprintf$4958:
  2163                           	opt stack 0
  2164                           
  2165                           ; 2 bytes @ 0x20
  2166  0001D4                     	ds	2
  2167  0001D6                     _sprintf$4964:
  2168                           	opt stack 0
  2169                           
  2170                           ; 2 bytes @ 0x22
  2171  0001D6                     	ds	2
  2172  0001D8                     sprintf@temp:
  2173                           	opt stack 0
  2174                           
  2175                           ; 3 bytes @ 0x24
  2176  0001D8                     	ds	3
  2177  0001DB                     sprintf@len:
  2178                           	opt stack 0
  2179                           
  2180                           ; 2 bytes @ 0x27
  2181  0001DB                     	ds	2
  2182  0001DD                     sprintf@ap:
  2183                           	opt stack 0
  2184                           
  2185                           ; 2 bytes @ 0x29
  2186  0001DD                     	ds	2
  2187  0001DF                     sprintf@tmpval:
  2188                           	opt stack 0
  2189                           
  2190                           ; 4 bytes @ 0x2B
  2191  0001DF                     	ds	4
  2192  0001E3                     sprintf@exp:
  2193                           	opt stack 0
  2194                           
  2195                           ; 2 bytes @ 0x2F
  2196  0001E3                     	ds	2
  2197  0001E5                     sprintf@width:
  2198                           	opt stack 0
  2199                           
  2200                           ; 2 bytes @ 0x31
  2201  0001E5                     	ds	2
  2202  0001E7                     sprintf@val:
  2203                           	opt stack 0
  2204                           
  2205                           ; 4 bytes @ 0x33
  2206  0001E7                     	ds	4
  2207  0001EB                     sprintf@fval:
  2208                           	opt stack 0
  2209                           
  2210                           ; 3 bytes @ 0x37
  2211  0001EB                     	ds	3
  2212  0001EE                     sprintf@prec:
  2213                           	opt stack 0
  2214                           
  2215                           ; 2 bytes @ 0x3A
  2216  0001EE                     	ds	2
  2217  0001F0                     sprintf@c:
  2218                           	opt stack 0
  2219                           
  2220                           ; 1 bytes @ 0x3C
  2221  0001F0                     	ds	1
  2222  0001F1                     sprintf@flag:
  2223                           	opt stack 0
  2224                           
  2225                           ; 2 bytes @ 0x3D
  2226  0001F1                     	ds	2
  2227                           tblptru	equ	0xFF8
  2228                           tblptrh	equ	0xFF7
  2229                           tblptrl	equ	0xFF6
  2230                           tablat	equ	0xFF5
  2231                           postinc0	equ	0xFEE
  2232                           wreg	equ	0xFE8
  2233                           postdec1	equ	0xFE5
  2234                           fsr1h	equ	0xFE2
  2235                           fsr1l	equ	0xFE1
  2236                           
  2237                           	psect	cstackBANK0
  2238  000060                     __pcstackBANK0:
  2239                           	opt stack 0
  2240  000060                     ??_waitForResultSHT:
  2241  000060                     ??_isdigit:
  2242  000060                     ?_shiftIn:
  2243                           	opt stack 0
  2244  000060                     ?___awmod:
  2245                           	opt stack 0
  2246  000060                     ?___ftpack:
  2247                           	opt stack 0
  2248  000060                     ?__tdiv_to_l_:
  2249                           	opt stack 0
  2250  000060                     ?__div_to_l_:
  2251                           	opt stack 0
  2252  000060                     ?___lmul:
  2253                           	opt stack 0
  2254  000060                     ?___lldiv:
  2255                           	opt stack 0
  2256  000060                     i2cWriteByte@outByte:
  2257                           	opt stack 0
  2258  000060                     SPIPut2@i:
  2259                           	opt stack 0
  2260  000060                     shiftIn@_numBits:
  2261                           	opt stack 0
  2262  000060                     ___awmod@dividend:
  2263                           	opt stack 0
  2264  000060                     __div_to_l_@f1:
  2265                           	opt stack 0
  2266  000060                     ___ftpack@arg:
  2267                           	opt stack 0
  2268  000060                     __tdiv_to_l_@f1:
  2269                           	opt stack 0
  2270  000060                     ___lmul@multiplier:
  2271                           	opt stack 0
  2272  000060                     ___lldiv@dividend:
  2273                           	opt stack 0
  2274                           
  2275                           ; 4 bytes @ 0x0
  2276  000060                     	ds	1
  2277  000061                     i2cWriteByte@n:
  2278                           	opt stack 0
  2279  000061                     SPIPut2@v:
  2280                           	opt stack 0
  2281  000061                     _isdigit$5190:
  2282                           	opt stack 0
  2283  000061                     waitForResultSHT@ack:
  2284                           	opt stack 0
  2285                           
  2286                           ; 2 bytes @ 0x1
  2287  000061                     	ds	1
  2288  000062                     ??_shiftIn:
  2289  000062                     LCD_WriteCmd@data:
  2290                           	opt stack 0
  2291  000062                     LCD_WriteData@data:
  2292                           	opt stack 0
  2293  000062                     isdigit@c:
  2294                           	opt stack 0
  2295  000062                     sendCommandSHT@_command:
  2296                           	opt stack 0
  2297  000062                     ___awmod@divisor:
  2298                           	opt stack 0
  2299                           
  2300                           ; 2 bytes @ 0x2
  2301  000062                     	ds	1
  2302  000063                     LCD_Update@i:
  2303                           	opt stack 0
  2304  000063                     ___ftpack@exp:
  2305                           	opt stack 0
  2306  000063                     waitForResultSHT@i:
  2307                           	opt stack 0
  2308  000063                     __div_to_l_@f2:
  2309                           	opt stack 0
  2310  000063                     __tdiv_to_l_@f2:
  2311                           	opt stack 0
  2312                           
  2313                           ; 3 bytes @ 0x3
  2314  000063                     	ds	1
  2315  000064                     ??_sendCommandSHT:
  2316  000064                     ___awmod@counter:
  2317                           	opt stack 0
  2318  000064                     ___ftpack@sign:
  2319                           	opt stack 0
  2320  000064                     ___lmul@multiplicand:
  2321                           	opt stack 0
  2322  000064                     ___lldiv@divisor:
  2323                           	opt stack 0
  2324                           
  2325                           ; 4 bytes @ 0x4
  2326  000064                     	ds	1
  2327  000065                     ??___ftpack:
  2328  000065                     ___awmod@sign:
  2329                           	opt stack 0
  2330  000065                     shiftIn@i:
  2331                           	opt stack 0
  2332  000065                     sendCommandSHT@ack:
  2333                           	opt stack 0
  2334                           
  2335                           ; 2 bytes @ 0x5
  2336  000065                     	ds	1
  2337  000066                     ??__tdiv_to_l_:
  2338  000066                     ?___awdiv:
  2339                           	opt stack 0
  2340  000066                     ___awdiv@dividend:
  2341                           	opt stack 0
  2342  000066                     __div_to_l_@quot:
  2343                           	opt stack 0
  2344                           
  2345                           ; 4 bytes @ 0x6
  2346  000066                     	ds	1
  2347  000067                     shiftIn@ret:
  2348                           	opt stack 0
  2349                           
  2350                           ; 2 bytes @ 0x7
  2351  000067                     	ds	1
  2352  000068                     ?___awtoft:
  2353                           	opt stack 0
  2354  000068                     ___awdiv@divisor:
  2355                           	opt stack 0
  2356  000068                     ___awtoft@c:
  2357                           	opt stack 0
  2358  000068                     ___lmul@product:
  2359                           	opt stack 0
  2360  000068                     ___lldiv@quotient:
  2361                           	opt stack 0
  2362                           
  2363                           ; 4 bytes @ 0x8
  2364  000068                     	ds	1
  2365  000069                     __tdiv_to_l_@quot:
  2366                           	opt stack 0
  2367                           
  2368                           ; 4 bytes @ 0x9
  2369  000069                     	ds	1
  2370  00006A                     ___awdiv@counter:
  2371                           	opt stack 0
  2372  00006A                     __div_to_l_@cntr:
  2373                           	opt stack 0
  2374                           
  2375                           ; 1 bytes @ 0xA
  2376  00006A                     	ds	1
  2377  00006B                     ___awdiv@sign:
  2378                           	opt stack 0
  2379  00006B                     ___awtoft@sign:
  2380                           	opt stack 0
  2381  00006B                     __div_to_l_@exp1:
  2382                           	opt stack 0
  2383                           
  2384                           ; 1 bytes @ 0xB
  2385  00006B                     	ds	1
  2386  00006C                     ___lldiv@counter:
  2387                           	opt stack 0
  2388  00006C                     DELAY_ms@ms:
  2389                           	opt stack 0
  2390  00006C                     ___awdiv@quotient:
  2391                           	opt stack 0
  2392                           
  2393                           ; 2 bytes @ 0xC
  2394  00006C                     	ds	1
  2395  00006D                     ?___llmod:
  2396                           	opt stack 0
  2397  00006D                     __tdiv_to_l_@cntr:
  2398                           	opt stack 0
  2399  00006D                     ___llmod@dividend:
  2400                           	opt stack 0
  2401                           
  2402                           ; 4 bytes @ 0xD
  2403  00006D                     	ds	1
  2404  00006E                     ?_shiftInCRC:
  2405                           	opt stack 0
  2406  00006E                     ?___wmul:
  2407                           	opt stack 0
  2408  00006E                     __tdiv_to_l_@exp1:
  2409                           	opt stack 0
  2410  00006E                     ___wmul@multiplier:
  2411                           	opt stack 0
  2412  00006E                     DELAY_ms@cyclesRequiredForEntireDelay:
  2413                           	opt stack 0
  2414                           
  2415                           ; 4 bytes @ 0xE
  2416  00006E                     	ds	2
  2417  000070                     ??_shiftInCRC:
  2418  000070                     ___wmul@multiplicand:
  2419                           	opt stack 0
  2420                           
  2421                           ; 2 bytes @ 0x10
  2422  000070                     	ds	1
  2423  000071                     shiftInCRC@ret:
  2424                           	opt stack 0
  2425  000071                     ___llmod@divisor:
  2426                           	opt stack 0
  2427                           
  2428                           ; 4 bytes @ 0x11
  2429  000071                     	ds	1
  2430  000072                     ___wmul@product:
  2431                           	opt stack 0
  2432                           
  2433                           ; 2 bytes @ 0x12
  2434  000072                     	ds	1
  2435  000073                     shiftInCRC@i:
  2436                           	opt stack 0
  2437                           
  2438                           ; 2 bytes @ 0x13
  2439  000073                     	ds	2
  2440  000075                     ___llmod@counter:
  2441                           	opt stack 0
  2442  000075                     getData16SHT@val:
  2443                           	opt stack 0
  2444                           
  2445                           ; 2 bytes @ 0x15
  2446  000075                     	ds	2
  2447  000077                     getData16SHT@CRC:
  2448                           	opt stack 0
  2449                           
  2450                           ; 2 bytes @ 0x17
  2451  000077                     	ds	2
  2452  000079                     ?_readTemperatureRaw:
  2453                           	opt stack 0
  2454                           
  2455                           ; 3 bytes @ 0x19
  2456  000079                     	ds	3
  2457  00007C                     readTemperatureRaw@crc:
  2458                           	opt stack 0
  2459                           
  2460                           ; 1 bytes @ 0x1C
  2461  00007C                     	ds	1
  2462  00007D                     readTemperatureRaw@_gTempCmd:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x1D
  2466  00007D                     	ds	2
  2467  00007F                     readTemperatureRaw@_val:
  2468                           	opt stack 0
  2469                           
  2470                           ; 2 bytes @ 0x1F
  2471  00007F                     	ds	2
  2472  000081                     readTemperatureRaw@calcCRC:
  2473                           	opt stack 0
  2474                           
  2475                           ; 1 bytes @ 0x21
  2476  000081                     	ds	1
  2477  000082                     ?___fttol:
  2478                           	opt stack 0
  2479  000082                     ___fttol@f1:
  2480                           	opt stack 0
  2481                           
  2482                           ; 3 bytes @ 0x22
  2483  000082                     	ds	4
  2484  000086                     ??___fttol:
  2485                           
  2486                           ; 1 bytes @ 0x26
  2487  000086                     	ds	5
  2488  00008B                     ___fttol@sign1:
  2489                           	opt stack 0
  2490                           
  2491                           ; 1 bytes @ 0x2B
  2492  00008B                     	ds	1
  2493  00008C                     ___fttol@lval:
  2494                           	opt stack 0
  2495                           
  2496                           ; 4 bytes @ 0x2C
  2497  00008C                     	ds	4
  2498  000090                     ___fttol@exp1:
  2499                           	opt stack 0
  2500                           
  2501                           ; 1 bytes @ 0x30
  2502  000090                     	ds	1
  2503  000091                     ?___lltoft:
  2504                           	opt stack 0
  2505  000091                     ___lltoft@c:
  2506                           	opt stack 0
  2507                           
  2508                           ; 4 bytes @ 0x31
  2509  000091                     	ds	4
  2510  000095                     ??___lltoft:
  2511                           
  2512                           ; 1 bytes @ 0x35
  2513  000095                     	ds	4
  2514  000099                     ___lltoft@exp:
  2515                           	opt stack 0
  2516                           
  2517                           ; 1 bytes @ 0x39
  2518  000099                     	ds	1
  2519  00009A                     ?___ftneg:
  2520                           	opt stack 0
  2521  00009A                     ___ftneg@f1:
  2522                           	opt stack 0
  2523                           
  2524                           ; 3 bytes @ 0x3A
  2525  00009A                     	ds	3
  2526  00009D                     ?___ftmul:
  2527                           	opt stack 0
  2528  00009D                     ___ftmul@f1:
  2529                           	opt stack 0
  2530                           
  2531                           ; 3 bytes @ 0x3D
  2532  00009D                     	ds	3
  2533  0000A0                     ___ftmul@f2:
  2534                           	opt stack 0
  2535                           
  2536                           ; 3 bytes @ 0x40
  2537  0000A0                     	ds	3
  2538  0000A3                     ??___ftmul:
  2539                           
  2540                           ; 1 bytes @ 0x43
  2541  0000A3                     	ds	3
  2542  0000A6                     ___ftmul@exp:
  2543                           	opt stack 0
  2544                           
  2545                           ; 1 bytes @ 0x46
  2546  0000A6                     	ds	1
  2547  0000A7                     ___ftmul@f3_as_product:
  2548                           	opt stack 0
  2549                           
  2550                           ; 3 bytes @ 0x47
  2551  0000A7                     	ds	3
  2552  0000AA                     ___ftmul@cntr:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x4A
  2556  0000AA                     	ds	1
  2557  0000AB                     ___ftmul@sign:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0x4B
  2561  0000AB                     	ds	1
  2562  0000AC                     ?_fround:
  2563                           	opt stack 0
  2564  0000AC                     ?_scale:
  2565                           	opt stack 0
  2566                           
  2567                           ; 3 bytes @ 0x4C
  2568  0000AC                     	ds	3
  2569  0000AF                     _fround$5667:
  2570                           	opt stack 0
  2571  0000AF                     _scale$5668:
  2572                           	opt stack 0
  2573                           
  2574                           ; 3 bytes @ 0x4F
  2575  0000AF                     	ds	3
  2576  0000B2                     scale@scl:
  2577                           	opt stack 0
  2578  0000B2                     _fround$5666:
  2579                           	opt stack 0
  2580                           
  2581                           ; 3 bytes @ 0x52
  2582  0000B2                     	ds	1
  2583  0000B3                     ?___ftdiv:
  2584                           	opt stack 0
  2585  0000B3                     ___ftdiv@f1:
  2586                           	opt stack 0
  2587                           
  2588                           ; 3 bytes @ 0x53
  2589  0000B3                     	ds	2
  2590  0000B5                     fround@prec:
  2591                           	opt stack 0
  2592                           
  2593                           ; 1 bytes @ 0x55
  2594  0000B5                     	ds	1
  2595  0000B6                     ?___ftadd:
  2596                           	opt stack 0
  2597  0000B6                     ___ftadd@f1:
  2598                           	opt stack 0
  2599  0000B6                     ___ftdiv@f2:
  2600                           	opt stack 0
  2601                           
  2602                           ; 3 bytes @ 0x56
  2603  0000B6                     	ds	3
  2604  0000B9                     ??___ftdiv:
  2605  0000B9                     ___ftadd@f2:
  2606                           	opt stack 0
  2607                           
  2608                           ; 3 bytes @ 0x59
  2609  0000B9                     	ds	3
  2610  0000BC                     ??___ftadd:
  2611  0000BC                     ___ftdiv@cntr:
  2612                           	opt stack 0
  2613                           
  2614                           ; 1 bytes @ 0x5C
  2615  0000BC                     	ds	1
  2616  0000BD                     ___ftdiv@f3:
  2617                           	opt stack 0
  2618                           
  2619                           ; 3 bytes @ 0x5D
  2620  0000BD                     	ds	2
  2621  0000BF                     ___ftadd@sign:
  2622                           	opt stack 0
  2623                           
  2624                           ; 1 bytes @ 0x5F
  2625  0000BF                     	ds	1
  2626  0000C0                     ___ftadd@exp2:
  2627                           	opt stack 0
  2628  0000C0                     ___ftdiv@exp:
  2629                           	opt stack 0
  2630                           
  2631                           ; 1 bytes @ 0x60
  2632  0000C0                     	ds	1
  2633  0000C1                     ___ftadd@exp1:
  2634                           	opt stack 0
  2635  0000C1                     ___ftdiv@sign:
  2636                           	opt stack 0
  2637                           
  2638                           ; 1 bytes @ 0x61
  2639  0000C1                     	ds	1
  2640  0000C2                     ?___ftsub:
  2641                           	opt stack 0
  2642  0000C2                     ?_readTemperatureC:
  2643                           	opt stack 0
  2644  0000C2                     ___ftge@ff1:
  2645                           	opt stack 0
  2646  0000C2                     ___ftsub@f1:
  2647                           	opt stack 0
  2648                           
  2649                           ; 3 bytes @ 0x62
  2650  0000C2                     	ds	3
  2651  0000C5                     readTemperatureC@_temperature:
  2652                           	opt stack 0
  2653  0000C5                     ___ftge@ff2:
  2654                           	opt stack 0
  2655  0000C5                     ___ftsub@f2:
  2656                           	opt stack 0
  2657                           
  2658                           ; 3 bytes @ 0x65
  2659  0000C5                     	ds	3
  2660  0000C8                     ??___ftge:
  2661  0000C8                     readTemperatureC@D1:
  2662                           	opt stack 0
  2663                           
  2664                           ; 3 bytes @ 0x68
  2665  0000C8                     	ds	3
  2666  0000CB                     readTemperatureC@D2:
  2667                           	opt stack 0
  2668                           
  2669                           ; 3 bytes @ 0x6B
  2670  0000CB                     	ds	3
  2671  0000CE                     readTemperatureC@_val:
  2672                           	opt stack 0
  2673                           
  2674                           ; 2 bytes @ 0x6E
  2675  0000CE                     	ds	2
  2676  0000D0                     ?_readHumidity:
  2677                           	opt stack 0
  2678                           
  2679                           ; 3 bytes @ 0x70
  2680  0000D0                     	ds	3
  2681  0000D3                     readHumidity@_linearHumidity:
  2682                           	opt stack 0
  2683                           
  2684                           ; 3 bytes @ 0x73
  2685  0000D3                     	ds	3
  2686  0000D6                     readHumidity@_correctedHumidity:
  2687                           	opt stack 0
  2688                           
  2689                           ; 3 bytes @ 0x76
  2690  0000D6                     	ds	3
  2691  0000D9                     readHumidity@_temperature:
  2692                           	opt stack 0
  2693                           
  2694                           ; 3 bytes @ 0x79
  2695  0000D9                     	ds	3
  2696  0000DC                     readHumidity@C1:
  2697                           	opt stack 0
  2698                           
  2699                           ; 3 bytes @ 0x7C
  2700  0000DC                     	ds	3
  2701  0000DF                     readHumidity@C2:
  2702                           	opt stack 0
  2703                           
  2704                           ; 3 bytes @ 0x7F
  2705  0000DF                     	ds	3
  2706  0000E2                     readHumidity@C3:
  2707                           	opt stack 0
  2708                           
  2709                           ; 3 bytes @ 0x82
  2710  0000E2                     	ds	3
  2711  0000E5                     readHumidity@T1:
  2712                           	opt stack 0
  2713                           
  2714                           ; 3 bytes @ 0x85
  2715  0000E5                     	ds	3
  2716  0000E8                     readHumidity@T2:
  2717                           	opt stack 0
  2718                           
  2719                           ; 3 bytes @ 0x88
  2720  0000E8                     	ds	3
  2721  0000EB                     readHumidity@_gHumidCmd:
  2722                           	opt stack 0
  2723                           
  2724                           ; 2 bytes @ 0x8B
  2725  0000EB                     	ds	2
  2726  0000ED                     readHumidity@crc:
  2727                           	opt stack 0
  2728                           
  2729                           ; 1 bytes @ 0x8D
  2730  0000ED                     	ds	1
  2731  0000EE                     _readHumidity$5664:
  2732                           	opt stack 0
  2733                           
  2734                           ; 3 bytes @ 0x8E
  2735  0000EE                     	ds	3
  2736  0000F1                     _readHumidity$5665:
  2737                           	opt stack 0
  2738                           
  2739                           ; 3 bytes @ 0x91
  2740  0000F1                     	ds	3
  2741  0000F4                     readHumidity@_val:
  2742                           	opt stack 0
  2743                           
  2744                           ; 2 bytes @ 0x94
  2745  0000F4                     	ds	2
  2746  0000F6                     ??_sprintf:
  2747                           
  2748                           ; 1 bytes @ 0x96
  2749  0000F6                     	ds	6
  2750  0000FC                     tblptru	equ	0xFF8
  2751                           tblptrh	equ	0xFF7
  2752                           tblptrl	equ	0xFF6
  2753                           tablat	equ	0xFF5
  2754                           postinc0	equ	0xFEE
  2755                           wreg	equ	0xFE8
  2756                           postdec1	equ	0xFE5
  2757                           fsr1h	equ	0xFE2
  2758                           fsr1l	equ	0xFE1
  2759                           
  2760                           ; 1 bytes @ 0x9C
  2761                           
  2762                           	psect	cstackCOMRAM
  2763  000001                     __pcstackCOMRAM:
  2764                           	opt stack 0
  2765  000001                     SPIPut@i:
  2766                           	opt stack 0
  2767                           
  2768                           ; 1 bytes @ 0x0
  2769  000001                     	ds	1
  2770  000002                     SPIPut@v:
  2771                           	opt stack 0
  2772                           
  2773                           ; 1 bytes @ 0x1
  2774  000002                     	ds	1
  2775  000003                     PHYSetShortRAMAddr@value:
  2776                           	opt stack 0
  2777  000003                     PHYGetShortRAMAddr@address:
  2778                           	opt stack 0
  2779  000003                     PHYGetLongRAMAddr@address:
  2780                           	opt stack 0
  2781                           
  2782                           ; 2 bytes @ 0x2
  2783  000003                     	ds	1
  2784  000004                     PHYSetShortRAMAddr@address:
  2785                           	opt stack 0
  2786  000004                     PHYGetShortRAMAddr@toReturn:
  2787                           	opt stack 0
  2788                           
  2789                           ; 1 bytes @ 0x3
  2790  000004                     	ds	1
  2791  000005                     ??_PHYGetLongRAMAddr:
  2792  000005                     PHYSetShortRAMAddr@tmpRFIE:
  2793                           	opt stack 0
  2794  000005                     PHYGetShortRAMAddr@tmpRFIE:
  2795                           	opt stack 0
  2796                           
  2797                           ; 1 bytes @ 0x4
  2798  000005                     	ds	2
  2799  000007                     PHYGetLongRAMAddr@toReturn:
  2800                           	opt stack 0
  2801                           
  2802                           ; 1 bytes @ 0x6
  2803  000007                     	ds	1
  2804  000008                     PHYGetLongRAMAddr@tmpRFIE:
  2805                           	opt stack 0
  2806                           
  2807                           ; 1 bytes @ 0x7
  2808  000008                     	ds	1
  2809  000009                     ??_high_isr:
  2810                           
  2811                           ; 1 bytes @ 0x8
  2812  000009                     	ds	23
  2813  000020                     high_isr@temp:
  2814                           	opt stack 0
  2815                           
  2816                           ; 2 bytes @ 0x1F
  2817  000020                     	ds	2
  2818  000022                     high_isr@temp_2151:
  2819                           	opt stack 0
  2820                           
  2821                           ; 2 bytes @ 0x21
  2822  000022                     	ds	2
  2823  000024                     high_isr@results:
  2824                           	opt stack 0
  2825                           
  2826                           ; 1 bytes @ 0x23
  2827  000024                     	ds	1
  2828  000025                     high_isr@pwm_value_high_time:
  2829                           	opt stack 0
  2830                           
  2831                           ; 2 bytes @ 0x24
  2832  000025                     	ds	2
  2833  000027                     high_isr@flags:
  2834                           	opt stack 0
  2835                           
  2836                           ; 2 bytes @ 0x26
  2837  000027                     	ds	2
  2838  000029                     high_isr@RxBank:
  2839                           	opt stack 0
  2840                           
  2841                           ; 1 bytes @ 0x28
  2842  000029                     	ds	1
  2843  00002A                     high_isr@i:
  2844                           	opt stack 0
  2845                           
  2846                           ; 1 bytes @ 0x29
  2847  00002A                     	ds	1
  2848                           tblptru	equ	0xFF8
  2849                           tblptrh	equ	0xFF7
  2850                           tblptrl	equ	0xFF6
  2851                           tablat	equ	0xFF5
  2852                           postinc0	equ	0xFEE
  2853                           wreg	equ	0xFE8
  2854                           postdec1	equ	0xFE5
  2855                           fsr1h	equ	0xFE2
  2856                           fsr1l	equ	0xFE1
  2857                           
  2858 ;;
  2859 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2860 ;;
  2861 ;; *************** function _main *****************
  2862 ;; Defined at:
  2863 ;;		line 29 in file "../src/main.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;		None
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;		None
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      void 
  2870 ;; Registers used:
  2871 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2881 ;;Total ram usage:        0 bytes
  2882 ;; Hardware stack levels required when called:   10
  2883 ;; This function calls:
  2884 ;;		_LCD_Update
  2885 ;;		_SYSTEM_Initialize
  2886 ;;		_readHumidity
  2887 ;;		_readTemperatureC
  2888 ;;		_sprintf
  2889 ;; This function is called by:
  2890 ;;		Startup code after reset
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text0
  2895  00371E                     __ptext0:
  2896                           	opt stack 0
  2897  00371E                     _main:
  2898                           	opt stack 21
  2899                           
  2900                           ;main.c: 31: SYSTEM_Initialize();
  2901                           
  2902                           ;incstack = 0
  2903  00371E  ECAD  F017         	call	_SYSTEM_Initialize	;wreg free
  2904  003722                     
  2905                           ;main.c: 35: sprintf((char *)&LCDText, (char*)"Temp : %.2f", readTemperatureC());
  2906  003722  0E70               	movlw	low _LCDText
  2907  003724  0101               	movlb	1	; () banked
  2908  003726  6FB4               	movwf	sprintf@sp& (0+255),b
  2909  003728  0E01               	movlw	high _LCDText
  2910  00372A  6FB5               	movwf	(sprintf@sp+1)& (0+255),b
  2911  00372C  0EBE               	movlw	low STR_48
  2912  00372E  6FB6               	movwf	sprintf@f& (0+255),b
  2913  003730  0EFF               	movlw	high STR_48
  2914  003732  6FB7               	movwf	(sprintf@f+1)& (0+255),b
  2915  003734  EC4E  F018         	call	_readTemperatureC	;wreg free
  2916  003738  C0C2  F1B8         	movff	?_readTemperatureC,?_sprintf+4
  2917  00373C  C0C3  F1B9         	movff	?_readTemperatureC+1,?_sprintf+5
  2918  003740  C0C4  F1BA         	movff	?_readTemperatureC+2,?_sprintf+6
  2919  003744  EC50  F001         	call	_sprintf	;wreg free
  2920                           
  2921                           ;main.c: 36: sprintf((char *)&LCDText[16], (char*)"WetNES : %.2f", readHumidity());
  2922  003748  0E80               	movlw	low (_LCDText+16)
  2923  00374A  0101               	movlb	1	; () banked
  2924  00374C  6FB4               	movwf	sprintf@sp& (0+255),b
  2925  00374E  0E01               	movlw	high (_LCDText+16)
  2926  003750  6FB5               	movwf	(sprintf@sp+1)& (0+255),b
  2927  003752  0EB0               	movlw	low STR_49
  2928  003754  6FB6               	movwf	sprintf@f& (0+255),b
  2929  003756  0EFF               	movlw	high STR_49
  2930  003758  6FB7               	movwf	(sprintf@f+1)& (0+255),b
  2931  00375A  ECA5  F011         	call	_readHumidity	;wreg free
  2932  00375E  C0D0  F1B8         	movff	?_readHumidity,?_sprintf+4
  2933  003762  C0D1  F1B9         	movff	?_readHumidity+1,?_sprintf+5
  2934  003766  C0D2  F1BA         	movff	?_readHumidity+2,?_sprintf+6
  2935  00376A  EC50  F001         	call	_sprintf	;wreg free
  2936                           
  2937                           ;main.c: 37: LCD_Update();
  2938  00376E  ECFE  F017         	call	_LCD_Update	;wreg free
  2939  003772  D7D7               	goto	l2158
  2940  003774                     __end_of_main:
  2941                           	opt stack 0
  2942                           tblptru	equ	0xFF8
  2943                           tblptrh	equ	0xFF7
  2944                           tblptrl	equ	0xFF6
  2945                           tablat	equ	0xFF5
  2946                           postinc0	equ	0xFEE
  2947                           wreg	equ	0xFE8
  2948                           postdec1	equ	0xFE5
  2949                           fsr1h	equ	0xFE2
  2950                           fsr1l	equ	0xFE1
  2951                           
  2952 ;; *************** function _sprintf *****************
  2953 ;; Defined at:
  2954 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;  sp              2    0[BANK1 ] PTR unsigned char 
  2957 ;;		 -> LCDText(33), 
  2958 ;;  f               2    2[BANK1 ] PTR const unsigned char 
  2959 ;;		 -> STR_52(33), STR_51(18), STR_50(23), STR_49(14), 
  2960 ;;		 -> STR_48(12), STR_47(26), STR_46(26), STR_45(12), 
  2961 ;;		 -> STR_44(31), STR_43(33), STR_42(32), STR_41(33), 
  2962 ;;		 -> STR_40(32), STR_39(33), STR_38(32), STR_37(33), 
  2963 ;;		 -> STR_36(33), STR_35(2), STR_34(5), STR_33(2), 
  2964 ;;		 -> STR_32(4), STR_31(4), STR_30(10), STR_29(16), 
  2965 ;;		 -> STR_28(17), STR_27(31), STR_26(31), STR_25(31), 
  2966 ;;		 -> STR_24(33), STR_23(15), STR_22(29), STR_21(29), 
  2967 ;;		 -> STR_20(33), STR_19(31), STR_18(31), STR_17(33), 
  2968 ;;		 -> STR_16(33), STR_15(31), STR_14(31), STR_13(17), 
  2969 ;;		 -> STR_12(12), STR_11(27), STR_10(26), STR_9(36), 
  2970 ;;		 -> STR_8(33), STR_7(33), STR_6(33), STR_5(33), 
  2971 ;;		 -> STR_4(31), STR_3(33), STR_2(31), STR_1(17), 
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;  idx             1   15[BANK1 ] unsigned char 
  2974 ;;  temp            3   36[BANK1 ] unsigned char 
  2975 ;;  val             4   51[BANK1 ] unsigned long 
  2976 ;;  tmpval          4   43[BANK1 ] struct .
  2977 ;;  fval            3   55[BANK1 ] struct .
  2978 ;;  flag            2   61[BANK1 ] unsigned short 
  2979 ;;  prec            2   58[BANK1 ] int 
  2980 ;;  width           2   49[BANK1 ] int 
  2981 ;;  exp             2   47[BANK1 ] int 
  2982 ;;  ap              2   41[BANK1 ] PTR void [1]
  2983 ;;		 -> ?_sprintf(2), 
  2984 ;;  len             2   39[BANK1 ] unsigned int 
  2985 ;;  cp              2   16[BANK1 ] PTR const unsigned char 
  2986 ;;		 -> sprintf@c(1), 
  2987 ;;  c               1   60[BANK1 ] char 
  2988 ;;  d               1    0        unsigned char 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  2    0[BANK1 ] int 
  2991 ;; Registers used:
  2992 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2998 ;;      Params:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2999 ;;      Locals:         0       0      51       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3000 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3001 ;;      Totals:         0       6      63       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3002 ;;Total ram usage:       69 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    7
  3005 ;; This function calls:
  3006 ;;		___awdiv
  3007 ;;		___awmod
  3008 ;;		___ftadd
  3009 ;;		___ftdiv
  3010 ;;		___ftge
  3011 ;;		___ftmul
  3012 ;;		___ftneg
  3013 ;;		___ftsub
  3014 ;;		___fttol
  3015 ;;		___lldiv
  3016 ;;		___llmod
  3017 ;;		___lltoft
  3018 ;;		___wmul
  3019 ;;		__div_to_l_
  3020 ;;		__tdiv_to_l_
  3021 ;;		_fround
  3022 ;;		_isdigit
  3023 ;;		_scale
  3024 ;; This function is called by:
  3025 ;;		_main
  3026 ;;		_Teacher
  3027 ;;		_Student
  3028 ;;		_questionnaire_function
  3029 ;;		_PrintTempLCD
  3030 ;;		_RangeDemo
  3031 ;;		_LCD_Display
  3032 ;;		_Network
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           	psect	text1
  3037  0002A0                     __ptext1:
  3038                           	opt stack 0
  3039  0002A0                     _sprintf:
  3040                           	opt stack 23
  3041                           
  3042                           ;doprnt.c: 494: va_list ap;
  3043                           ;doprnt.c: 499: signed char c;
  3044                           ;doprnt.c: 501: int width;
  3045                           ;doprnt.c: 504: int prec;
  3046                           ;doprnt.c: 508: unsigned short flag;
  3047                           ;doprnt.c: 515: char d;
  3048                           ;doprnt.c: 516: double fval;
  3049                           ;doprnt.c: 517: int exp;
  3050                           ;doprnt.c: 523: union {
  3051                           ;doprnt.c: 524: unsigned long vd;
  3052                           ;doprnt.c: 525: double integ;
  3053                           ;doprnt.c: 526: } tmpval;
  3054                           ;doprnt.c: 528: unsigned long val;
  3055                           ;doprnt.c: 529: unsigned len;
  3056                           ;doprnt.c: 530: const char * cp;
  3057                           ;doprnt.c: 533: *ap = __va_start();
  3058                           
  3059                           ;incstack = 0
  3060  0002A0  0EB8               	movlw	low (?_sprintf+4)
  3061  0002A2  0101               	movlb	1	; () banked
  3062  0002A4  6FDD               	movwf	sprintf@ap& (0+255),b
  3063  0002A6  0E01               	movlw	high (?_sprintf+4)
  3064  0002A8  6FDE               	movwf	(sprintf@ap+1)& (0+255),b
  3065                           
  3066                           ;doprnt.c: 536: while(c = *f++) {
  3067  0002AA  EF3D  F00E         	goto	u24110
  3068  0002AE                     
  3069                           ; BSR set to: 1
  3070                           ;doprnt.c: 538: if(c != '%')
  3071                           
  3072                           ; BSR set to: 1
  3073  0002AE  0E25               	movlw	37
  3074  0002B0  19F0               	xorwf	sprintf@c& (0+255),w,b
  3075  0002B2  B4D8               	btfsc	status,2,c
  3076  0002B4  D00A               	goto	l2305
  3077                           
  3078                           ; BSR set to: 1
  3079                           ;doprnt.c: 540: {
  3080                           ;doprnt.c: 541: ((*sp++ = (c)));
  3081  0002B6  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  3082  0002BA  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  3083  0002BE  C1F0  FFDF         	movff	sprintf@c,indf2
  3084                           
  3085                           ; BSR set to: 1
  3086  0002C2  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  3087  0002C4  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  3088                           
  3089                           ;doprnt.c: 542: continue;
  3090  0002C6  EF3D  F00E         	goto	u24110
  3091  0002CA                     l2305:
  3092                           
  3093                           ; BSR set to: 1
  3094                           ;doprnt.c: 543: }
  3095                           ;doprnt.c: 546: width = 0;
  3096                           
  3097                           ; BSR set to: 1
  3098  0002CA  0E00               	movlw	0
  3099  0002CC  6FE6               	movwf	(sprintf@width+1)& (0+255),b
  3100  0002CE  0E00               	movlw	0
  3101  0002D0  6FE5               	movwf	sprintf@width& (0+255),b
  3102                           
  3103                           ;doprnt.c: 548: flag = 0;
  3104  0002D2  0E00               	movlw	0
  3105  0002D4  6FF2               	movwf	(sprintf@flag+1)& (0+255),b
  3106  0002D6  0E00               	movlw	0
  3107  0002D8  6FF1               	movwf	sprintf@flag& (0+255),b
  3108                           
  3109                           ; BSR set to: 1
  3110                           ;doprnt.c: 551: switch(*f) {
  3111                           
  3112                           ;doprnt.c: 550: for(;;) {
  3113  0002DA  D010               	goto	l2307
  3114  0002DC                     
  3115                           ;doprnt.c: 554: flag |= 0x08;
  3116                           
  3117                           ; BSR set to: 1
  3118  0002DC  0101               	movlb	1	; () banked
  3119  0002DE  87F1               	bsf	sprintf@flag& (0+255),3,b
  3120  0002E0  D00B               	goto	L4
  3121  0002E2                     
  3122                           ;doprnt.c: 561: flag |= 0x01;
  3123                           
  3124                           ; BSR set to: 1
  3125  0002E2  0101               	movlb	1	; () banked
  3126  0002E4  81F1               	bsf	sprintf@flag& (0+255),0,b
  3127  0002E6  D008               	goto	L4
  3128  0002E8                     
  3129                           ;doprnt.c: 568: flag |= 0x02;
  3130                           
  3131                           ; BSR set to: 1
  3132  0002E8  0101               	movlb	1	; () banked
  3133  0002EA  83F1               	bsf	sprintf@flag& (0+255),1,b
  3134  0002EC  D005               	goto	L4
  3135  0002EE                     
  3136                           ;doprnt.c: 574: flag |= 0x800;
  3137                           
  3138                           ; BSR set to: 1
  3139  0002EE  0101               	movlb	1	; () banked
  3140  0002F0  87F2               	bsf	(sprintf@flag+1)& (0+255),3,b
  3141  0002F2  D002               	goto	L4
  3142  0002F4                     
  3143                           ;doprnt.c: 580: flag |= 0x04;
  3144                           
  3145                           ; BSR set to: 1
  3146  0002F4  0101               	movlb	1	; () banked
  3147  0002F6  85F1               	bsf	sprintf@flag& (0+255),2,b
  3148  0002F8                     L4:
  3149                           
  3150                           ;doprnt.c: 581: f++;
  3151  0002F8  4BB6               	infsnz	sprintf@f& (0+255),f,b
  3152  0002FA  2BB7               	incf	(sprintf@f+1)& (0+255),f,b
  3153  0002FC                     l2307:
  3154                           
  3155                           ; BSR set to: 1
  3156  0002FC  C1B6  FFF6         	movff	sprintf@f,tblptrl
  3157  000300  C1B7  FFF7         	movff	sprintf@f+1,tblptrh
  3158  000304                     	if	0	;tblptru may be non-zero
  3159  000304                     	endif
  3160  000304                     	if	0	;tblptru may be non-zero
  3161  000304                     	endif
  3162  000304  0008               	tblrd		*
  3163  000306  50F5               	movf	tablat,w,c
  3164                           
  3165                           ; Switch size 1, requested type "space"
  3166                           ; Number of cases is 5, Range of values is 32 to 48
  3167                           ; switch strategies available:
  3168                           ; Name         Instructions Cycles
  3169                           ; simple_byte           16     9 (average)
  3170                           ;	Chosen strategy is simple_byte
  3171  000308  0A20               	xorlw	32	; case 32
  3172  00030A  B4D8               	btfsc	status,2,c
  3173  00030C  D7EA               	goto	l2310
  3174  00030E  0A03               	xorlw	3	; case 35
  3175  000310  B4D8               	btfsc	status,2,c
  3176  000312  D7ED               	goto	l2312
  3177  000314  0A08               	xorlw	8	; case 43
  3178  000316  B4D8               	btfsc	status,2,c
  3179  000318  D7E7               	goto	l2311
  3180  00031A  0A06               	xorlw	6	; case 45
  3181  00031C  B4D8               	btfsc	status,2,c
  3182  00031E  D7DE               	goto	l2308
  3183  000320  0A1D               	xorlw	29	; case 48
  3184  000322  B4D8               	btfsc	status,2,c
  3185  000324  D7E7               	goto	l2313
  3186                           
  3187                           ;doprnt.c: 589: if(flag & 0x02)
  3188                           
  3189                           ;doprnt.c: 586: }
  3190                           
  3191                           ;doprnt.c: 585: break;
  3192  000326  0101               	movlb	1	; () banked
  3193  000328  B3F1               	btfsc	sprintf@flag& (0+255),1,b
  3194                           
  3195                           ; BSR set to: 1
  3196                           ;doprnt.c: 590: flag &= ~0x01;
  3197  00032A  91F1               	bcf	sprintf@flag& (0+255),0,b
  3198                           
  3199                           ; BSR set to: 1
  3200                           ;doprnt.c: 593: if(flag & 0x08)
  3201                           
  3202                           ; BSR set to: 1
  3203  00032C  B7F1               	btfsc	sprintf@flag& (0+255),3,b
  3204                           
  3205                           ; BSR set to: 1
  3206                           ;doprnt.c: 594: flag &= ~0x04;
  3207  00032E  95F1               	bcf	sprintf@flag& (0+255),2,b
  3208                           
  3209                           ; BSR set to: 1
  3210                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3211                           
  3212                           ; BSR set to: 1
  3213  000330  C1B6  FFF6         	movff	sprintf@f,tblptrl
  3214  000334  C1B7  FFF7         	movff	sprintf@f+1,tblptrh
  3215  000338                     	if	0	;tblptru may be non-zero
  3216  000338                     	endif
  3217  000338                     	if	0	;tblptru may be non-zero
  3218  000338                     	endif
  3219  000338  0008               	tblrd		*
  3220  00033A  50F5               	movf	tablat,w,c
  3221  00033C  ECB3  F01C         	call	_isdigit
  3222  000340  A0D8               	btfss	status,0,c
  3223  000342  D039               	goto	l2318
  3224                           
  3225                           ;doprnt.c: 598: width = 0;
  3226  000344  0E00               	movlw	0
  3227  000346  0101               	movlb	1	; () banked
  3228  000348  6FE6               	movwf	(sprintf@width+1)& (0+255),b
  3229  00034A  0E00               	movlw	0
  3230  00034C  6FE5               	movwf	sprintf@width& (0+255),b
  3231  00034E                     
  3232                           ;doprnt.c: 600: width *= 10;
  3233                           
  3234                           ; BSR set to: 1
  3235  00034E  C1E5  F06E         	movff	sprintf@width,___wmul@multiplier
  3236  000352  C1E6  F06F         	movff	sprintf@width+1,___wmul@multiplier+1
  3237  000356  0E00               	movlw	0
  3238  000358  0100               	movlb	0	; () banked
  3239  00035A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3240  00035C  0E0A               	movlw	10
  3241  00035E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3242  000360  EC78  F01C         	call	___wmul	;wreg free
  3243  000364  C06E  F1E5         	movff	?___wmul,sprintf@width
  3244  000368  C06F  F1E6         	movff	?___wmul+1,sprintf@width+1
  3245                           
  3246                           ;doprnt.c: 601: width += *f++ - '0';
  3247  00036C  0ED0               	movlw	208
  3248  00036E  0100               	movlb	0	; () banked
  3249  000370  6FF6               	movwf	??_sprintf& (0+255),b
  3250  000372  0EFF               	movlw	255
  3251  000374  6FF7               	movwf	(??_sprintf+1)& (0+255),b
  3252  000376  C1B6  FFF6         	movff	sprintf@f,tblptrl
  3253  00037A  C1B7  FFF7         	movff	sprintf@f+1,tblptrh
  3254  00037E                     	if	0	;tblptru may be non-zero
  3255  00037E                     	endif
  3256  00037E                     	if	0	;tblptru may be non-zero
  3257  00037E                     	endif
  3258  00037E  0008               	tblrd		*
  3259  000380  50F5               	movf	tablat,w,c
  3260  000382  6FF8               	movwf	(??_sprintf+2)& (0+255),b
  3261  000384  6BF9               	clrf	(??_sprintf+3)& (0+255),b
  3262  000386  51F6               	movf	??_sprintf& (0+255),w,b
  3263  000388  27F8               	addwf	(??_sprintf+2)& (0+255),f,b
  3264  00038A  51F7               	movf	(??_sprintf+1)& (0+255),w,b
  3265  00038C  23F9               	addwfc	(??_sprintf+3)& (0+255),f,b
  3266  00038E  51F8               	movf	(??_sprintf+2)& (0+255),w,b
  3267  000390  0101               	movlb	1	; () banked
  3268  000392  27E5               	addwf	sprintf@width& (0+255),f,b
  3269  000394  0100               	movlb	0	; () banked
  3270  000396  51F9               	movf	(??_sprintf+3)& (0+255),w,b
  3271  000398  0101               	movlb	1	; () banked
  3272  00039A  23E6               	addwfc	(sprintf@width+1)& (0+255),f,b
  3273                           
  3274                           ; BSR set to: 1
  3275  00039C  4BB6               	infsnz	sprintf@f& (0+255),f,b
  3276  00039E  2BB7               	incf	(sprintf@f+1)& (0+255),f,b
  3277                           
  3278                           ; BSR set to: 1
  3279                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3280  0003A0  C1B6  FFF6         	movff	sprintf@f,tblptrl
  3281  0003A4  C1B7  FFF7         	movff	sprintf@f+1,tblptrh
  3282  0003A8                     	if	0	;tblptru may be non-zero
  3283  0003A8                     	endif
  3284  0003A8                     	if	0	;tblptru may be non-zero
  3285  0003A8                     	endif
  3286  0003A8  0008               	tblrd		*
  3287  0003AA  50F5               	movf	tablat,w,c
  3288  0003AC  ECB3  F01C         	call	_isdigit
  3289  0003B0  A0D8               	btfss	status,0,c
  3290  0003B2  D019               	goto	l2322
  3291  0003B4  D7CC               	goto	l2319
  3292  0003B6                     l2318:
  3293  0003B6  C1B6  FFF6         	movff	sprintf@f,tblptrl
  3294  0003BA  C1B7  FFF7         	movff	sprintf@f+1,tblptrh
  3295  0003BE                     	if	0	;tblptru may be non-zero
  3296  0003BE                     	endif
  3297  0003BE                     	if	0	;tblptru may be non-zero
  3298  0003BE                     	endif
  3299  0003BE  0008               	tblrd		*
  3300  0003C0  50F5               	movf	tablat,w,c
  3301  0003C2  0A2A               	xorlw	42
  3302  0003C4  A4D8               	btfss	status,2,c
  3303  0003C6  D00F               	goto	l2322
  3304                           
  3305                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  3306  0003C8  C1DD  FFD9         	movff	sprintf@ap,fsr2l
  3307  0003CC  C1DE  FFDA         	movff	sprintf@ap+1,fsr2h
  3308  0003D0  CFDE F1E5          	movff	postinc2,sprintf@width
  3309  0003D4  CFDD F1E6          	movff	postdec2,sprintf@width+1
  3310  0003D8  0E02               	movlw	2
  3311  0003DA  0101               	movlb	1	; () banked
  3312  0003DC  27DD               	addwf	sprintf@ap& (0+255),f,b
  3313  0003DE  0E00               	movlw	0
  3314  0003E0  23DE               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3315                           
  3316                           ; BSR set to: 1
  3317                           ;doprnt.c: 606: f++;
  3318  0003E2  4BB6               	infsnz	sprintf@f& (0+255),f,b
  3319  0003E4  2BB7               	incf	(sprintf@f+1)& (0+255),f,b
  3320  0003E6                     l2322:
  3321                           
  3322                           ;doprnt.c: 608: }
  3323                           ;doprnt.c: 611: if(*f == '.') {
  3324                           
  3325                           ; BSR set to: 1
  3326                           
  3327                           ; BSR set to: 1
  3328  0003E6  C1B6  FFF6         	movff	sprintf@f,tblptrl
  3329  0003EA  C1B7  FFF7         	movff	sprintf@f+1,tblptrh
  3330  0003EE                     	if	0	;tblptru may be non-zero
  3331  0003EE                     	endif
  3332  0003EE                     	if	0	;tblptru may be non-zero
  3333  0003EE                     	endif
  3334  0003EE  0008               	tblrd		*
  3335  0003F0  50F5               	movf	tablat,w,c
  3336  0003F2  0A2E               	xorlw	46
  3337  0003F4  A4D8               	btfss	status,2,c
  3338  0003F6  D04C               	goto	l2323
  3339                           
  3340                           ;doprnt.c: 612: flag |= 0x4000;
  3341  0003F8  0101               	movlb	1	; () banked
  3342  0003FA  8DF2               	bsf	(sprintf@flag+1)& (0+255),6,b
  3343                           
  3344                           ;doprnt.c: 613: f++;
  3345  0003FC  4BB6               	infsnz	sprintf@f& (0+255),f,b
  3346  0003FE  2BB7               	incf	(sprintf@f+1)& (0+255),f,b
  3347                           
  3348                           ; BSR set to: 1
  3349                           ;doprnt.c: 615: if(*f == '*') {
  3350  000400  C1B6  FFF6         	movff	sprintf@f,tblptrl
  3351  000404  C1B7  FFF7         	movff	sprintf@f+1,tblptrh
  3352  000408                     	if	0	;tblptru may be non-zero
  3353  000408                     	endif
  3354  000408                     	if	0	;tblptru may be non-zero
  3355  000408                     	endif
  3356  000408  0008               	tblrd		*
  3357  00040A  50F5               	movf	tablat,w,c
  3358  00040C  0A2A               	xorlw	42
  3359  00040E  A4D8               	btfss	status,2,c
  3360  000410  D00F               	goto	l2324
  3361                           
  3362                           ; BSR set to: 1
  3363                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  3364  000412  C1DD  FFD9         	movff	sprintf@ap,fsr2l
  3365  000416  C1DE  FFDA         	movff	sprintf@ap+1,fsr2h
  3366  00041A  CFDE F1EE          	movff	postinc2,sprintf@prec
  3367  00041E  CFDD F1EF          	movff	postdec2,sprintf@prec+1
  3368                           
  3369                           ; BSR set to: 1
  3370  000422  0E02               	movlw	2
  3371  000424  27DD               	addwf	sprintf@ap& (0+255),f,b
  3372  000426  0E00               	movlw	0
  3373  000428  23DE               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3374                           
  3375                           ; BSR set to: 1
  3376                           ;doprnt.c: 617: f++;
  3377  00042A  4BB6               	infsnz	sprintf@f& (0+255),f,b
  3378  00042C  2BB7               	incf	(sprintf@f+1)& (0+255),f,b
  3379                           
  3380                           ;doprnt.c: 618: } else
  3381  00042E  D0B7               	goto	l2330
  3382  000430                     l2324:
  3383                           
  3384                           ; BSR set to: 1
  3385                           ;doprnt.c: 620: {
  3386                           ;doprnt.c: 621: prec = 0;
  3387                           
  3388                           ; BSR set to: 1
  3389  000430  0E00               	movlw	0
  3390  000432  6FEF               	movwf	(sprintf@prec+1)& (0+255),b
  3391  000434  0E00               	movlw	0
  3392  000436  6FEE               	movwf	sprintf@prec& (0+255),b
  3393                           
  3394                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3395  000438  D020               	goto	l2326
  3396  00043A                     
  3397                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3398                           
  3399                           ; BSR set to: 1
  3400  00043A  C1EE  F06E         	movff	sprintf@prec,___wmul@multiplier
  3401  00043E  C1EF  F06F         	movff	sprintf@prec+1,___wmul@multiplier+1
  3402  000442  0E00               	movlw	0
  3403  000444  0100               	movlb	0	; () banked
  3404  000446  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3405  000448  0E0A               	movlw	10
  3406  00044A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3407  00044C  EC78  F01C         	call	___wmul	;wreg free
  3408  000450  C1B6  FFF6         	movff	sprintf@f,tblptrl
  3409  000454  C1B7  FFF7         	movff	sprintf@f+1,tblptrh
  3410  000458                     	if	0	;tblptru may be non-zero
  3411  000458                     	endif
  3412  000458                     	if	0	;tblptru may be non-zero
  3413  000458                     	endif
  3414  000458  0008               	tblrd		*
  3415  00045A  50F5               	movf	tablat,w,c
  3416  00045C  0100               	movlb	0	; () banked
  3417  00045E  276E               	addwf	?___wmul& (0+255),f,b
  3418  000460  0E00               	movlw	0
  3419  000462  236F               	addwfc	(?___wmul+1)& (0+255),f,b
  3420  000464  0ED0               	movlw	208
  3421  000466  256E               	addwf	?___wmul& (0+255),w,b
  3422  000468  0101               	movlb	1	; () banked
  3423  00046A  6FEE               	movwf	sprintf@prec& (0+255),b
  3424  00046C  0EFF               	movlw	255
  3425  00046E  0100               	movlb	0	; () banked
  3426  000470  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3427  000472  0101               	movlb	1	; () banked
  3428  000474  6FEF               	movwf	(sprintf@prec+1)& (0+255),b
  3429                           
  3430                           ; BSR set to: 1
  3431  000476  4BB6               	infsnz	sprintf@f& (0+255),f,b
  3432  000478  2BB7               	incf	(sprintf@f+1)& (0+255),f,b
  3433  00047A                     l2326:
  3434                           
  3435                           ; BSR set to: 1
  3436                           
  3437                           ; BSR set to: 1
  3438  00047A  C1B6  FFF6         	movff	sprintf@f,tblptrl
  3439  00047E  C1B7  FFF7         	movff	sprintf@f+1,tblptrh
  3440  000482                     	if	0	;tblptru may be non-zero
  3441  000482                     	endif
  3442  000482                     	if	0	;tblptru may be non-zero
  3443  000482                     	endif
  3444  000482  0008               	tblrd		*
  3445  000484  50F5               	movf	tablat,w,c
  3446  000486  ECB3  F01C         	call	_isdigit
  3447  00048A  A0D8               	btfss	status,0,c
  3448  00048C  D088               	goto	l2330
  3449  00048E  D7D5               	goto	l2327
  3450  000490                     l2323:
  3451                           
  3452                           ;doprnt.c: 626: prec = 0;
  3453  000490  0E00               	movlw	0
  3454  000492  0101               	movlb	1	; () banked
  3455  000494  6FEF               	movwf	(sprintf@prec+1)& (0+255),b
  3456  000496  0E00               	movlw	0
  3457  000498  6FEE               	movwf	sprintf@prec& (0+255),b
  3458                           
  3459                           ; BSR set to: 1
  3460                           ;doprnt.c: 628: flag |= 0x1000;
  3461  00049A  89F2               	bsf	(sprintf@flag+1)& (0+255),4,b
  3462                           
  3463                           ; BSR set to: 1
  3464                           ;doprnt.c: 630: }
  3465                           ;doprnt.c: 635: switch(c = *f++) {
  3466  00049C  D080               	goto	l2330
  3467  00049E                     
  3468                           ; BSR set to: 1
  3469                           ;doprnt.c: 663: flag |= 0x400;
  3470                           
  3471                           ; BSR set to: 1
  3472  00049E  85F2               	bsf	(sprintf@flag+1)& (0+255),2,b
  3473                           
  3474                           ;doprnt.c: 664: break;
  3475  0004A0  D0B2               	goto	l2334
  3476  0004A2                     
  3477                           ; BSR set to: 1
  3478                           ;doprnt.c: 670: flag |= 0x20;
  3479                           
  3480                           ; BSR set to: 1
  3481  0004A2  8BF1               	bsf	sprintf@flag& (0+255),5,b
  3482  0004A4                     l2336:
  3483                           
  3484                           ; BSR set to: 1
  3485                           ;doprnt.c: 673: flag |= 0x100;
  3486  0004A4  81F2               	bsf	(sprintf@flag+1)& (0+255),0,b
  3487                           
  3488                           ;doprnt.c: 674: break;
  3489  0004A6  D0AF               	goto	l2334
  3490  0004A8                     
  3491                           ; BSR set to: 1
  3492                           ;doprnt.c: 680: flag |= 0x20;
  3493                           
  3494                           ; BSR set to: 1
  3495  0004A8  8BF1               	bsf	sprintf@flag& (0+255),5,b
  3496  0004AA                     l2338:
  3497                           
  3498                           ; BSR set to: 1
  3499                           ;doprnt.c: 683: flag |= 0x200;
  3500  0004AA  83F2               	bsf	(sprintf@flag+1)& (0+255),1,b
  3501                           
  3502                           ;doprnt.c: 684: break;
  3503  0004AC  D0AC               	goto	l2334
  3504  0004AE                     
  3505                           ; BSR set to: 1
  3506                           ;doprnt.c: 691: flag |= 0x40;
  3507                           
  3508                           ; BSR set to: 1
  3509  0004AE  8DF1               	bsf	sprintf@flag& (0+255),6,b
  3510                           
  3511                           ; BSR set to: 1
  3512                           ;doprnt.c: 698: case 'i':
  3513                           ;doprnt.c: 699: break;
  3514                           
  3515                           ; BSR set to: 1
  3516                           
  3517                           ;doprnt.c: 697: case 'd':
  3518                           
  3519                           ;doprnt.c: 693: break;
  3520  0004B0  D0AA               	goto	l2334
  3521  0004B2                     
  3522                           ; BSR set to: 1
  3523                           ;doprnt.c: 714: flag |= 0x20;
  3524                           
  3525                           ; BSR set to: 1
  3526  0004B2  8BF1               	bsf	sprintf@flag& (0+255),5,b
  3527  0004B4                     l2343:
  3528                           
  3529                           ; BSR set to: 1
  3530                           ;doprnt.c: 721: flag |= 0x80;
  3531  0004B4  8FF1               	bsf	sprintf@flag& (0+255),7,b
  3532                           
  3533                           ;doprnt.c: 723: break;
  3534  0004B6  D0A7               	goto	l2334
  3535  0004B8                     
  3536                           ; BSR set to: 1
  3537                           ;doprnt.c: 753: if(prec && prec < len)
  3538                           
  3539                           ; BSR set to: 1
  3540  0004B8  51EE               	movf	sprintf@prec& (0+255),w,b
  3541  0004BA  11EF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3542  0004BC  B4D8               	btfsc	status,2,c
  3543  0004BE  D00A               	goto	l2345
  3544                           
  3545                           ; BSR set to: 1
  3546  0004C0  51DB               	movf	sprintf@len& (0+255),w,b
  3547  0004C2  5DEE               	subwf	sprintf@prec& (0+255),w,b
  3548  0004C4  51DC               	movf	(sprintf@len+1)& (0+255),w,b
  3549  0004C6  59EF               	subwfb	(sprintf@prec+1)& (0+255),w,b
  3550  0004C8  B0D8               	btfsc	status,0,c
  3551  0004CA  D004               	goto	l2345
  3552                           
  3553                           ; BSR set to: 1
  3554                           ;doprnt.c: 754: len = prec;
  3555  0004CC  C1EE  F1DB         	movff	sprintf@prec,sprintf@len
  3556  0004D0  C1EF  F1DC         	movff	sprintf@prec+1,sprintf@len+1
  3557  0004D4                     l2345:
  3558                           
  3559                           ; BSR set to: 1
  3560                           ;doprnt.c: 757: if(width > len)
  3561                           
  3562                           ; BSR set to: 1
  3563  0004D4  51E5               	movf	sprintf@width& (0+255),w,b
  3564  0004D6  5DDB               	subwf	sprintf@len& (0+255),w,b
  3565  0004D8  51E6               	movf	(sprintf@width+1)& (0+255),w,b
  3566  0004DA  59DC               	subwfb	(sprintf@len+1)& (0+255),w,b
  3567  0004DC  B0D8               	btfsc	status,0,c
  3568  0004DE  D005               	goto	l2346
  3569                           
  3570                           ; BSR set to: 1
  3571                           ;doprnt.c: 758: width -= len;
  3572  0004E0  51DB               	movf	sprintf@len& (0+255),w,b
  3573  0004E2  5FE5               	subwf	sprintf@width& (0+255),f,b
  3574  0004E4  51DC               	movf	(sprintf@len+1)& (0+255),w,b
  3575  0004E6  5BE6               	subwfb	(sprintf@width+1)& (0+255),f,b
  3576  0004E8  D004               	goto	l2347
  3577  0004EA                     l2346:
  3578                           
  3579                           ; BSR set to: 1
  3580                           ;doprnt.c: 759: else
  3581                           ;doprnt.c: 760: width = 0;
  3582                           
  3583                           ; BSR set to: 1
  3584  0004EA  0E00               	movlw	0
  3585  0004EC  6FE6               	movwf	(sprintf@width+1)& (0+255),b
  3586  0004EE  0E00               	movlw	0
  3587  0004F0  6FE5               	movwf	sprintf@width& (0+255),b
  3588  0004F2                     l2347:
  3589                           
  3590                           ; BSR set to: 1
  3591                           ;doprnt.c: 762: if(!(flag & 0x08))
  3592                           
  3593                           ; BSR set to: 1
  3594  0004F2  A7F1               	btfss	sprintf@flag& (0+255),3,b
  3595  0004F4  D009               	goto	l2349
  3596  0004F6  D01F               	goto	l2352
  3597  0004F8                     l19083:
  3598                           
  3599                           ; BSR set to: 1
  3600                           ;doprnt.c: 765: ((*sp++ = (' ')));
  3601  0004F8  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  3602  0004FC  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  3603  000500  0E20               	movlw	32
  3604  000502  6EDF               	movwf	indf2,c
  3605                           
  3606                           ; BSR set to: 1
  3607  000504  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  3608  000506  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  3609  000508                     l2349:
  3610                           
  3611                           ; BSR set to: 1
  3612                           
  3613                           ; BSR set to: 1
  3614  000508  07E5               	decf	sprintf@width& (0+255),f,b
  3615  00050A  A0D8               	btfss	status,0,c
  3616  00050C  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  3617  00050E  29E5               	incf	sprintf@width& (0+255),w,b
  3618  000510  E1F3               	bnz	l19083
  3619  000512  29E6               	incf	(sprintf@width+1)& (0+255),w,b
  3620  000514  B4D8               	btfsc	status,2,c
  3621  000516  D00F               	goto	l2352
  3622  000518  D7EF               	goto	l2350
  3623  00051A                     l19089:
  3624                           
  3625                           ; BSR set to: 1
  3626                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  3627  00051A  C1C4  FFD9         	movff	sprintf@cp,fsr2l
  3628  00051E  C1C5  FFDA         	movff	sprintf@cp+1,fsr2h
  3629  000522  C1B4  FFE1         	movff	sprintf@sp,fsr1l
  3630  000526  C1B5  FFE2         	movff	sprintf@sp+1,fsr1h
  3631  00052A  CFDF FFE7          	movff	indf2,indf1
  3632                           
  3633                           ; BSR set to: 1
  3634  00052E  4BC4               	infsnz	sprintf@cp& (0+255),f,b
  3635  000530  2BC5               	incf	(sprintf@cp+1)& (0+255),f,b
  3636                           
  3637                           ; BSR set to: 1
  3638  000532  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  3639  000534  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  3640  000536                     l2352:
  3641                           
  3642                           ; BSR set to: 1
  3643                           
  3644                           ; BSR set to: 1
  3645  000536  07DB               	decf	sprintf@len& (0+255),f,b
  3646  000538  A0D8               	btfss	status,0,c
  3647  00053A  07DC               	decf	(sprintf@len+1)& (0+255),f,b
  3648  00053C  29DB               	incf	sprintf@len& (0+255),w,b
  3649  00053E  E1ED               	bnz	l19089
  3650  000540  29DC               	incf	(sprintf@len+1)& (0+255),w,b
  3651  000542  A4D8               	btfss	status,2,c
  3652  000544  D7EA               	goto	l2353
  3653                           
  3654                           ; BSR set to: 1
  3655                           ;doprnt.c: 770: if(flag & 0x08)
  3656  000546  B7F1               	btfsc	sprintf@flag& (0+255),3,b
  3657  000548  D00A               	goto	l2356
  3658  00054A  EF3D  F00E         	goto	u24110
  3659  00054E                     l19099:
  3660                           
  3661                           ; BSR set to: 1
  3662                           ;doprnt.c: 772: ((*sp++ = (' ')));
  3663  00054E  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  3664  000552  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  3665  000556  0E20               	movlw	32
  3666  000558  6EDF               	movwf	indf2,c
  3667                           
  3668                           ; BSR set to: 1
  3669  00055A  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  3670  00055C  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  3671  00055E                     l2356:
  3672                           
  3673                           ; BSR set to: 1
  3674                           
  3675                           ; BSR set to: 1
  3676  00055E  07E5               	decf	sprintf@width& (0+255),f,b
  3677  000560  A0D8               	btfss	status,0,c
  3678  000562  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  3679  000564  29E5               	incf	sprintf@width& (0+255),w,b
  3680  000566  E1F3               	bnz	l19099
  3681  000568  29E6               	incf	(sprintf@width+1)& (0+255),w,b
  3682  00056A  B4D8               	btfsc	status,2,c
  3683  00056C  EF3D  F00E         	goto	u24110
  3684  000570  D7EE               	goto	l2357
  3685  000572                     
  3686                           ; BSR set to: 1
  3687                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3688                           
  3689                           ; BSR set to: 1
  3690  000572  C1DD  FFD9         	movff	sprintf@ap,fsr2l
  3691  000576  C1DE  FFDA         	movff	sprintf@ap+1,fsr2h
  3692  00057A  50DF               	movf	indf2,w,c
  3693  00057C  6FF0               	movwf	sprintf@c& (0+255),b
  3694                           
  3695                           ; BSR set to: 1
  3696  00057E  0E02               	movlw	2
  3697  000580  27DD               	addwf	sprintf@ap& (0+255),f,b
  3698  000582  0E00               	movlw	0
  3699  000584  23DE               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3700  000586                     
  3701                           ; BSR set to: 1
  3702                           ;doprnt.c: 805: cp = (char *)&c;
  3703                           
  3704                           ; BSR set to: 1
  3705  000586  0EF0               	movlw	low sprintf@c
  3706  000588  6FC4               	movwf	sprintf@cp& (0+255),b
  3707  00058A  0E01               	movlw	high sprintf@c
  3708  00058C  6FC5               	movwf	(sprintf@cp+1)& (0+255),b
  3709                           
  3710                           ; BSR set to: 1
  3711                           ;doprnt.c: 806: len = 1;
  3712  00058E  0E00               	movlw	0
  3713  000590  6FDC               	movwf	(sprintf@len+1)& (0+255),b
  3714  000592  0E01               	movlw	1
  3715  000594  6FDB               	movwf	sprintf@len& (0+255),b
  3716                           
  3717                           ;doprnt.c: 807: goto dostring;
  3718  000596  D790               	goto	l2344
  3719  000598                     
  3720                           ; BSR set to: 1
  3721                           ;doprnt.c: 818: flag |= 0xC0;
  3722                           
  3723                           ; BSR set to: 1
  3724  000598  0EC0               	movlw	192
  3725  00059A  13F1               	iorwf	sprintf@flag& (0+255),f,b
  3726                           
  3727                           ; BSR set to: 1
  3728                           ;doprnt.c: 822: }
  3729                           
  3730                           ;doprnt.c: 819: break;
  3731  00059C  D034               	goto	l2334
  3732  00059E                     l2330:
  3733                           
  3734                           ; BSR set to: 1
  3735  00059E  C1B6  FFF6         	movff	sprintf@f,tblptrl
  3736  0005A2  C1B7  FFF7         	movff	sprintf@f+1,tblptrh
  3737  0005A6  0101               	movlb	1	; () banked
  3738  0005A8  4BB6               	infsnz	sprintf@f& (0+255),f,b
  3739  0005AA  2BB7               	incf	(sprintf@f+1)& (0+255),f,b
  3740  0005AC                     	if	0	;tblptru may be non-zero
  3741  0005AC                     	endif
  3742  0005AC                     	if	0	;tblptru may be non-zero
  3743  0005AC                     	endif
  3744  0005AC  0008               	tblrd		*
  3745  0005AE  CFF5 F1F0          	movff	tablat,sprintf@c
  3746  0005B2  51F0               	movf	sprintf@c& (0+255),w,b
  3747                           
  3748                           ; Switch size 1, requested type "space"
  3749                           ; Number of cases is 13, Range of values is 0 to 120
  3750                           ; switch strategies available:
  3751                           ; Name         Instructions Cycles
  3752                           ; simple_byte           40    21 (average)
  3753                           ;	Chosen strategy is simple_byte
  3754  0005B4  0A00               	xorlw	0	; case 0
  3755  0005B6  B4D8               	btfsc	status,2,c
  3756  0005B8  EF4A  F00E         	goto	u24120
  3757  0005BC  0A45               	xorlw	69	; case 69
  3758  0005BE  B4D8               	btfsc	status,2,c
  3759  0005C0  D770               	goto	l2335
  3760  0005C2  0A02               	xorlw	2	; case 71
  3761  0005C4  B4D8               	btfsc	status,2,c
  3762  0005C6  D770               	goto	l2337
  3763  0005C8  0A1F               	xorlw	31	; case 88
  3764  0005CA  B4D8               	btfsc	status,2,c
  3765  0005CC  D772               	goto	l2342
  3766  0005CE  0A3B               	xorlw	59	; case 99
  3767  0005D0  B4D8               	btfsc	status,2,c
  3768  0005D2  D7CF               	goto	l2359
  3769  0005D4  0A07               	xorlw	7	; case 100
  3770  0005D6  B4D8               	btfsc	status,2,c
  3771  0005D8  D016               	goto	l2334
  3772  0005DA  0A01               	xorlw	1	; case 101
  3773  0005DC  B4D8               	btfsc	status,2,c
  3774  0005DE  D762               	goto	l2336
  3775  0005E0  0A03               	xorlw	3	; case 102
  3776  0005E2  B4D8               	btfsc	status,2,c
  3777  0005E4  D75C               	goto	l2333
  3778  0005E6  0A01               	xorlw	1	; case 103
  3779  0005E8  B4D8               	btfsc	status,2,c
  3780  0005EA  D75F               	goto	l2338
  3781  0005EC  0A0E               	xorlw	14	; case 105
  3782  0005EE  B4D8               	btfsc	status,2,c
  3783  0005F0  D00A               	goto	l2334
  3784  0005F2  0A06               	xorlw	6	; case 111
  3785  0005F4  B4D8               	btfsc	status,2,c
  3786  0005F6  D75B               	goto	l2339
  3787  0005F8  0A1A               	xorlw	26	; case 117
  3788  0005FA  B4D8               	btfsc	status,2,c
  3789  0005FC  D7CD               	goto	l2361
  3790  0005FE  0A0D               	xorlw	13	; case 120
  3791  000600  B4D8               	btfsc	status,2,c
  3792  000602  D758               	goto	l2343
  3793  000604  D7C0               	goto	l2360
  3794  000606                     l2334:
  3795                           
  3796                           ; BSR set to: 1
  3797                           ;doprnt.c: 825: if(flag & (0x700)) {
  3798                           
  3799                           ; BSR set to: 1
  3800  000606  0E07               	movlw	7
  3801  000608  15F2               	andwf	(sprintf@flag+1)& (0+255),w,b
  3802  00060A  B4D8               	btfsc	status,2,c
  3803  00060C  EF10  F00B         	goto	l2362
  3804                           
  3805                           ; BSR set to: 1
  3806                           ;doprnt.c: 827: if(flag & 0x1000)
  3807  000610  A9F2               	btfss	(sprintf@flag+1)& (0+255),4,b
  3808  000612  D004               	goto	l2363
  3809                           
  3810                           ; BSR set to: 1
  3811                           ;doprnt.c: 829: prec = 6;
  3812  000614  0E00               	movlw	0
  3813  000616  6FEF               	movwf	(sprintf@prec+1)& (0+255),b
  3814  000618  0E06               	movlw	6
  3815  00061A  6FEE               	movwf	sprintf@prec& (0+255),b
  3816  00061C                     l2363:
  3817                           
  3818                           ; BSR set to: 1
  3819                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3820                           
  3821                           ; BSR set to: 1
  3822  00061C  C1DD  FFD9         	movff	sprintf@ap,fsr2l
  3823  000620  C1DE  FFDA         	movff	sprintf@ap+1,fsr2h
  3824  000624  CFDE F1EB          	movff	postinc2,sprintf@fval
  3825  000628  CFDE F1EC          	movff	postinc2,sprintf@fval+1
  3826  00062C  CFDD F1ED          	movff	postdec2,sprintf@fval+2
  3827                           
  3828                           ; BSR set to: 1
  3829  000630  0E03               	movlw	3
  3830  000632  27DD               	addwf	sprintf@ap& (0+255),f,b
  3831  000634  0E00               	movlw	0
  3832  000636  23DE               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3833                           
  3834                           ; BSR set to: 1
  3835                           ;doprnt.c: 831: if(fval < 0.0) {
  3836  000638  AFED               	btfss	(sprintf@fval+2)& (0+255),7,b
  3837  00063A  D011               	goto	l2364
  3838                           
  3839                           ; BSR set to: 1
  3840                           ;doprnt.c: 832: fval = -fval;
  3841  00063C  C1EB  F09A         	movff	sprintf@fval,___ftneg@f1
  3842  000640  C1EC  F09B         	movff	sprintf@fval+1,___ftneg@f1+1
  3843  000644  C1ED  F09C         	movff	sprintf@fval+2,___ftneg@f1+2
  3844  000648  ECA0  F01C         	call	___ftneg	;wreg free
  3845  00064C  C09A  F1EB         	movff	?___ftneg,sprintf@fval
  3846  000650  C09B  F1EC         	movff	?___ftneg+1,sprintf@fval+1
  3847  000654  C09C  F1ED         	movff	?___ftneg+2,sprintf@fval+2
  3848                           
  3849                           ;doprnt.c: 833: flag |= 0x03;
  3850  000658  0E03               	movlw	3
  3851  00065A  0101               	movlb	1	; () banked
  3852  00065C  13F1               	iorwf	sprintf@flag& (0+255),f,b
  3853  00065E                     l2364:
  3854                           
  3855                           ; BSR set to: 1
  3856                           ;doprnt.c: 834: }
  3857                           ;doprnt.c: 835: exp = 0;
  3858                           
  3859                           ; BSR set to: 1
  3860  00065E  0E00               	movlw	0
  3861  000660  6FE4               	movwf	(sprintf@exp+1)& (0+255),b
  3862  000662  0E00               	movlw	0
  3863  000664  6FE3               	movwf	sprintf@exp& (0+255),b
  3864                           
  3865                           ; BSR set to: 1
  3866                           ;doprnt.c: 836: if( fval!=0) {
  3867  000666  51EB               	movf	sprintf@fval& (0+255),w,b
  3868  000668  11EC               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3869  00066A  11ED               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3870  00066C  B4D8               	btfsc	status,2,c
  3871  00066E  D090               	goto	l2369
  3872                           
  3873                           ; BSR set to: 1
  3874                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3875  000670  0E82               	movlw	130
  3876  000672  0100               	movlb	0	; () banked
  3877  000674  6FF6               	movwf	??_sprintf& (0+255),b
  3878  000676  0EFF               	movlw	255
  3879  000678  6FF7               	movwf	(??_sprintf+1)& (0+255),b
  3880  00067A  C1EB  F0F8         	movff	sprintf@fval,??_sprintf+2
  3881  00067E  C1EC  F0F9         	movff	sprintf@fval+1,??_sprintf+3
  3882  000682  C1ED  F0FA         	movff	sprintf@fval+2,??_sprintf+4
  3883  000686  C1EE  F0FB         	movff	sprintf@fval+3,??_sprintf+5
  3884  00068A  0E10               	movlw	16
  3885  00068C  D005               	goto	u22800
  3886  00068E                     u22805:
  3887  00068E  90D8               	bcf	status,0,c
  3888  000690  33FB               	rrcf	(??_sprintf+5)& (0+255),f,b
  3889  000692  33FA               	rrcf	(??_sprintf+4)& (0+255),f,b
  3890  000694  33F9               	rrcf	(??_sprintf+3)& (0+255),f,b
  3891  000696  33F8               	rrcf	(??_sprintf+2)& (0+255),f,b
  3892  000698                     u22800:
  3893  000698  2EE8               	decfsz	wreg,f,c
  3894  00069A  D7F9               	goto	u22805
  3895  00069C  51F8               	movf	(??_sprintf+2)& (0+255),w,b
  3896  00069E  25F6               	addwf	??_sprintf& (0+255),w,b
  3897  0006A0  0101               	movlb	1	; () banked
  3898  0006A2  6FE3               	movwf	sprintf@exp& (0+255),b
  3899  0006A4  0E00               	movlw	0
  3900  0006A6  0100               	movlb	0	; () banked
  3901  0006A8  21F7               	addwfc	(??_sprintf+1)& (0+255),w,b
  3902  0006AA  0101               	movlb	1	; () banked
  3903  0006AC  6FE4               	movwf	(sprintf@exp+1)& (0+255),b
  3904                           
  3905                           ; BSR set to: 1
  3906                           ;doprnt.c: 838: exp--;
  3907  0006AE  07E3               	decf	sprintf@exp& (0+255),f,b
  3908  0006B0  A0D8               	btfss	status,0,c
  3909  0006B2  07E4               	decf	(sprintf@exp+1)& (0+255),f,b
  3910                           
  3911                           ; BSR set to: 1
  3912                           ;doprnt.c: 839: exp *= 3;
  3913  0006B4  C1E3  F06E         	movff	sprintf@exp,___wmul@multiplier
  3914  0006B8  C1E4  F06F         	movff	sprintf@exp+1,___wmul@multiplier+1
  3915  0006BC  0E00               	movlw	0
  3916  0006BE  0100               	movlb	0	; () banked
  3917  0006C0  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3918  0006C2  0E03               	movlw	3
  3919  0006C4  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3920  0006C6  EC78  F01C         	call	___wmul	;wreg free
  3921  0006CA  C06E  F1E3         	movff	?___wmul,sprintf@exp
  3922  0006CE  C06F  F1E4         	movff	?___wmul+1,sprintf@exp+1
  3923                           
  3924                           ;doprnt.c: 840: exp /= 10;
  3925  0006D2  C1E3  F066         	movff	sprintf@exp,___awdiv@dividend
  3926  0006D6  C1E4  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  3927  0006DA  0E00               	movlw	0
  3928  0006DC  0100               	movlb	0	; () banked
  3929  0006DE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3930  0006E0  0E0A               	movlw	10
  3931  0006E2  6F68               	movwf	___awdiv@divisor& (0+255),b
  3932  0006E4  EC2A  F019         	call	___awdiv	;wreg free
  3933  0006E8  C066  F1E3         	movff	?___awdiv,sprintf@exp
  3934  0006EC  C067  F1E4         	movff	?___awdiv+1,sprintf@exp+1
  3935                           
  3936                           ;doprnt.c: 841: if(exp < 0)
  3937  0006F0  0101               	movlb	1	; () banked
  3938  0006F2  AFE4               	btfss	(sprintf@exp+1)& (0+255),7,b
  3939  0006F4  D003               	goto	l2366
  3940                           
  3941                           ; BSR set to: 1
  3942                           ;doprnt.c: 842: exp--;
  3943  0006F6  07E3               	decf	sprintf@exp& (0+255),f,b
  3944  0006F8  A0D8               	btfss	status,0,c
  3945  0006FA  07E4               	decf	(sprintf@exp+1)& (0+255),f,b
  3946  0006FC                     l2366:
  3947                           
  3948                           ; BSR set to: 1
  3949                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3950                           
  3951                           ; BSR set to: 1
  3952  0006FC  51E3               	movf	sprintf@exp& (0+255),w,b
  3953  0006FE  0800               	sublw	0
  3954  000700  EC51  F00E         	call	_scale
  3955  000704  C0AC  F1DF         	movff	?_scale,sprintf@tmpval
  3956  000708  C0AD  F1E0         	movff	?_scale+1,sprintf@tmpval+1
  3957  00070C  C0AE  F1E1         	movff	?_scale+2,sprintf@tmpval+2
  3958                           
  3959                           ;doprnt.c: 847: tmpval.integ *= fval;
  3960  000710  C1DF  F09D         	movff	sprintf@tmpval,___ftmul@f1
  3961  000714  C1E0  F09E         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3962  000718  C1E1  F09F         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3963  00071C  C1EB  F0A0         	movff	sprintf@fval,___ftmul@f2
  3964  000720  C1EC  F0A1         	movff	sprintf@fval+1,___ftmul@f2+1
  3965  000724  C1ED  F0A2         	movff	sprintf@fval+2,___ftmul@f2+2
  3966  000728  ECB7  F015         	call	___ftmul	;wreg free
  3967  00072C  C09D  F1DF         	movff	?___ftmul,sprintf@tmpval
  3968  000730  C09E  F1E0         	movff	?___ftmul+1,sprintf@tmpval+1
  3969  000734  C09F  F1E1         	movff	?___ftmul+2,sprintf@tmpval+2
  3970                           
  3971                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3972  000738  C1DF  F0C2         	movff	sprintf@tmpval,___ftge@ff1
  3973  00073C  C1E0  F0C3         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3974  000740  C1E1  F0C4         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3975  000744  0E00               	movlw	0
  3976  000746  0100               	movlb	0	; () banked
  3977  000748  6FC5               	movwf	___ftge@ff2& (0+255),b
  3978  00074A  0E80               	movlw	128
  3979  00074C  6FC6               	movwf	(___ftge@ff2+1)& (0+255),b
  3980  00074E  0E3F               	movlw	63
  3981  000750  6FC7               	movwf	(___ftge@ff2+2)& (0+255),b
  3982  000752  EC98  F018         	call	___ftge	;wreg free
  3983  000756  0100               	movlb	0	; () banked
  3984  000758  B0D8               	btfsc	status,0,c
  3985  00075A  D005               	goto	l2367
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;doprnt.c: 849: exp--;
  3989  00075C  0101               	movlb	1	; () banked
  3990  00075E  07E3               	decf	sprintf@exp& (0+255),f,b
  3991  000760  A0D8               	btfss	status,0,c
  3992  000762  07E4               	decf	(sprintf@exp+1)& (0+255),f,b
  3993  000764  D015               	goto	l2369
  3994  000766                     l2367:
  3995                           
  3996                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3997                           
  3998                           ; BSR set to: 1
  3999  000766  C1DF  F0C2         	movff	sprintf@tmpval,___ftge@ff1
  4000  00076A  C1E0  F0C3         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4001  00076E  C1E1  F0C4         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4002  000772  0E00               	movlw	0
  4003  000774  0100               	movlb	0	; () banked
  4004  000776  6FC5               	movwf	___ftge@ff2& (0+255),b
  4005  000778  0E20               	movlw	32
  4006  00077A  6FC6               	movwf	(___ftge@ff2+1)& (0+255),b
  4007  00077C  0E41               	movlw	65
  4008  00077E  6FC7               	movwf	(___ftge@ff2+2)& (0+255),b
  4009  000780  EC98  F018         	call	___ftge	;wreg free
  4010  000784  0100               	movlb	0	; () banked
  4011  000786  A0D8               	btfss	status,0,c
  4012  000788  D003               	goto	l2369
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;doprnt.c: 851: exp++;
  4016  00078A  0101               	movlb	1	; () banked
  4017  00078C  4BE3               	infsnz	sprintf@exp& (0+255),f,b
  4018  00078E  2BE4               	incf	(sprintf@exp+1)& (0+255),f,b
  4019  000790                     l2369:
  4020                           
  4021                           ;doprnt.c: 852: }
  4022                           ;doprnt.c: 854: if(exp <= 0)
  4023                           
  4024                           ; BSR set to: 1
  4025                           
  4026                           ; BSR set to: 1
  4027                           
  4028                           ; BSR set to: 1
  4029  000790  0101               	movlb	1	; () banked
  4030  000792  BFE4               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4031  000794  D005               	goto	u22840
  4032  000796  51E4               	movf	(sprintf@exp+1)& (0+255),w,b
  4033  000798  E106               	bnz	l2370
  4034  00079A  05E3               	decf	sprintf@exp& (0+255),w,b
  4035  00079C  B0D8               	btfsc	status,0,c
  4036  00079E  D003               	goto	l2370
  4037  0007A0                     u22840:
  4038                           
  4039                           ; BSR set to: 1
  4040                           ;doprnt.c: 855: c = 1;
  4041  0007A0  0E01               	movlw	1
  4042  0007A2  6FF0               	movwf	sprintf@c& (0+255),b
  4043  0007A4  D002               	goto	l2371
  4044  0007A6                     l2370:
  4045                           
  4046                           ; BSR set to: 1
  4047                           ;doprnt.c: 856: else
  4048                           ;doprnt.c: 857: c = exp;
  4049  0007A6  C1E3  F1F0         	movff	sprintf@exp,sprintf@c
  4050  0007AA                     l2371:
  4051                           
  4052                           ; BSR set to: 1
  4053                           ;doprnt.c: 858: if(
  4054                           ;doprnt.c: 860: flag & 0x100
  4055                           ;doprnt.c: 862: ||
  4056                           ;doprnt.c: 866: flag & 0x200 && (exp < -4 || exp >= (int)prec)
  4057                           ;doprnt.c: 868: ) {
  4058  0007AA  B1F2               	btfsc	(sprintf@flag+1)& (0+255),0,b
  4059  0007AC  D017               	goto	u22880
  4060                           
  4061                           ; BSR set to: 1
  4062  0007AE  A3F2               	btfss	(sprintf@flag+1)& (0+255),1,b
  4063  0007B0  D384               	goto	l2372
  4064                           
  4065                           ; BSR set to: 1
  4066  0007B2  AFE4               	btfss	(sprintf@exp+1)& (0+255),7,b
  4067  0007B4  D006               	goto	u22870
  4068  0007B6  0EFC               	movlw	252
  4069  0007B8  5DE3               	subwf	sprintf@exp& (0+255),w,b
  4070  0007BA  0EFF               	movlw	255
  4071  0007BC  59E4               	subwfb	(sprintf@exp+1)& (0+255),w,b
  4072  0007BE  A0D8               	btfss	status,0,c
  4073  0007C0  D00D               	goto	u22880
  4074  0007C2                     u22870:
  4075                           
  4076                           ; BSR set to: 1
  4077  0007C2  51EE               	movf	sprintf@prec& (0+255),w,b
  4078  0007C4  5DE3               	subwf	sprintf@exp& (0+255),w,b
  4079  0007C6  51E4               	movf	(sprintf@exp+1)& (0+255),w,b
  4080  0007C8  0A80               	xorlw	128
  4081  0007CA  0100               	movlb	0	; () banked
  4082  0007CC  6FF6               	movwf	??_sprintf& (0+255),b
  4083  0007CE  0101               	movlb	1	; () banked
  4084  0007D0  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  4085  0007D2  0A80               	xorlw	128
  4086  0007D4  0100               	movlb	0	; () banked
  4087  0007D6  59F6               	subwfb	??_sprintf& (0+255),w,b
  4088  0007D8  A0D8               	btfss	status,0,c
  4089  0007DA  D36F               	goto	l2372
  4090  0007DC                     u22880:
  4091                           
  4092                           ;doprnt.c: 870: if(prec && flag & 0x200)
  4093                           
  4094                           ; BSR set to: 0
  4095                           
  4096                           ; BSR set to: 0
  4097  0007DC  0101               	movlb	1	; () banked
  4098  0007DE  51EE               	movf	sprintf@prec& (0+255),w,b
  4099  0007E0  11EF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4100  0007E2  A4D8               	btfss	status,2,c
  4101                           
  4102                           ; BSR set to: 1
  4103  0007E4  A3F2               	btfss	(sprintf@flag+1)& (0+255),1,b
  4104  0007E6  D003               	goto	l2377
  4105                           
  4106                           ; BSR set to: 1
  4107                           ;doprnt.c: 871: prec--;
  4108  0007E8  07EE               	decf	sprintf@prec& (0+255),f,b
  4109  0007EA  A0D8               	btfss	status,0,c
  4110  0007EC  07EF               	decf	(sprintf@prec+1)& (0+255),f,b
  4111  0007EE                     l2377:
  4112                           
  4113                           ; BSR set to: 1
  4114                           ;doprnt.c: 873: if((unsigned)prec > (sizeof dpowers/sizeof dpowers[0]) - 2)
  4115                           
  4116                           ; BSR set to: 1
  4117  0007EE  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  4118  0007F0  E104               	bnz	u22910
  4119  0007F2  0E09               	movlw	9
  4120  0007F4  5DEE               	subwf	sprintf@prec& (0+255),w,b
  4121  0007F6  A0D8               	btfss	status,0,c
  4122  0007F8  D003               	goto	l2378
  4123  0007FA                     u22910:
  4124                           
  4125                           ; BSR set to: 1
  4126                           ;doprnt.c: 874: c = (sizeof dpowers/sizeof dpowers[0]) - 2;
  4127  0007FA  0E08               	movlw	8
  4128  0007FC  6FF0               	movwf	sprintf@c& (0+255),b
  4129  0007FE  D002               	goto	l2379
  4130  000800                     l2378:
  4131                           
  4132                           ; BSR set to: 1
  4133                           ;doprnt.c: 875: else
  4134                           ;doprnt.c: 876: c = prec;
  4135  000800  C1EE  F1F0         	movff	sprintf@prec,sprintf@c
  4136  000804                     l2379:
  4137                           
  4138                           ; BSR set to: 1
  4139                           ;doprnt.c: 877: if( fval!=0) {
  4140                           
  4141                           ; BSR set to: 1
  4142  000804  51EB               	movf	sprintf@fval& (0+255),w,b
  4143  000806  11EC               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4144  000808  11ED               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4145  00080A  B4D8               	btfsc	status,2,c
  4146  00080C  D0E4               	goto	l2384
  4147                           
  4148                           ; BSR set to: 1
  4149                           ;doprnt.c: 878: fval /= scale(exp-c);
  4150  00080E  C1EB  F0B3         	movff	sprintf@fval,___ftdiv@f1
  4151  000812  C1EC  F0B4         	movff	sprintf@fval+1,___ftdiv@f1+1
  4152  000816  C1ED  F0B5         	movff	sprintf@fval+2,___ftdiv@f1+2
  4153  00081A  51F0               	movf	sprintf@c& (0+255),w,b
  4154  00081C  0800               	sublw	0
  4155  00081E  25E3               	addwf	sprintf@exp& (0+255),w,b
  4156  000820  EC51  F00E         	call	_scale
  4157  000824  C0AC  F0B6         	movff	?_scale,___ftdiv@f2
  4158  000828  C0AD  F0B7         	movff	?_scale+1,___ftdiv@f2+1
  4159  00082C  C0AE  F0B8         	movff	?_scale+2,___ftdiv@f2+2
  4160  000830  EC32  F016         	call	___ftdiv	;wreg free
  4161  000834  C0B3  F1EB         	movff	?___ftdiv,sprintf@fval
  4162  000838  C0B4  F1EC         	movff	?___ftdiv+1,sprintf@fval+1
  4163  00083C  C0B5  F1ED         	movff	?___ftdiv+2,sprintf@fval+2
  4164                           
  4165                           ;doprnt.c: 893: if(fval - (double)(unsigned long)fval >= 0.5)
  4166  000840  C1EB  F0B9         	movff	sprintf@fval,___ftadd@f2
  4167  000844  C1EC  F0BA         	movff	sprintf@fval+1,___ftadd@f2+1
  4168  000848  C1ED  F0BB         	movff	sprintf@fval+2,___ftadd@f2+2
  4169  00084C  C1EB  F082         	movff	sprintf@fval,___fttol@f1
  4170  000850  C1EC  F083         	movff	sprintf@fval+1,___fttol@f1+1
  4171  000854  C1ED  F084         	movff	sprintf@fval+2,___fttol@f1+2
  4172  000858  EC3B  F015         	call	___fttol	;wreg free
  4173  00085C  C082  F091         	movff	?___fttol,___lltoft@c
  4174  000860  C083  F092         	movff	?___fttol+1,___lltoft@c+1
  4175  000864  C084  F093         	movff	?___fttol+2,___lltoft@c+2
  4176  000868  C085  F094         	movff	?___fttol+3,___lltoft@c+3
  4177  00086C  EC05  F01B         	call	___lltoft	;wreg free
  4178  000870  C091  F09A         	movff	?___lltoft,___ftneg@f1
  4179  000874  C092  F09B         	movff	?___lltoft+1,___ftneg@f1+1
  4180  000878  C093  F09C         	movff	?___lltoft+2,___ftneg@f1+2
  4181  00087C  ECA0  F01C         	call	___ftneg	;wreg free
  4182  000880  C09A  F0B6         	movff	?___ftneg,___ftadd@f1
  4183  000884  C09B  F0B7         	movff	?___ftneg+1,___ftadd@f1+1
  4184  000888  C09C  F0B8         	movff	?___ftneg+2,___ftadd@f1+2
  4185  00088C  ECB5  F012         	call	___ftadd	;wreg free
  4186  000890  C0B6  F0C2         	movff	?___ftadd,___ftge@ff1
  4187  000894  C0B7  F0C3         	movff	?___ftadd+1,___ftge@ff1+1
  4188  000898  C0B8  F0C4         	movff	?___ftadd+2,___ftge@ff1+2
  4189  00089C  0E00               	movlw	0
  4190  00089E  0100               	movlb	0	; () banked
  4191  0008A0  6FC5               	movwf	___ftge@ff2& (0+255),b
  4192  0008A2  0E00               	movlw	0
  4193  0008A4  6FC6               	movwf	(___ftge@ff2+1)& (0+255),b
  4194  0008A6  0E3F               	movlw	63
  4195  0008A8  6FC7               	movwf	(___ftge@ff2+2)& (0+255),b
  4196  0008AA  EC98  F018         	call	___ftge	;wreg free
  4197  0008AE  0100               	movlb	0	; () banked
  4198  0008B0  A0D8               	btfss	status,0,c
  4199  0008B2  D014               	goto	l2381
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;doprnt.c: 894: fval += 0.5;
  4203  0008B4  C1EB  F0B6         	movff	sprintf@fval,___ftadd@f1
  4204  0008B8  C1EC  F0B7         	movff	sprintf@fval+1,___ftadd@f1+1
  4205  0008BC  C1ED  F0B8         	movff	sprintf@fval+2,___ftadd@f1+2
  4206  0008C0  0E00               	movlw	0
  4207  0008C2  6FB9               	movwf	___ftadd@f2& (0+255),b
  4208  0008C4  0E00               	movlw	0
  4209  0008C6  6FBA               	movwf	(___ftadd@f2+1)& (0+255),b
  4210  0008C8  0E3F               	movlw	63
  4211  0008CA  6FBB               	movwf	(___ftadd@f2+2)& (0+255),b
  4212  0008CC  ECB5  F012         	call	___ftadd	;wreg free
  4213  0008D0  C0B6  F1EB         	movff	?___ftadd,sprintf@fval
  4214  0008D4  C0B7  F1EC         	movff	?___ftadd+1,sprintf@fval+1
  4215  0008D8  C0B8  F1ED         	movff	?___ftadd+2,sprintf@fval+2
  4216  0008DC                     l2381:
  4217                           
  4218                           ;doprnt.c: 895: if((unsigned long)fval >= dpowers[c+1]) {
  4219  0008DC  C1F0  F0F6         	movff	sprintf@c,??_sprintf
  4220  0008E0  0100               	movlb	0	; () banked
  4221  0008E2  6BF7               	clrf	(??_sprintf+1)& (0+255),b
  4222  0008E4  BFF6               	btfsc	??_sprintf& (0+255),7,b
  4223  0008E6  07F7               	decf	(??_sprintf+1)& (0+255),f,b
  4224  0008E8  90D8               	bcf	status,0,c
  4225  0008EA  37F6               	rlcf	??_sprintf& (0+255),f,b
  4226  0008EC  37F7               	rlcf	(??_sprintf+1)& (0+255),f,b
  4227  0008EE  90D8               	bcf	status,0,c
  4228  0008F0  37F6               	rlcf	??_sprintf& (0+255),f,b
  4229  0008F2  37F7               	rlcf	(??_sprintf+1)& (0+255),f,b
  4230  0008F4  0E04               	movlw	4
  4231  0008F6  27F6               	addwf	??_sprintf& (0+255),f,b
  4232  0008F8  0E00               	movlw	0
  4233  0008FA  23F7               	addwfc	(??_sprintf+1)& (0+255),f,b
  4234  0008FC  0E6F               	movlw	low _dpowers
  4235  0008FE  25F6               	addwf	??_sprintf& (0+255),w,b
  4236  000900  6EF6               	movwf	tblptrl,c
  4237  000902  0EFB               	movlw	high _dpowers
  4238  000904  21F7               	addwfc	(??_sprintf+1)& (0+255),w,b
  4239  000906  6EF7               	movwf	tblptrh,c
  4240  000908                     	if	0	;There are less than 3 active tblptr bytes
  4241  000908                     	endif
  4242  000908  C1EB  F082         	movff	sprintf@fval,___fttol@f1
  4243  00090C  C1EC  F083         	movff	sprintf@fval+1,___fttol@f1+1
  4244  000910  C1ED  F084         	movff	sprintf@fval+2,___fttol@f1+2
  4245  000914  EC3B  F015         	call	___fttol	;wreg free
  4246  000918  0009               	tblrd		*+
  4247  00091A  50F5               	movf	tablat,w,c
  4248  00091C  0100               	movlb	0	; () banked
  4249  00091E  5D82               	subwf	?___fttol& (0+255),w,b
  4250  000920  0009               	tblrd		*+
  4251  000922  50F5               	movf	tablat,w,c
  4252  000924  5983               	subwfb	(?___fttol+1)& (0+255),w,b
  4253  000926  0009               	tblrd		*+
  4254  000928  50F5               	movf	tablat,w,c
  4255  00092A  5984               	subwfb	(?___fttol+2)& (0+255),w,b
  4256  00092C  0009               	tblrd		*+
  4257  00092E  50F5               	movf	tablat,w,c
  4258  000930  5985               	subwfb	(?___fttol+3)& (0+255),w,b
  4259  000932  A0D8               	btfss	status,0,c
  4260  000934  D018               	goto	l2382
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;doprnt.c: 896: fval *= 1e-1;
  4264  000936  C1EB  F09D         	movff	sprintf@fval,___ftmul@f1
  4265  00093A  C1EC  F09E         	movff	sprintf@fval+1,___ftmul@f1+1
  4266  00093E  C1ED  F09F         	movff	sprintf@fval+2,___ftmul@f1+2
  4267  000942  0ECD               	movlw	205
  4268  000944  6FA0               	movwf	___ftmul@f2& (0+255),b
  4269  000946  0ECC               	movlw	204
  4270  000948  6FA1               	movwf	(___ftmul@f2+1)& (0+255),b
  4271  00094A  0E3D               	movlw	61
  4272  00094C  6FA2               	movwf	(___ftmul@f2+2)& (0+255),b
  4273  00094E  ECB7  F015         	call	___ftmul	;wreg free
  4274  000952  C09D  F1EB         	movff	?___ftmul,sprintf@fval
  4275  000956  C09E  F1EC         	movff	?___ftmul+1,sprintf@fval+1
  4276  00095A  C09F  F1ED         	movff	?___ftmul+2,sprintf@fval+2
  4277                           
  4278                           ;doprnt.c: 897: exp++;
  4279  00095E  0101               	movlb	1	; () banked
  4280  000960  4BE3               	infsnz	sprintf@exp& (0+255),f,b
  4281  000962  2BE4               	incf	(sprintf@exp+1)& (0+255),f,b
  4282                           
  4283                           ;doprnt.c: 898: } else if((unsigned long)fval < dpowers[c]) {
  4284  000964  D038               	goto	l2384
  4285  000966                     l2382:
  4286                           
  4287                           ; BSR set to: 1
  4288  000966  0101               	movlb	1	; () banked
  4289  000968  51F0               	movf	sprintf@c& (0+255),w,b
  4290  00096A  0D04               	mullw	4
  4291  00096C  0E6F               	movlw	low _dpowers
  4292  00096E  24F3               	addwf	prodl,w,c
  4293  000970  6EF6               	movwf	tblptrl,c
  4294  000972  0EFB               	movlw	high _dpowers
  4295  000974  20F4               	addwfc	prodh,w,c
  4296  000976  6EF7               	movwf	tblptrh,c
  4297  000978                     	if	0	;There are less than 3 active tblptr bytes
  4298  000978                     	endif
  4299  000978  C1EB  F082         	movff	sprintf@fval,___fttol@f1
  4300  00097C  C1EC  F083         	movff	sprintf@fval+1,___fttol@f1+1
  4301  000980  C1ED  F084         	movff	sprintf@fval+2,___fttol@f1+2
  4302  000984  EC3B  F015         	call	___fttol	;wreg free
  4303  000988  0009               	tblrd		*+
  4304  00098A  50F5               	movf	tablat,w,c
  4305  00098C  0100               	movlb	0	; () banked
  4306  00098E  5D82               	subwf	?___fttol& (0+255),w,b
  4307  000990  0009               	tblrd		*+
  4308  000992  50F5               	movf	tablat,w,c
  4309  000994  5983               	subwfb	(?___fttol+1)& (0+255),w,b
  4310  000996  0009               	tblrd		*+
  4311  000998  50F5               	movf	tablat,w,c
  4312  00099A  5984               	subwfb	(?___fttol+2)& (0+255),w,b
  4313  00099C  0009               	tblrd		*+
  4314  00099E  50F5               	movf	tablat,w,c
  4315  0009A0  5985               	subwfb	(?___fttol+3)& (0+255),w,b
  4316  0009A2  B0D8               	btfsc	status,0,c
  4317  0009A4  D018               	goto	l2384
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;doprnt.c: 899: fval *= 10.0;
  4321  0009A6  C1EB  F09D         	movff	sprintf@fval,___ftmul@f1
  4322  0009AA  C1EC  F09E         	movff	sprintf@fval+1,___ftmul@f1+1
  4323  0009AE  C1ED  F09F         	movff	sprintf@fval+2,___ftmul@f1+2
  4324  0009B2  0E00               	movlw	0
  4325  0009B4  6FA0               	movwf	___ftmul@f2& (0+255),b
  4326  0009B6  0E20               	movlw	32
  4327  0009B8  6FA1               	movwf	(___ftmul@f2+1)& (0+255),b
  4328  0009BA  0E41               	movlw	65
  4329  0009BC  6FA2               	movwf	(___ftmul@f2+2)& (0+255),b
  4330  0009BE  ECB7  F015         	call	___ftmul	;wreg free
  4331  0009C2  C09D  F1EB         	movff	?___ftmul,sprintf@fval
  4332  0009C6  C09E  F1EC         	movff	?___ftmul+1,sprintf@fval+1
  4333  0009CA  C09F  F1ED         	movff	?___ftmul+2,sprintf@fval+2
  4334                           
  4335                           ;doprnt.c: 900: exp--;
  4336  0009CE  0101               	movlb	1	; () banked
  4337  0009D0  07E3               	decf	sprintf@exp& (0+255),f,b
  4338  0009D2  A0D8               	btfss	status,0,c
  4339  0009D4  07E4               	decf	(sprintf@exp+1)& (0+255),f,b
  4340  0009D6                     l2384:
  4341                           
  4342                           ;doprnt.c: 901: }
  4343                           ;doprnt.c: 903: }
  4344                           ;doprnt.c: 905: if(flag & 0x200 && !(flag & 0x800)) {
  4345                           
  4346                           ; BSR set to: 1
  4347                           
  4348                           ; BSR set to: 1
  4349                           
  4350                           ; BSR set to: 1
  4351  0009D6  0101               	movlb	1	; () banked
  4352  0009D8  B3F2               	btfsc	(sprintf@flag+1)& (0+255),1,b
  4353                           
  4354                           ; BSR set to: 1
  4355  0009DA  B7F2               	btfsc	(sprintf@flag+1)& (0+255),3,b
  4356  0009DC  D088               	goto	l2392
  4357                           
  4358                           ; BSR set to: 1
  4359                           ;doprnt.c: 906: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])))
  4360  0009DE  BFEF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4361  0009E0  D00A               	goto	l2386
  4362  0009E2  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  4363  0009E4  E104               	bnz	u22980
  4364  0009E6  0E0B               	movlw	11
  4365  0009E8  5DEE               	subwf	sprintf@prec& (0+255),w,b
  4366  0009EA  A0D8               	btfss	status,0,c
  4367  0009EC  D004               	goto	l2386
  4368  0009EE                     u22980:
  4369                           
  4370                           ; BSR set to: 1
  4371                           ;doprnt.c: 907: prec = (sizeof dpowers/sizeof dpowers[0]);
  4372  0009EE  0E00               	movlw	0
  4373  0009F0  6FEF               	movwf	(sprintf@prec+1)& (0+255),b
  4374  0009F2  0E0A               	movlw	10
  4375  0009F4  6FEE               	movwf	sprintf@prec& (0+255),b
  4376  0009F6                     l2386:
  4377                           
  4378                           ; BSR set to: 1
  4379                           ;doprnt.c: 915: val = (unsigned long)fval;
  4380                           
  4381                           ; BSR set to: 1
  4382  0009F6  C1EB  F082         	movff	sprintf@fval,___fttol@f1
  4383  0009FA  C1EC  F083         	movff	sprintf@fval+1,___fttol@f1+1
  4384  0009FE  C1ED  F084         	movff	sprintf@fval+2,___fttol@f1+2
  4385  000A02  EC3B  F015         	call	___fttol	;wreg free
  4386  000A06  C082  F1E7         	movff	?___fttol,sprintf@val
  4387  000A0A  C083  F1E8         	movff	?___fttol+1,sprintf@val+1
  4388  000A0E  C084  F1E9         	movff	?___fttol+2,sprintf@val+2
  4389  000A12  C085  F1EA         	movff	?___fttol+3,sprintf@val+3
  4390                           
  4391                           ;doprnt.c: 916: while(val && val % 10 == 0) {
  4392  000A16  D01F               	goto	l2387
  4393  000A18                     
  4394                           ;doprnt.c: 917: prec--;
  4395  000A18  0101               	movlb	1	; () banked
  4396  000A1A  07EE               	decf	sprintf@prec& (0+255),f,b
  4397  000A1C  A0D8               	btfss	status,0,c
  4398  000A1E  07EF               	decf	(sprintf@prec+1)& (0+255),f,b
  4399                           
  4400                           ; BSR set to: 1
  4401                           ;doprnt.c: 918: val /= 10;
  4402  000A20  C1E7  F060         	movff	sprintf@val,___lldiv@dividend
  4403  000A24  C1E8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  4404  000A28  C1E9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  4405  000A2C  C1EA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  4406  000A30  0E0A               	movlw	10
  4407  000A32  0100               	movlb	0	; () banked
  4408  000A34  6F64               	movwf	___lldiv@divisor& (0+255),b
  4409  000A36  0E00               	movlw	0
  4410  000A38  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  4411  000A3A  0E00               	movlw	0
  4412  000A3C  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  4413  000A3E  0E00               	movlw	0
  4414  000A40  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  4415  000A42  EC6D  F019         	call	___lldiv	;wreg free
  4416  000A46  C060  F1E7         	movff	?___lldiv,sprintf@val
  4417  000A4A  C061  F1E8         	movff	?___lldiv+1,sprintf@val+1
  4418  000A4E  C062  F1E9         	movff	?___lldiv+2,sprintf@val+2
  4419  000A52  C063  F1EA         	movff	?___lldiv+3,sprintf@val+3
  4420  000A56                     l2387:
  4421  000A56  0101               	movlb	1	; () banked
  4422  000A58  51E7               	movf	sprintf@val& (0+255),w,b
  4423  000A5A  11E8               	iorwf	(sprintf@val+1)& (0+255),w,b
  4424  000A5C  11E9               	iorwf	(sprintf@val+2)& (0+255),w,b
  4425  000A5E  11EA               	iorwf	(sprintf@val+3)& (0+255),w,b
  4426  000A60  B4D8               	btfsc	status,2,c
  4427  000A62  D01A               	goto	u23000
  4428                           
  4429                           ; BSR set to: 1
  4430  000A64  C1E7  F06D         	movff	sprintf@val,___llmod@dividend
  4431  000A68  C1E8  F06E         	movff	sprintf@val+1,___llmod@dividend+1
  4432  000A6C  C1E9  F06F         	movff	sprintf@val+2,___llmod@dividend+2
  4433  000A70  C1EA  F070         	movff	sprintf@val+3,___llmod@dividend+3
  4434  000A74  0E0A               	movlw	10
  4435  000A76  0100               	movlb	0	; () banked
  4436  000A78  6F71               	movwf	___llmod@divisor& (0+255),b
  4437  000A7A  0E00               	movlw	0
  4438  000A7C  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  4439  000A7E  0E00               	movlw	0
  4440  000A80  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  4441  000A82  0E00               	movlw	0
  4442  000A84  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  4443  000A86  EC9D  F01A         	call	___llmod	;wreg free
  4444  000A8A  0100               	movlb	0	; () banked
  4445  000A8C  516D               	movf	?___llmod& (0+255),w,b
  4446  000A8E  116E               	iorwf	(?___llmod+1)& (0+255),w,b
  4447  000A90  116F               	iorwf	(?___llmod+2)& (0+255),w,b
  4448  000A92  1170               	iorwf	(?___llmod+3)& (0+255),w,b
  4449  000A94  B4D8               	btfsc	status,2,c
  4450  000A96  D7C0               	goto	l2388
  4451  000A98                     u23000:
  4452                           
  4453                           ;doprnt.c: 919: }
  4454                           ;doprnt.c: 921: if(prec < c) {
  4455                           
  4456                           ; BSR set to: 0
  4457                           
  4458                           ; BSR set to: 0
  4459  000A98  0101               	movlb	1	; () banked
  4460  000A9A  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  4461  000A9C  0A80               	xorlw	128
  4462  000A9E  0100               	movlb	0	; () banked
  4463  000AA0  6FF6               	movwf	??_sprintf& (0+255),b
  4464  000AA2  0101               	movlb	1	; () banked
  4465  000AA4  51F0               	movf	sprintf@c& (0+255),w,b
  4466  000AA6  5DEE               	subwf	sprintf@prec& (0+255),w,b
  4467  000AA8  0E80               	movlw	128
  4468  000AAA  BFF0               	btfsc	sprintf@c& (0+255),7,b
  4469  000AAC  0E7F               	movlw	127
  4470  000AAE  0100               	movlb	0	; () banked
  4471  000AB0  59F6               	subwfb	??_sprintf& (0+255),w,b
  4472  000AB2  B0D8               	btfsc	status,0,c
  4473  000AB4  D01C               	goto	l2392
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;doprnt.c: 922: fval /= scale(c-prec);
  4477  000AB6  C1EB  F0B3         	movff	sprintf@fval,___ftdiv@f1
  4478  000ABA  C1EC  F0B4         	movff	sprintf@fval+1,___ftdiv@f1+1
  4479  000ABE  C1ED  F0B5         	movff	sprintf@fval+2,___ftdiv@f1+2
  4480  000AC2  0101               	movlb	1	; () banked
  4481  000AC4  51EE               	movf	sprintf@prec& (0+255),w,b
  4482  000AC6  0800               	sublw	0
  4483  000AC8  25F0               	addwf	sprintf@c& (0+255),w,b
  4484  000ACA  EC51  F00E         	call	_scale
  4485  000ACE  C0AC  F0B6         	movff	?_scale,___ftdiv@f2
  4486  000AD2  C0AD  F0B7         	movff	?_scale+1,___ftdiv@f2+1
  4487  000AD6  C0AE  F0B8         	movff	?_scale+2,___ftdiv@f2+2
  4488  000ADA  EC32  F016         	call	___ftdiv	;wreg free
  4489  000ADE  C0B3  F1EB         	movff	?___ftdiv,sprintf@fval
  4490  000AE2  C0B4  F1EC         	movff	?___ftdiv+1,sprintf@fval+1
  4491  000AE6  C0B5  F1ED         	movff	?___ftdiv+2,sprintf@fval+2
  4492                           
  4493                           ;doprnt.c: 923: c = prec;
  4494  000AEA  C1EE  F1F0         	movff	sprintf@prec,sprintf@c
  4495  000AEE                     l2392:
  4496                           
  4497                           ;doprnt.c: 924: }
  4498                           ;doprnt.c: 926: }
  4499                           ;doprnt.c: 929: width -= prec + 5;
  4500  000AEE  0E05               	movlw	5
  4501  000AF0  0101               	movlb	1	; () banked
  4502  000AF2  25EE               	addwf	sprintf@prec& (0+255),w,b
  4503  000AF4  0100               	movlb	0	; () banked
  4504  000AF6  6FF6               	movwf	??_sprintf& (0+255),b
  4505  000AF8  0E00               	movlw	0
  4506  000AFA  0101               	movlb	1	; () banked
  4507  000AFC  21EF               	addwfc	(sprintf@prec+1)& (0+255),w,b
  4508  000AFE  0100               	movlb	0	; () banked
  4509  000B00  6FF7               	movwf	(??_sprintf+1)& (0+255),b
  4510  000B02  51F6               	movf	??_sprintf& (0+255),w,b
  4511  000B04  0101               	movlb	1	; () banked
  4512  000B06  5FE5               	subwf	sprintf@width& (0+255),f,b
  4513  000B08  0100               	movlb	0	; () banked
  4514  000B0A  51F7               	movf	(??_sprintf+1)& (0+255),w,b
  4515  000B0C  0101               	movlb	1	; () banked
  4516  000B0E  5BE6               	subwfb	(sprintf@width+1)& (0+255),f,b
  4517                           
  4518                           ; BSR set to: 1
  4519                           ;doprnt.c: 931: if(prec || flag & 0x800)
  4520  000B10  51EE               	movf	sprintf@prec& (0+255),w,b
  4521  000B12  11EF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4522  000B14  A4D8               	btfss	status,2,c
  4523  000B16  D002               	goto	u23030
  4524                           
  4525                           ; BSR set to: 1
  4526  000B18  A7F2               	btfss	(sprintf@flag+1)& (0+255),3,b
  4527  000B1A  D003               	goto	l2393
  4528  000B1C                     u23030:
  4529                           
  4530                           ; BSR set to: 1
  4531                           ;doprnt.c: 932: width--;
  4532                           
  4533                           ; BSR set to: 1
  4534  000B1C  07E5               	decf	sprintf@width& (0+255),f,b
  4535  000B1E  A0D8               	btfss	status,0,c
  4536  000B20  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  4537  000B22                     l2393:
  4538                           
  4539                           ; BSR set to: 1
  4540                           ;doprnt.c: 934: if(flag & 0x03)
  4541                           
  4542                           ; BSR set to: 1
  4543  000B22  0E03               	movlw	3
  4544  000B24  15F1               	andwf	sprintf@flag& (0+255),w,b
  4545  000B26  0100               	movlb	0	; () banked
  4546  000B28  6FF6               	movwf	??_sprintf& (0+255),b
  4547  000B2A  0E00               	movlw	0
  4548  000B2C  0101               	movlb	1	; () banked
  4549  000B2E  15F2               	andwf	(sprintf@flag+1)& (0+255),w,b
  4550  000B30  0100               	movlb	0	; () banked
  4551  000B32  6FF7               	movwf	(??_sprintf+1)& (0+255),b
  4552  000B34  51F6               	movf	??_sprintf& (0+255),w,b
  4553  000B36  11F7               	iorwf	(??_sprintf+1)& (0+255),w,b
  4554  000B38  B4D8               	btfsc	status,2,c
  4555  000B3A  D004               	goto	l2396
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;doprnt.c: 935: width--;
  4559  000B3C  0101               	movlb	1	; () banked
  4560  000B3E  07E5               	decf	sprintf@width& (0+255),f,b
  4561  000B40  A0D8               	btfss	status,0,c
  4562  000B42  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  4563  000B44                     l2396:
  4564                           
  4565                           ;doprnt.c: 946: if(flag & 0x04) {
  4566                           
  4567                           ; BSR set to: 1
  4568  000B44  0101               	movlb	1	; () banked
  4569  000B46  A5F1               	btfss	sprintf@flag& (0+255),2,b
  4570  000B48  D031               	goto	l2397
  4571                           
  4572                           ; BSR set to: 1
  4573                           ;doprnt.c: 948: if(flag & 0x02)
  4574  000B4A  A3F1               	btfss	sprintf@flag& (0+255),1,b
  4575  000B4C  D011               	goto	l2398
  4576                           
  4577                           ; BSR set to: 1
  4578                           ;doprnt.c: 949: ((*sp++ = (flag & 0x01 ? '-' : '+')));
  4579  000B4E  B1F1               	btfsc	sprintf@flag& (0+255),0,b
  4580  000B50  D004               	goto	l2400
  4581                           
  4582                           ; BSR set to: 1
  4583  000B52  0E00               	movlw	0
  4584  000B54  6FC7               	movwf	(_sprintf$4949+1)& (0+255),b
  4585  000B56  0E2B               	movlw	43
  4586  000B58  D003               	goto	L5
  4587  000B5A                     l2400:
  4588                           
  4589                           ; BSR set to: 1
  4590                           
  4591                           ; BSR set to: 1
  4592  000B5A  0E00               	movlw	0
  4593  000B5C  6FC7               	movwf	(_sprintf$4949+1)& (0+255),b
  4594  000B5E  0E2D               	movlw	45
  4595  000B60                     L5:
  4596  000B60  6FC6               	movwf	_sprintf$4949& (0+255),b
  4597                           
  4598                           ; BSR set to: 1
  4599                           
  4600                           ; BSR set to: 1
  4601  000B62  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  4602  000B66  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  4603  000B6A  C1C6  FFDF         	movff	_sprintf$4949,indf2
  4604  000B6E  D008               	goto	l19255
  4605  000B70                     l2398:
  4606                           
  4607                           ; BSR set to: 1
  4608                           ;doprnt.c: 950: else if(flag & 0x01)
  4609  000B70  A1F1               	btfss	sprintf@flag& (0+255),0,b
  4610  000B72  D014               	goto	l2405
  4611                           
  4612                           ; BSR set to: 1
  4613                           ;doprnt.c: 951: ((*sp++ = (' ')));
  4614  000B74  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  4615  000B78  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  4616  000B7C  0E20               	movlw	32
  4617  000B7E  6EDF               	movwf	indf2,c
  4618  000B80                     l19255:
  4619                           
  4620                           ; BSR set to: 1
  4621  000B80  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  4622  000B82  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  4623                           
  4624                           ; BSR set to: 1
  4625                           ;doprnt.c: 953: while(width > 0) {
  4626                           
  4627                           ; BSR set to: 1
  4628  000B84  D00B               	goto	l2405
  4629  000B86                     l19257:
  4630                           
  4631                           ; BSR set to: 1
  4632                           ;doprnt.c: 954: ((*sp++ = ('0')));
  4633  000B86  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  4634  000B8A  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  4635  000B8E  0E30               	movlw	48
  4636  000B90  6EDF               	movwf	indf2,c
  4637                           
  4638                           ; BSR set to: 1
  4639  000B92  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  4640  000B94  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  4641                           
  4642                           ; BSR set to: 1
  4643                           ;doprnt.c: 955: width--;
  4644  000B96  07E5               	decf	sprintf@width& (0+255),f,b
  4645  000B98  A0D8               	btfss	status,0,c
  4646  000B9A  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  4647  000B9C                     l2405:
  4648                           
  4649                           ; BSR set to: 1
  4650                           
  4651                           ; BSR set to: 1
  4652  000B9C  BFE6               	btfsc	(sprintf@width+1)& (0+255),7,b
  4653  000B9E  D038               	goto	l2419
  4654  000BA0  51E6               	movf	(sprintf@width+1)& (0+255),w,b
  4655  000BA2  E1F1               	bnz	l19257
  4656  000BA4  05E5               	decf	sprintf@width& (0+255),w,b
  4657  000BA6  A0D8               	btfss	status,0,c
  4658  000BA8  D033               	goto	l2419
  4659  000BAA  D7ED               	goto	l2406
  4660  000BAC                     l2397:
  4661                           
  4662                           ; BSR set to: 1
  4663                           ;doprnt.c: 959: {
  4664                           ;doprnt.c: 962: if(!(flag & 0x08))
  4665  000BAC  A7F1               	btfss	sprintf@flag& (0+255),3,b
  4666  000BAE  D00C               	goto	l2410
  4667  000BB0  D012               	goto	u23110
  4668  000BB2                     l19267:
  4669                           
  4670                           ; BSR set to: 1
  4671                           ;doprnt.c: 965: ((*sp++ = (' ')));
  4672  000BB2  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  4673  000BB6  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  4674  000BBA  0E20               	movlw	32
  4675  000BBC  6EDF               	movwf	indf2,c
  4676                           
  4677                           ; BSR set to: 1
  4678  000BBE  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  4679  000BC0  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  4680                           
  4681                           ; BSR set to: 1
  4682                           ;doprnt.c: 966: width--;
  4683  000BC2  07E5               	decf	sprintf@width& (0+255),f,b
  4684  000BC4  A0D8               	btfss	status,0,c
  4685  000BC6  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  4686  000BC8                     l2410:
  4687                           
  4688                           ; BSR set to: 1
  4689                           
  4690                           ; BSR set to: 1
  4691  000BC8  BFE6               	btfsc	(sprintf@width+1)& (0+255),7,b
  4692  000BCA  D005               	goto	u23110
  4693  000BCC  51E6               	movf	(sprintf@width+1)& (0+255),w,b
  4694  000BCE  E1F1               	bnz	l19267
  4695  000BD0  05E5               	decf	sprintf@width& (0+255),w,b
  4696  000BD2  B0D8               	btfsc	status,0,c
  4697  000BD4  D7EE               	goto	l2411
  4698  000BD6                     u23110:
  4699                           
  4700                           ; BSR set to: 1
  4701                           ;doprnt.c: 967: }
  4702                           ;doprnt.c: 970: if(flag & 0x02)
  4703                           
  4704                           ; BSR set to: 1
  4705  000BD6  A3F1               	btfss	sprintf@flag& (0+255),1,b
  4706  000BD8  D011               	goto	l2413
  4707                           
  4708                           ; BSR set to: 1
  4709                           ;doprnt.c: 971: ((*sp++ = (flag & 0x01 ? '-' : '+')));
  4710  000BDA  B1F1               	btfsc	sprintf@flag& (0+255),0,b
  4711  000BDC  D004               	goto	l2415
  4712                           
  4713                           ; BSR set to: 1
  4714  000BDE  0E00               	movlw	0
  4715  000BE0  6FC9               	movwf	(_sprintf$4950+1)& (0+255),b
  4716  000BE2  0E2B               	movlw	43
  4717  000BE4  D003               	goto	L6
  4718  000BE6                     l2415:
  4719                           
  4720                           ; BSR set to: 1
  4721                           
  4722                           ; BSR set to: 1
  4723  000BE6  0E00               	movlw	0
  4724  000BE8  6FC9               	movwf	(_sprintf$4950+1)& (0+255),b
  4725  000BEA  0E2D               	movlw	45
  4726  000BEC                     L6:
  4727  000BEC  6FC8               	movwf	_sprintf$4950& (0+255),b
  4728                           
  4729                           ; BSR set to: 1
  4730                           
  4731                           ; BSR set to: 1
  4732  000BEE  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  4733  000BF2  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  4734  000BF6  C1C8  FFDF         	movff	_sprintf$4950,indf2
  4735  000BFA  D008               	goto	l19287
  4736  000BFC                     l2413:
  4737                           
  4738                           ; BSR set to: 1
  4739                           ;doprnt.c: 977: else if(flag & 0x01)
  4740  000BFC  A1F1               	btfss	sprintf@flag& (0+255),0,b
  4741  000BFE  D008               	goto	l2419
  4742                           
  4743                           ; BSR set to: 1
  4744                           ;doprnt.c: 978: ((*sp++ = (' ')));
  4745  000C00  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  4746  000C04  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  4747  000C08  0E20               	movlw	32
  4748  000C0A  6EDF               	movwf	indf2,c
  4749  000C0C                     l19287:
  4750                           
  4751                           ; BSR set to: 1
  4752  000C0C  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  4753  000C0E  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  4754  000C10                     l2419:
  4755                           
  4756                           ; BSR set to: 1
  4757                           ;doprnt.c: 980: }
  4758                           ;doprnt.c: 985: val = (unsigned long)fval;
  4759                           
  4760                           ; BSR set to: 1
  4761                           
  4762                           ; BSR set to: 1
  4763                           
  4764                           ; BSR set to: 1
  4765  000C10  C1EB  F082         	movff	sprintf@fval,___fttol@f1
  4766  000C14  C1EC  F083         	movff	sprintf@fval+1,___fttol@f1+1
  4767  000C18  C1ED  F084         	movff	sprintf@fval+2,___fttol@f1+2
  4768  000C1C  EC3B  F015         	call	___fttol	;wreg free
  4769  000C20  C082  F1E7         	movff	?___fttol,sprintf@val
  4770  000C24  C083  F1E8         	movff	?___fttol+1,sprintf@val+1
  4771  000C28  C084  F1E9         	movff	?___fttol+2,sprintf@val+2
  4772  000C2C  C085  F1EA         	movff	?___fttol+3,sprintf@val+3
  4773                           
  4774                           ;doprnt.c: 986: ((*sp++ = (val/dpowers[c] + '0')));
  4775  000C30  C1E7  F060         	movff	sprintf@val,___lldiv@dividend
  4776  000C34  C1E8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  4777  000C38  C1E9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  4778  000C3C  C1EA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  4779  000C40  0101               	movlb	1	; () banked
  4780  000C42  51F0               	movf	sprintf@c& (0+255),w,b
  4781  000C44  0D04               	mullw	4
  4782  000C46  0E6F               	movlw	low _dpowers
  4783  000C48  24F3               	addwf	prodl,w,c
  4784  000C4A  6EF6               	movwf	tblptrl,c
  4785  000C4C  0EFB               	movlw	high _dpowers
  4786  000C4E  20F4               	addwfc	prodh,w,c
  4787  000C50  6EF7               	movwf	tblptrh,c
  4788  000C52                     	if	0	;There are less than 3 active tblptr bytes
  4789  000C52                     	endif
  4790  000C52  0009               	tblrd		*+
  4791  000C54  CFF5 F064          	movff	tablat,___lldiv@divisor
  4792  000C58  0009               	tblrd		*+
  4793  000C5A  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  4794  000C5E  0009               	tblrd		*+
  4795  000C60  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  4796  000C64  000A               	tblrd		*-
  4797  000C66  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  4798  000C6A  EC6D  F019         	call	___lldiv	;wreg free
  4799  000C6E  0100               	movlb	0	; () banked
  4800  000C70  5160               	movf	?___lldiv& (0+255),w,b
  4801  000C72  0F30               	addlw	48
  4802  000C74  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  4803  000C78  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  4804  000C7C  6EDF               	movwf	indf2,c
  4805                           
  4806                           ; BSR set to: 0
  4807  000C7E  0101               	movlb	1	; () banked
  4808  000C80  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  4809  000C82  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  4810                           
  4811                           ; BSR set to: 1
  4812                           ;doprnt.c: 987: val %= dpowers[c];
  4813  000C84  C1E7  F06D         	movff	sprintf@val,___llmod@dividend
  4814  000C88  C1E8  F06E         	movff	sprintf@val+1,___llmod@dividend+1
  4815  000C8C  C1E9  F06F         	movff	sprintf@val+2,___llmod@dividend+2
  4816  000C90  C1EA  F070         	movff	sprintf@val+3,___llmod@dividend+3
  4817  000C94  51F0               	movf	sprintf@c& (0+255),w,b
  4818  000C96  0D04               	mullw	4
  4819  000C98  0E6F               	movlw	low _dpowers
  4820  000C9A  24F3               	addwf	prodl,w,c
  4821  000C9C  6EF6               	movwf	tblptrl,c
  4822  000C9E  0EFB               	movlw	high _dpowers
  4823  000CA0  20F4               	addwfc	prodh,w,c
  4824  000CA2  6EF7               	movwf	tblptrh,c
  4825  000CA4                     	if	0	;There are less than 3 active tblptr bytes
  4826  000CA4                     	endif
  4827  000CA4  0009               	tblrd		*+
  4828  000CA6  CFF5 F071          	movff	tablat,___llmod@divisor
  4829  000CAA  0009               	tblrd		*+
  4830  000CAC  CFF5 F072          	movff	tablat,___llmod@divisor+1
  4831  000CB0  0009               	tblrd		*+
  4832  000CB2  CFF5 F073          	movff	tablat,___llmod@divisor+2
  4833  000CB6  000A               	tblrd		*-
  4834  000CB8  CFF5 F074          	movff	tablat,___llmod@divisor+3
  4835  000CBC  EC9D  F01A         	call	___llmod	;wreg free
  4836  000CC0  C06D  F1E7         	movff	?___llmod,sprintf@val
  4837  000CC4  C06E  F1E8         	movff	?___llmod+1,sprintf@val+1
  4838  000CC8  C06F  F1E9         	movff	?___llmod+2,sprintf@val+2
  4839  000CCC  C070  F1EA         	movff	?___llmod+3,sprintf@val+3
  4840                           
  4841                           ;doprnt.c: 990: if(prec || flag & 0x800)
  4842  000CD0  0101               	movlb	1	; () banked
  4843  000CD2  51EE               	movf	sprintf@prec& (0+255),w,b
  4844  000CD4  11EF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4845  000CD6  A4D8               	btfss	status,2,c
  4846  000CD8  D002               	goto	u23160
  4847                           
  4848                           ; BSR set to: 1
  4849  000CDA  A7F2               	btfss	(sprintf@flag+1)& (0+255),3,b
  4850  000CDC  D083               	goto	u23200
  4851  000CDE                     u23160:
  4852                           
  4853                           ; BSR set to: 1
  4854                           ;doprnt.c: 994: {
  4855                           ;doprnt.c: 995: ((*sp++ = ('.')));
  4856                           
  4857                           ; BSR set to: 1
  4858  000CDE  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  4859  000CE2  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  4860  000CE6  0E2E               	movlw	46
  4861  000CE8  6EDF               	movwf	indf2,c
  4862                           
  4863                           ; BSR set to: 1
  4864  000CEA  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  4865  000CEC  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  4866                           
  4867                           ; BSR set to: 1
  4868                           ;doprnt.c: 996: prec -= c;
  4869  000CEE  51F0               	movf	sprintf@c& (0+255),w,b
  4870  000CF0  5FEE               	subwf	sprintf@prec& (0+255),f,b
  4871  000CF2  0E00               	movlw	0
  4872  000CF4  BFF0               	btfsc	sprintf@c& (0+255),7,b
  4873  000CF6  0EFF               	movlw	255
  4874  000CF8  5BEF               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4875                           
  4876                           ;doprnt.c: 997: while(c--) {
  4877  000CFA  D05F               	goto	l2423
  4878  000CFC                     l2424:
  4879                           
  4880                           ; BSR set to: 1
  4881                           ;doprnt.c: 1002: if(flag & 0x200 && val == 0) {
  4882  000CFC  A3F2               	btfss	(sprintf@flag+1)& (0+255),1,b
  4883  000CFE  D00E               	goto	l2425
  4884                           
  4885                           ; BSR set to: 1
  4886  000D00  51E7               	movf	sprintf@val& (0+255),w,b
  4887  000D02  11E8               	iorwf	(sprintf@val+1)& (0+255),w,b
  4888  000D04  11E9               	iorwf	(sprintf@val+2)& (0+255),w,b
  4889  000D06  11EA               	iorwf	(sprintf@val+3)& (0+255),w,b
  4890  000D08  A4D8               	btfss	status,2,c
  4891  000D0A  D008               	goto	l2425
  4892                           
  4893                           ; BSR set to: 1
  4894                           ;doprnt.c: 1003: prec = c = 0;
  4895  000D0C  0E00               	movlw	0
  4896  000D0E  6FF0               	movwf	sprintf@c& (0+255),b
  4897  000D10  51F0               	movf	sprintf@c& (0+255),w,b
  4898  000D12  6FEE               	movwf	sprintf@prec& (0+255),b
  4899  000D14  6BEF               	clrf	(sprintf@prec+1)& (0+255),b
  4900  000D16  BFEE               	btfsc	sprintf@prec& (0+255),7,b
  4901  000D18  07EF               	decf	(sprintf@prec+1)& (0+255),f,b
  4902                           
  4903                           ;doprnt.c: 1004: break;
  4904  000D1A  D060               	goto	l2427
  4905  000D1C                     l2425:
  4906                           
  4907                           ; BSR set to: 1
  4908                           ;doprnt.c: 1005: }
  4909                           ;doprnt.c: 1007: ((*sp++ = ('0' + (val/dpowers[c]))));
  4910                           
  4911                           ; BSR set to: 1
  4912  000D1C  C1E7  F060         	movff	sprintf@val,___lldiv@dividend
  4913  000D20  C1E8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  4914  000D24  C1E9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  4915  000D28  C1EA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  4916  000D2C  51F0               	movf	sprintf@c& (0+255),w,b
  4917  000D2E  0D04               	mullw	4
  4918  000D30  0E6F               	movlw	low _dpowers
  4919  000D32  24F3               	addwf	prodl,w,c
  4920  000D34  6EF6               	movwf	tblptrl,c
  4921  000D36  0EFB               	movlw	high _dpowers
  4922  000D38  20F4               	addwfc	prodh,w,c
  4923  000D3A  6EF7               	movwf	tblptrh,c
  4924  000D3C                     	if	0	;There are less than 3 active tblptr bytes
  4925  000D3C                     	endif
  4926  000D3C  0009               	tblrd		*+
  4927  000D3E  CFF5 F064          	movff	tablat,___lldiv@divisor
  4928  000D42  0009               	tblrd		*+
  4929  000D44  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  4930  000D48  0009               	tblrd		*+
  4931  000D4A  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  4932  000D4E  000A               	tblrd		*-
  4933  000D50  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  4934  000D54  EC6D  F019         	call	___lldiv	;wreg free
  4935  000D58  0100               	movlb	0	; () banked
  4936  000D5A  5160               	movf	?___lldiv& (0+255),w,b
  4937  000D5C  0F30               	addlw	48
  4938  000D5E  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  4939  000D62  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  4940  000D66  6EDF               	movwf	indf2,c
  4941                           
  4942                           ; BSR set to: 0
  4943  000D68  0101               	movlb	1	; () banked
  4944  000D6A  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  4945  000D6C  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  4946                           
  4947                           ; BSR set to: 1
  4948                           ;doprnt.c: 1008: val %= dpowers[c];
  4949  000D6E  C1E7  F06D         	movff	sprintf@val,___llmod@dividend
  4950  000D72  C1E8  F06E         	movff	sprintf@val+1,___llmod@dividend+1
  4951  000D76  C1E9  F06F         	movff	sprintf@val+2,___llmod@dividend+2
  4952  000D7A  C1EA  F070         	movff	sprintf@val+3,___llmod@dividend+3
  4953  000D7E  51F0               	movf	sprintf@c& (0+255),w,b
  4954  000D80  0D04               	mullw	4
  4955  000D82  0E6F               	movlw	low _dpowers
  4956  000D84  24F3               	addwf	prodl,w,c
  4957  000D86  6EF6               	movwf	tblptrl,c
  4958  000D88  0EFB               	movlw	high _dpowers
  4959  000D8A  20F4               	addwfc	prodh,w,c
  4960  000D8C  6EF7               	movwf	tblptrh,c
  4961  000D8E                     	if	0	;There are less than 3 active tblptr bytes
  4962  000D8E                     	endif
  4963  000D8E  0009               	tblrd		*+
  4964  000D90  CFF5 F071          	movff	tablat,___llmod@divisor
  4965  000D94  0009               	tblrd		*+
  4966  000D96  CFF5 F072          	movff	tablat,___llmod@divisor+1
  4967  000D9A  0009               	tblrd		*+
  4968  000D9C  CFF5 F073          	movff	tablat,___llmod@divisor+2
  4969  000DA0  000A               	tblrd		*-
  4970  000DA2  CFF5 F074          	movff	tablat,___llmod@divisor+3
  4971  000DA6  EC9D  F01A         	call	___llmod	;wreg free
  4972  000DAA  C06D  F1E7         	movff	?___llmod,sprintf@val
  4973  000DAE  C06E  F1E8         	movff	?___llmod+1,sprintf@val+1
  4974  000DB2  C06F  F1E9         	movff	?___llmod+2,sprintf@val+2
  4975  000DB6  C070  F1EA         	movff	?___llmod+3,sprintf@val+3
  4976  000DBA                     l2423:
  4977  000DBA  0101               	movlb	1	; () banked
  4978  000DBC  07F0               	decf	sprintf@c& (0+255),f,b
  4979  000DBE  29F0               	incf	sprintf@c& (0+255),w,b
  4980  000DC0  B4D8               	btfsc	status,2,c
  4981  000DC2  D00C               	goto	l2427
  4982  000DC4  D79B               	goto	l2424
  4983  000DC6                     
  4984                           ; BSR set to: 1
  4985                           ;doprnt.c: 1012: ((*sp++ = ('0')));
  4986                           
  4987                           ; BSR set to: 1
  4988  000DC6  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  4989  000DCA  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  4990  000DCE  0E30               	movlw	48
  4991  000DD0  6EDF               	movwf	indf2,c
  4992                           
  4993                           ; BSR set to: 1
  4994  000DD2  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  4995  000DD4  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  4996                           
  4997                           ; BSR set to: 1
  4998                           ;doprnt.c: 1013: prec--;
  4999  000DD6  07EE               	decf	sprintf@prec& (0+255),f,b
  5000  000DD8  A0D8               	btfss	status,0,c
  5001  000DDA  07EF               	decf	(sprintf@prec+1)& (0+255),f,b
  5002  000DDC                     l2427:
  5003                           
  5004                           ; BSR set to: 1
  5005                           
  5006                           ; BSR set to: 1
  5007  000DDC  51EE               	movf	sprintf@prec& (0+255),w,b
  5008  000DDE  11EF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5009  000DE0  A4D8               	btfss	status,2,c
  5010  000DE2  D7F1               	goto	l2428
  5011  000DE4                     u23200:
  5012                           
  5013                           ; BSR set to: 1
  5014                           ;doprnt.c: 1014: }
  5015                           ;doprnt.c: 1015: }
  5016                           ;doprnt.c: 1017: if(flag & 0x20)
  5017                           
  5018                           ; BSR set to: 1
  5019  000DE4  ABF1               	btfss	sprintf@flag& (0+255),5,b
  5020  000DE6  D006               	goto	l2430
  5021                           
  5022                           ; BSR set to: 1
  5023                           ;doprnt.c: 1018: ((*sp++ = ('E')));
  5024  000DE8  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  5025  000DEC  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  5026  000DF0  0E45               	movlw	69
  5027  000DF2  D005               	goto	L7
  5028  000DF4                     l2430:
  5029                           
  5030                           ; BSR set to: 1
  5031                           ;doprnt.c: 1019: else
  5032                           ;doprnt.c: 1021: ((*sp++ = ('e')));
  5033                           
  5034                           ; BSR set to: 1
  5035  000DF4  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  5036  000DF8  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  5037  000DFC  0E65               	movlw	101
  5038  000DFE                     L7:
  5039  000DFE  6EDF               	movwf	indf2,c
  5040                           
  5041                           ; BSR set to: 1
  5042  000E00  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  5043  000E02  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  5044                           
  5045                           ; BSR set to: 1
  5046                           ;doprnt.c: 1022: if(exp < 0) {
  5047                           
  5048                           ; BSR set to: 1
  5049  000E04  AFE4               	btfss	(sprintf@exp+1)& (0+255),7,b
  5050  000E06  D00A               	goto	l2432
  5051                           
  5052                           ; BSR set to: 1
  5053                           ;doprnt.c: 1023: exp = -exp;
  5054  000E08  6DE3               	negf	sprintf@exp& (0+255),b
  5055  000E0A  1FE4               	comf	(sprintf@exp+1)& (0+255),f,b
  5056  000E0C  B0D8               	btfsc	status,0,c
  5057  000E0E  2BE4               	incf	(sprintf@exp+1)& (0+255),f,b
  5058                           
  5059                           ; BSR set to: 1
  5060                           ;doprnt.c: 1024: ((*sp++ = ('-')));
  5061  000E10  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  5062  000E14  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  5063  000E18  0E2D               	movlw	45
  5064  000E1A  D005               	goto	L8
  5065  000E1C                     l2432:
  5066                           
  5067                           ; BSR set to: 1
  5068                           ;doprnt.c: 1026: ((*sp++ = ('+')));
  5069                           
  5070                           ; BSR set to: 1
  5071  000E1C  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  5072  000E20  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  5073  000E24  0E2B               	movlw	43
  5074  000E26                     L8:
  5075  000E26  6EDF               	movwf	indf2,c
  5076                           
  5077                           ; BSR set to: 1
  5078  000E28  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  5079  000E2A  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  5080                           
  5081                           ; BSR set to: 1
  5082                           ;doprnt.c: 1039: ((*sp++ = (exp / 10 + '0')));
  5083                           
  5084                           ; BSR set to: 1
  5085  000E2C  C1E3  F066         	movff	sprintf@exp,___awdiv@dividend
  5086  000E30  C1E4  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  5087  000E34  0E00               	movlw	0
  5088  000E36  0100               	movlb	0	; () banked
  5089  000E38  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  5090  000E3A  0E0A               	movlw	10
  5091  000E3C  6F68               	movwf	___awdiv@divisor& (0+255),b
  5092  000E3E  EC2A  F019         	call	___awdiv	;wreg free
  5093  000E42  0100               	movlb	0	; () banked
  5094  000E44  5166               	movf	?___awdiv& (0+255),w,b
  5095  000E46  0F30               	addlw	48
  5096  000E48  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  5097  000E4C  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  5098  000E50  6EDF               	movwf	indf2,c
  5099                           
  5100                           ; BSR set to: 0
  5101  000E52  0101               	movlb	1	; () banked
  5102  000E54  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  5103  000E56  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  5104                           
  5105                           ; BSR set to: 1
  5106                           ;doprnt.c: 1040: ((*sp++ = (exp % 10 + '0')));
  5107  000E58  C1E3  F060         	movff	sprintf@exp,___awmod@dividend
  5108  000E5C  C1E4  F061         	movff	sprintf@exp+1,___awmod@dividend+1
  5109  000E60  0E00               	movlw	0
  5110  000E62  0100               	movlb	0	; () banked
  5111  000E64  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5112  000E66  0E0A               	movlw	10
  5113  000E68  6F62               	movwf	___awmod@divisor& (0+255),b
  5114  000E6A  EC2F  F01A         	call	___awmod	;wreg free
  5115  000E6E  0100               	movlb	0	; () banked
  5116  000E70  5160               	movf	?___awmod& (0+255),w,b
  5117  000E72  0F30               	addlw	48
  5118  000E74  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  5119  000E78  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  5120  000E7C  6EDF               	movwf	indf2,c
  5121                           
  5122                           ; BSR set to: 0
  5123  000E7E  0101               	movlb	1	; () banked
  5124  000E80  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  5125  000E82  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  5126                           
  5127                           ; BSR set to: 1
  5128                           ;doprnt.c: 1042: if((flag & 0x08) && width > 0)
  5129  000E84  B7F1               	btfsc	sprintf@flag& (0+255),3,b
  5130                           
  5131                           ; BSR set to: 1
  5132  000E86  BFE6               	btfsc	(sprintf@width+1)& (0+255),7,b
  5133  000E88  EF3D  F00E         	goto	u24110
  5134  000E8C  51E6               	movf	(sprintf@width+1)& (0+255),w,b
  5135  000E8E  E104               	bnz	l19359
  5136  000E90  05E5               	decf	sprintf@width& (0+255),w,b
  5137  000E92  A0D8               	btfss	status,0,c
  5138  000E94  EF3D  F00E         	goto	u24110
  5139  000E98                     u23240:
  5140  000E98                     l19359:
  5141                           
  5142                           ; BSR set to: 1
  5143                           ;doprnt.c: 1044: ((*sp++ = (' ')));
  5144  000E98  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  5145  000E9C  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  5146  000EA0  0E20               	movlw	32
  5147  000EA2  6EDF               	movwf	indf2,c
  5148                           
  5149                           ; BSR set to: 1
  5150  000EA4  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  5151  000EA6  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  5152                           
  5153                           ; BSR set to: 1
  5154                           ;doprnt.c: 1045: while(--width);
  5155  000EA8  07E5               	decf	sprintf@width& (0+255),f,b
  5156  000EAA  A0D8               	btfss	status,0,c
  5157  000EAC  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  5158  000EAE  51E5               	movf	sprintf@width& (0+255),w,b
  5159  000EB0  11E6               	iorwf	(sprintf@width+1)& (0+255),w,b
  5160  000EB2  B4D8               	btfsc	status,2,c
  5161  000EB4  EF3D  F00E         	goto	u24110
  5162  000EB8  D7EF               	goto	u23240
  5163  000EBA                     l2372:
  5164                           
  5165                           ;doprnt.c: 1048: }
  5166                           ;doprnt.c: 1087: if(flag & 0x200) {
  5167  000EBA  0101               	movlb	1	; () banked
  5168  000EBC  A3F2               	btfss	(sprintf@flag+1)& (0+255),1,b
  5169  000EBE  D0F4               	goto	l2437
  5170                           
  5171                           ; BSR set to: 1
  5172                           ;doprnt.c: 1088: if(exp < 0)
  5173  000EC0  AFE4               	btfss	(sprintf@exp+1)& (0+255),7,b
  5174  000EC2  D010               	goto	l2438
  5175                           
  5176                           ; BSR set to: 1
  5177                           ;doprnt.c: 1089: prec -= (exp+1);
  5178  000EC4  0E01               	movlw	1
  5179  000EC6  25E3               	addwf	sprintf@exp& (0+255),w,b
  5180  000EC8  0100               	movlb	0	; () banked
  5181  000ECA  6FF6               	movwf	??_sprintf& (0+255),b
  5182  000ECC  0E00               	movlw	0
  5183  000ECE  0101               	movlb	1	; () banked
  5184  000ED0  21E4               	addwfc	(sprintf@exp+1)& (0+255),w,b
  5185  000ED2  0100               	movlb	0	; () banked
  5186  000ED4  6FF7               	movwf	(??_sprintf+1)& (0+255),b
  5187  000ED6  51F6               	movf	??_sprintf& (0+255),w,b
  5188  000ED8  0101               	movlb	1	; () banked
  5189  000EDA  5FEE               	subwf	sprintf@prec& (0+255),f,b
  5190  000EDC  0100               	movlb	0	; () banked
  5191  000EDE  51F7               	movf	(??_sprintf+1)& (0+255),w,b
  5192  000EE0  0101               	movlb	1	; () banked
  5193  000EE2  5BEF               	subwfb	(sprintf@prec+1)& (0+255),f,b
  5194  000EE4                     l2438:
  5195                           
  5196                           ; BSR set to: 1
  5197                           ;doprnt.c: 1091: val = (unsigned long)fval;
  5198                           
  5199                           ; BSR set to: 1
  5200  000EE4  C1EB  F082         	movff	sprintf@fval,___fttol@f1
  5201  000EE8  C1EC  F083         	movff	sprintf@fval+1,___fttol@f1+1
  5202  000EEC  C1ED  F084         	movff	sprintf@fval+2,___fttol@f1+2
  5203  000EF0  EC3B  F015         	call	___fttol	;wreg free
  5204  000EF4  C082  F1E7         	movff	?___fttol,sprintf@val
  5205  000EF8  C083  F1E8         	movff	?___fttol+1,sprintf@val+1
  5206  000EFC  C084  F1E9         	movff	?___fttol+2,sprintf@val+2
  5207  000F00  C085  F1EA         	movff	?___fttol+3,sprintf@val+3
  5208                           
  5209                           ;doprnt.c: 1092: for(c = 0 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5210  000F04  0E00               	movlw	0
  5211  000F06  0101               	movlb	1	; () banked
  5212  000F08  6FF0               	movwf	sprintf@c& (0+255),b
  5213  000F0A                     l19373:
  5214                           
  5215                           ; BSR set to: 1
  5216  000F0A  0E0A               	movlw	10
  5217  000F0C  19F0               	xorwf	sprintf@c& (0+255),w,b
  5218  000F0E  B4D8               	btfsc	status,2,c
  5219  000F10  D018               	goto	u23300
  5220                           
  5221                           ; BSR set to: 1
  5222                           ;doprnt.c: 1093: if(val < dpowers[c])
  5223                           
  5224                           ; BSR set to: 1
  5225                           
  5226                           ; BSR set to: 1
  5227  000F12  51F0               	movf	sprintf@c& (0+255),w,b
  5228  000F14  0D04               	mullw	4
  5229  000F16  0E6F               	movlw	low _dpowers
  5230  000F18  24F3               	addwf	prodl,w,c
  5231  000F1A  6EF6               	movwf	tblptrl,c
  5232  000F1C  0EFB               	movlw	high _dpowers
  5233  000F1E  20F4               	addwfc	prodh,w,c
  5234  000F20  6EF7               	movwf	tblptrh,c
  5235  000F22                     	if	0	;There are less than 3 active tblptr bytes
  5236  000F22                     	endif
  5237  000F22  0009               	tblrd		*+
  5238  000F24  50F5               	movf	tablat,w,c
  5239  000F26  5DE7               	subwf	sprintf@val& (0+255),w,b
  5240  000F28  0009               	tblrd		*+
  5241  000F2A  50F5               	movf	tablat,w,c
  5242  000F2C  59E8               	subwfb	(sprintf@val+1)& (0+255),w,b
  5243  000F2E  0009               	tblrd		*+
  5244  000F30  50F5               	movf	tablat,w,c
  5245  000F32  59E9               	subwfb	(sprintf@val+2)& (0+255),w,b
  5246  000F34  0009               	tblrd		*+
  5247  000F36  50F5               	movf	tablat,w,c
  5248  000F38  59EA               	subwfb	(sprintf@val+3)& (0+255),w,b
  5249  000F3A  A0D8               	btfss	status,0,c
  5250  000F3C  D002               	goto	u23300
  5251                           
  5252                           ; BSR set to: 1
  5253                           
  5254                           ; BSR set to: 1
  5255                           
  5256                           ; BSR set to: 1
  5257                           ;doprnt.c: 1094: break;
  5258  000F3E  2BF0               	incf	sprintf@c& (0+255),f,b
  5259  000F40  D7E4               	goto	l19373
  5260  000F42                     u23300:
  5261                           
  5262                           ; BSR set to: 1
  5263                           ;doprnt.c: 1095: prec -= c;
  5264                           
  5265                           ; BSR set to: 1
  5266  000F42  51F0               	movf	sprintf@c& (0+255),w,b
  5267  000F44  5FEE               	subwf	sprintf@prec& (0+255),f,b
  5268  000F46  0E00               	movlw	0
  5269  000F48  BFF0               	btfsc	sprintf@c& (0+255),7,b
  5270  000F4A  0EFF               	movlw	255
  5271  000F4C  5BEF               	subwfb	(sprintf@prec+1)& (0+255),f,b
  5272                           
  5273                           ;doprnt.c: 1096: if(prec <= 12)
  5274  000F4E  BFEF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  5275  000F50  D006               	goto	u23310
  5276  000F52  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  5277  000F54  E11B               	bnz	l2442
  5278  000F56  0E0D               	movlw	13
  5279  000F58  5DEE               	subwf	sprintf@prec& (0+255),w,b
  5280  000F5A  B0D8               	btfsc	status,0,c
  5281  000F5C  D017               	goto	l2442
  5282  000F5E                     u23310:
  5283                           
  5284                           ; BSR set to: 1
  5285                           ;doprnt.c: 1097: fval += fround(prec);
  5286  000F5E  C1EB  F0B6         	movff	sprintf@fval,___ftadd@f1
  5287  000F62  C1EC  F0B7         	movff	sprintf@fval+1,___ftadd@f1+1
  5288  000F66  C1ED  F0B8         	movff	sprintf@fval+2,___ftadd@f1+2
  5289  000F6A  51EE               	movf	sprintf@prec& (0+255),w,b
  5290  000F6C  EC6D  F010         	call	_fround
  5291  000F70  C0AC  F0B9         	movff	?_fround,___ftadd@f2
  5292  000F74  C0AD  F0BA         	movff	?_fround+1,___ftadd@f2+1
  5293  000F78  C0AE  F0BB         	movff	?_fround+2,___ftadd@f2+2
  5294  000F7C  ECB5  F012         	call	___ftadd	;wreg free
  5295  000F80  C0B6  F1EB         	movff	?___ftadd,sprintf@fval
  5296  000F84  C0B7  F1EC         	movff	?___ftadd+1,sprintf@fval+1
  5297  000F88  C0B8  F1ED         	movff	?___ftadd+2,sprintf@fval+2
  5298  000F8C                     l2442:
  5299                           
  5300                           ;doprnt.c: 1100: {
  5301                           ;doprnt.c: 1101: double temp;
  5302                           ;doprnt.c: 1102: temp = scale(prec);
  5303  000F8C  0101               	movlb	1	; () banked
  5304  000F8E  51EE               	movf	sprintf@prec& (0+255),w,b
  5305  000F90  EC51  F00E         	call	_scale
  5306  000F94  C0AC  F1D8         	movff	?_scale,sprintf@temp
  5307  000F98  C0AD  F1D9         	movff	?_scale+1,sprintf@temp+1
  5308  000F9C  C0AE  F1DA         	movff	?_scale+2,sprintf@temp+2
  5309                           
  5310                           ;doprnt.c: 1103: temp *= fval - (double)val;
  5311  000FA0  C1D8  F09D         	movff	sprintf@temp,___ftmul@f1
  5312  000FA4  C1D9  F09E         	movff	sprintf@temp+1,___ftmul@f1+1
  5313  000FA8  C1DA  F09F         	movff	sprintf@temp+2,___ftmul@f1+2
  5314  000FAC  C1EB  F0B9         	movff	sprintf@fval,___ftadd@f2
  5315  000FB0  C1EC  F0BA         	movff	sprintf@fval+1,___ftadd@f2+1
  5316  000FB4  C1ED  F0BB         	movff	sprintf@fval+2,___ftadd@f2+2
  5317  000FB8  C1E7  F091         	movff	sprintf@val,___lltoft@c
  5318  000FBC  C1E8  F092         	movff	sprintf@val+1,___lltoft@c+1
  5319  000FC0  C1E9  F093         	movff	sprintf@val+2,___lltoft@c+2
  5320  000FC4  C1EA  F094         	movff	sprintf@val+3,___lltoft@c+3
  5321  000FC8  EC05  F01B         	call	___lltoft	;wreg free
  5322  000FCC  C091  F09A         	movff	?___lltoft,___ftneg@f1
  5323  000FD0  C092  F09B         	movff	?___lltoft+1,___ftneg@f1+1
  5324  000FD4  C093  F09C         	movff	?___lltoft+2,___ftneg@f1+2
  5325  000FD8  ECA0  F01C         	call	___ftneg	;wreg free
  5326  000FDC  C09A  F0B6         	movff	?___ftneg,___ftadd@f1
  5327  000FE0  C09B  F0B7         	movff	?___ftneg+1,___ftadd@f1+1
  5328  000FE4  C09C  F0B8         	movff	?___ftneg+2,___ftadd@f1+2
  5329  000FE8  ECB5  F012         	call	___ftadd	;wreg free
  5330  000FEC  C0B6  F0A0         	movff	?___ftadd,___ftmul@f2
  5331  000FF0  C0B7  F0A1         	movff	?___ftadd+1,___ftmul@f2+1
  5332  000FF4  C0B8  F0A2         	movff	?___ftadd+2,___ftmul@f2+2
  5333  000FF8  ECB7  F015         	call	___ftmul	;wreg free
  5334  000FFC  C09D  F1D8         	movff	?___ftmul,sprintf@temp
  5335  001000  C09E  F1D9         	movff	?___ftmul+1,sprintf@temp+1
  5336  001004  C09F  F1DA         	movff	?___ftmul+2,sprintf@temp+2
  5337                           
  5338                           ;doprnt.c: 1104: val = (unsigned long)temp;
  5339  001008  C1D8  F082         	movff	sprintf@temp,___fttol@f1
  5340  00100C  C1D9  F083         	movff	sprintf@temp+1,___fttol@f1+1
  5341  001010  C1DA  F084         	movff	sprintf@temp+2,___fttol@f1+2
  5342  001014  EC3B  F015         	call	___fttol	;wreg free
  5343  001018  C082  F1E7         	movff	?___fttol,sprintf@val
  5344  00101C  C083  F1E8         	movff	?___fttol+1,sprintf@val+1
  5345  001020  C084  F1E9         	movff	?___fttol+2,sprintf@val+2
  5346  001024  C085  F1EA         	movff	?___fttol+3,sprintf@val+3
  5347                           
  5348                           ;doprnt.c: 1105: }
  5349                           ;doprnt.c: 1106: while(prec && val % 10 == 0) {
  5350  001028  D01F               	goto	l2443
  5351  00102A                     
  5352                           ;doprnt.c: 1107: val /= 10;
  5353  00102A  C1E7  F060         	movff	sprintf@val,___lldiv@dividend
  5354  00102E  C1E8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  5355  001032  C1E9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  5356  001036  C1EA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  5357  00103A  0E0A               	movlw	10
  5358  00103C  0100               	movlb	0	; () banked
  5359  00103E  6F64               	movwf	___lldiv@divisor& (0+255),b
  5360  001040  0E00               	movlw	0
  5361  001042  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  5362  001044  0E00               	movlw	0
  5363  001046  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  5364  001048  0E00               	movlw	0
  5365  00104A  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  5366  00104C  EC6D  F019         	call	___lldiv	;wreg free
  5367  001050  C060  F1E7         	movff	?___lldiv,sprintf@val
  5368  001054  C061  F1E8         	movff	?___lldiv+1,sprintf@val+1
  5369  001058  C062  F1E9         	movff	?___lldiv+2,sprintf@val+2
  5370  00105C  C063  F1EA         	movff	?___lldiv+3,sprintf@val+3
  5371                           
  5372                           ;doprnt.c: 1108: prec--;
  5373  001060  0101               	movlb	1	; () banked
  5374  001062  07EE               	decf	sprintf@prec& (0+255),f,b
  5375  001064  A0D8               	btfss	status,0,c
  5376  001066  07EF               	decf	(sprintf@prec+1)& (0+255),f,b
  5377  001068                     l2443:
  5378                           
  5379                           ; BSR set to: 1
  5380  001068  0101               	movlb	1	; () banked
  5381  00106A  51EE               	movf	sprintf@prec& (0+255),w,b
  5382  00106C  11EF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5383  00106E  B4D8               	btfsc	status,2,c
  5384  001070  D03B               	goto	l2449
  5385                           
  5386                           ; BSR set to: 1
  5387  001072  C1E7  F06D         	movff	sprintf@val,___llmod@dividend
  5388  001076  C1E8  F06E         	movff	sprintf@val+1,___llmod@dividend+1
  5389  00107A  C1E9  F06F         	movff	sprintf@val+2,___llmod@dividend+2
  5390  00107E  C1EA  F070         	movff	sprintf@val+3,___llmod@dividend+3
  5391  001082  0E0A               	movlw	10
  5392  001084  0100               	movlb	0	; () banked
  5393  001086  6F71               	movwf	___llmod@divisor& (0+255),b
  5394  001088  0E00               	movlw	0
  5395  00108A  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  5396  00108C  0E00               	movlw	0
  5397  00108E  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  5398  001090  0E00               	movlw	0
  5399  001092  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  5400  001094  EC9D  F01A         	call	___llmod	;wreg free
  5401  001098  0100               	movlb	0	; () banked
  5402  00109A  516D               	movf	?___llmod& (0+255),w,b
  5403  00109C  116E               	iorwf	(?___llmod+1)& (0+255),w,b
  5404  00109E  116F               	iorwf	(?___llmod+2)& (0+255),w,b
  5405  0010A0  1170               	iorwf	(?___llmod+3)& (0+255),w,b
  5406  0010A2  A4D8               	btfss	status,2,c
  5407  0010A4  D021               	goto	l2449
  5408  0010A6  D7C1               	goto	l2444
  5409  0010A8                     l2437:
  5410                           
  5411                           ;doprnt.c: 1112: if(prec <= 12)
  5412                           
  5413                           ; BSR set to: 0
  5414  0010A8  0101               	movlb	1	; () banked
  5415  0010AA  BFEF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  5416  0010AC  D006               	goto	u23340
  5417  0010AE  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  5418  0010B0  E11B               	bnz	l19405
  5419  0010B2  0E0D               	movlw	13
  5420  0010B4  5DEE               	subwf	sprintf@prec& (0+255),w,b
  5421  0010B6  B0D8               	btfsc	status,0,c
  5422  0010B8  D017               	goto	l2449
  5423  0010BA                     u23340:
  5424                           
  5425                           ; BSR set to: 1
  5426                           ;doprnt.c: 1113: fval += fround(prec);
  5427  0010BA  C1EB  F0B6         	movff	sprintf@fval,___ftadd@f1
  5428  0010BE  C1EC  F0B7         	movff	sprintf@fval+1,___ftadd@f1+1
  5429  0010C2  C1ED  F0B8         	movff	sprintf@fval+2,___ftadd@f1+2
  5430  0010C6  51EE               	movf	sprintf@prec& (0+255),w,b
  5431  0010C8  EC6D  F010         	call	_fround
  5432  0010CC  C0AC  F0B9         	movff	?_fround,___ftadd@f2
  5433  0010D0  C0AD  F0BA         	movff	?_fround+1,___ftadd@f2+1
  5434  0010D4  C0AE  F0BB         	movff	?_fround+2,___ftadd@f2+2
  5435  0010D8  ECB5  F012         	call	___ftadd	;wreg free
  5436  0010DC  C0B6  F1EB         	movff	?___ftadd,sprintf@fval
  5437  0010E0  C0B7  F1EC         	movff	?___ftadd+1,sprintf@fval+1
  5438  0010E4  C0B8  F1ED         	movff	?___ftadd+2,sprintf@fval+2
  5439  0010E8                     l2449:
  5440  0010E8                     l19405:
  5441                           
  5442                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5443  0010E8  0101               	movlb	1	; () banked
  5444  0010EA  BFE4               	btfsc	(sprintf@exp+1)& (0+255),7,b
  5445  0010EC  D006               	goto	u23350
  5446  0010EE  51E4               	movf	(sprintf@exp+1)& (0+255),w,b
  5447  0010F0  E121               	bnz	l19413
  5448  0010F2  0E0A               	movlw	10
  5449  0010F4  5DE3               	subwf	sprintf@exp& (0+255),w,b
  5450  0010F6  B0D8               	btfsc	status,0,c
  5451  0010F8  D01D               	goto	u23380
  5452  0010FA                     u23350:
  5453                           
  5454                           ; BSR set to: 1
  5455  0010FA  51EB               	movf	sprintf@fval& (0+255),w,b
  5456  0010FC  11EC               	iorwf	(sprintf@fval+1)& (0+255),w,b
  5457  0010FE  11ED               	iorwf	(sprintf@fval+2)& (0+255),w,b
  5458  001100  B4D8               	btfsc	status,2,c
  5459  001102  D059               	goto	l2450
  5460                           
  5461                           ; BSR set to: 1
  5462  001104  C1EB  F082         	movff	sprintf@fval,___fttol@f1
  5463  001108  C1EC  F083         	movff	sprintf@fval+1,___fttol@f1+1
  5464  00110C  C1ED  F084         	movff	sprintf@fval+2,___fttol@f1+2
  5465  001110  EC3B  F015         	call	___fttol	;wreg free
  5466  001114  0100               	movlb	0	; () banked
  5467  001116  5182               	movf	?___fttol& (0+255),w,b
  5468  001118  1183               	iorwf	(?___fttol+1)& (0+255),w,b
  5469  00111A  1184               	iorwf	(?___fttol+2)& (0+255),w,b
  5470  00111C  1185               	iorwf	(?___fttol+3)& (0+255),w,b
  5471  00111E  A4D8               	btfss	status,2,c
  5472  001120  D04A               	goto	l2450
  5473                           
  5474                           ; BSR set to: 0
  5475  001122  0101               	movlb	1	; () banked
  5476  001124  BFE4               	btfsc	(sprintf@exp+1)& (0+255),7,b
  5477  001126  D047               	goto	l2450
  5478  001128  51E4               	movf	(sprintf@exp+1)& (0+255),w,b
  5479  00112A  E104               	bnz	l19413
  5480  00112C  0E02               	movlw	2
  5481  00112E  5DE3               	subwf	sprintf@exp& (0+255),w,b
  5482  001130  A0D8               	btfss	status,0,c
  5483  001132  D041               	goto	l2450
  5484  001134                     u23380:
  5485  001134                     l19413:
  5486                           
  5487                           ; BSR set to: 1
  5488                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5489  001134  C1DF  F0C2         	movff	sprintf@tmpval,___ftge@ff1
  5490  001138  C1E0  F0C3         	movff	sprintf@tmpval+1,___ftge@ff1+1
  5491  00113C  C1E1  F0C4         	movff	sprintf@tmpval+2,___ftge@ff1+2
  5492  001140  0E70               	movlw	112
  5493  001142  0100               	movlb	0	; () banked
  5494  001144  6FC5               	movwf	___ftge@ff2& (0+255),b
  5495  001146  0E89               	movlw	137
  5496  001148  6FC6               	movwf	(___ftge@ff2+1)& (0+255),b
  5497  00114A  0E40               	movlw	64
  5498  00114C  6FC7               	movwf	(___ftge@ff2+2)& (0+255),b
  5499  00114E  EC98  F018         	call	___ftge	;wreg free
  5500  001152  0100               	movlb	0	; () banked
  5501  001154  B0D8               	btfsc	status,0,c
  5502  001156  D003               	goto	l2453
  5503                           
  5504                           ; BSR set to: 0
  5505                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5506  001158  0101               	movlb	1	; () banked
  5507  00115A  0EF7               	movlw	247
  5508  00115C  D002               	goto	L9
  5509  00115E                     l2453:
  5510                           
  5511                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5512                           
  5513                           ; BSR set to: 1
  5514  00115E  0101               	movlb	1	; () banked
  5515  001160  0EF8               	movlw	248
  5516  001162                     L9:
  5517  001162  27E3               	addwf	sprintf@exp& (0+255),f,b
  5518  001164  0EFF               	movlw	255
  5519  001166  23E4               	addwfc	(sprintf@exp+1)& (0+255),f,b
  5520                           
  5521                           ; BSR set to: 1
  5522                           ;doprnt.c: 1124: }
  5523                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5524                           
  5525                           ; BSR set to: 1
  5526  001168  51E3               	movf	sprintf@exp& (0+255),w,b
  5527  00116A  EC51  F00E         	call	_scale
  5528  00116E  C0AC  F1DF         	movff	?_scale,sprintf@tmpval
  5529  001172  C0AD  F1E0         	movff	?_scale+1,sprintf@tmpval+1
  5530  001176  C0AE  F1E1         	movff	?_scale+2,sprintf@tmpval+2
  5531                           
  5532                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5533  00117A  C1EB  F060         	movff	sprintf@fval,__tdiv_to_l_@f1
  5534  00117E  C1EC  F061         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  5535  001182  C1ED  F062         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  5536  001186  C1DF  F063         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  5537  00118A  C1E0  F064         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  5538  00118E  C1E1  F065         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  5539  001192  EC8C  F013         	call	__tdiv_to_l_	;wreg free
  5540  001196  C060  F1E7         	movff	?__tdiv_to_l_,sprintf@val
  5541  00119A  C061  F1E8         	movff	?__tdiv_to_l_+1,sprintf@val+1
  5542  00119E  C062  F1E9         	movff	?__tdiv_to_l_+2,sprintf@val+2
  5543  0011A2  C063  F1EA         	movff	?__tdiv_to_l_+3,sprintf@val+3
  5544                           
  5545                           ;doprnt.c: 1129: fval = 0.0;
  5546  0011A6  0E00               	movlw	0
  5547  0011A8  0101               	movlb	1	; () banked
  5548  0011AA  6FEB               	movwf	sprintf@fval& (0+255),b
  5549  0011AC  0E00               	movlw	0
  5550  0011AE  6FEC               	movwf	(sprintf@fval+1)& (0+255),b
  5551  0011B0  0E00               	movlw	0
  5552  0011B2  6FED               	movwf	(sprintf@fval+2)& (0+255),b
  5553                           
  5554                           ;doprnt.c: 1130: } else {
  5555  0011B4  D033               	goto	l2459
  5556  0011B6                     l2450:
  5557                           
  5558                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5559                           
  5560                           ; BSR set to: 1
  5561  0011B6  C1EB  F082         	movff	sprintf@fval,___fttol@f1
  5562  0011BA  C1EC  F083         	movff	sprintf@fval+1,___fttol@f1+1
  5563  0011BE  C1ED  F084         	movff	sprintf@fval+2,___fttol@f1+2
  5564  0011C2  EC3B  F015         	call	___fttol	;wreg free
  5565  0011C6  C082  F1E7         	movff	?___fttol,sprintf@val
  5566  0011CA  C083  F1E8         	movff	?___fttol+1,sprintf@val+1
  5567  0011CE  C084  F1E9         	movff	?___fttol+2,sprintf@val+2
  5568  0011D2  C085  F1EA         	movff	?___fttol+3,sprintf@val+3
  5569                           
  5570                           ;doprnt.c: 1132: fval -= (double)val;
  5571  0011D6  C1EB  F0C2         	movff	sprintf@fval,___ftsub@f1
  5572  0011DA  C1EC  F0C3         	movff	sprintf@fval+1,___ftsub@f1+1
  5573  0011DE  C1ED  F0C4         	movff	sprintf@fval+2,___ftsub@f1+2
  5574  0011E2  C1E7  F091         	movff	sprintf@val,___lltoft@c
  5575  0011E6  C1E8  F092         	movff	sprintf@val+1,___lltoft@c+1
  5576  0011EA  C1E9  F093         	movff	sprintf@val+2,___lltoft@c+2
  5577  0011EE  C1EA  F094         	movff	sprintf@val+3,___lltoft@c+3
  5578  0011F2  EC05  F01B         	call	___lltoft	;wreg free
  5579  0011F6  C091  F0C5         	movff	?___lltoft,___ftsub@f2
  5580  0011FA  C092  F0C6         	movff	?___lltoft+1,___ftsub@f2+1
  5581  0011FE  C093  F0C7         	movff	?___lltoft+2,___ftsub@f2+2
  5582  001202  EC08  F01C         	call	___ftsub	;wreg free
  5583  001206  C0C2  F1EB         	movff	?___ftsub,sprintf@fval
  5584  00120A  C0C3  F1EC         	movff	?___ftsub+1,sprintf@fval+1
  5585  00120E  C0C4  F1ED         	movff	?___ftsub+2,sprintf@fval+2
  5586                           
  5587                           ;doprnt.c: 1133: exp = 0;
  5588  001212  0E00               	movlw	0
  5589  001214  0101               	movlb	1	; () banked
  5590  001216  6FE4               	movwf	(sprintf@exp+1)& (0+255),b
  5591  001218  0E00               	movlw	0
  5592  00121A  6FE3               	movwf	sprintf@exp& (0+255),b
  5593  00121C                     l2459:
  5594                           
  5595                           ; BSR set to: 1
  5596                           ;doprnt.c: 1134: }
  5597                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5598                           
  5599                           ; BSR set to: 1
  5600  00121C  0E01               	movlw	1
  5601  00121E  6FF0               	movwf	sprintf@c& (0+255),b
  5602  001220                     l19433:
  5603                           
  5604                           ; BSR set to: 1
  5605  001220  0E0A               	movlw	10
  5606  001222  19F0               	xorwf	sprintf@c& (0+255),w,b
  5607  001224  B4D8               	btfsc	status,2,c
  5608  001226  D018               	goto	u23420
  5609                           
  5610                           ; BSR set to: 1
  5611                           ;doprnt.c: 1137: if(val < dpowers[c])
  5612                           
  5613                           ; BSR set to: 1
  5614                           
  5615                           ; BSR set to: 1
  5616  001228  51F0               	movf	sprintf@c& (0+255),w,b
  5617  00122A  0D04               	mullw	4
  5618  00122C  0E6F               	movlw	low _dpowers
  5619  00122E  24F3               	addwf	prodl,w,c
  5620  001230  6EF6               	movwf	tblptrl,c
  5621  001232  0EFB               	movlw	high _dpowers
  5622  001234  20F4               	addwfc	prodh,w,c
  5623  001236  6EF7               	movwf	tblptrh,c
  5624  001238                     	if	0	;There are less than 3 active tblptr bytes
  5625  001238                     	endif
  5626  001238  0009               	tblrd		*+
  5627  00123A  50F5               	movf	tablat,w,c
  5628  00123C  5DE7               	subwf	sprintf@val& (0+255),w,b
  5629  00123E  0009               	tblrd		*+
  5630  001240  50F5               	movf	tablat,w,c
  5631  001242  59E8               	subwfb	(sprintf@val+1)& (0+255),w,b
  5632  001244  0009               	tblrd		*+
  5633  001246  50F5               	movf	tablat,w,c
  5634  001248  59E9               	subwfb	(sprintf@val+2)& (0+255),w,b
  5635  00124A  0009               	tblrd		*+
  5636  00124C  50F5               	movf	tablat,w,c
  5637  00124E  59EA               	subwfb	(sprintf@val+3)& (0+255),w,b
  5638  001250  A0D8               	btfss	status,0,c
  5639  001252  D002               	goto	u23420
  5640                           
  5641                           ; BSR set to: 1
  5642                           
  5643                           ; BSR set to: 1
  5644                           
  5645                           ; BSR set to: 1
  5646                           ;doprnt.c: 1138: break;
  5647  001254  2BF0               	incf	sprintf@c& (0+255),f,b
  5648  001256  D7E4               	goto	l19433
  5649  001258                     u23420:
  5650                           
  5651                           ; BSR set to: 1
  5652                           ;doprnt.c: 1142: width -= prec + c + exp;
  5653                           
  5654                           ; BSR set to: 1
  5655  001258  C1F0  F0F6         	movff	sprintf@c,??_sprintf
  5656  00125C  0100               	movlb	0	; () banked
  5657  00125E  6BF7               	clrf	(??_sprintf+1)& (0+255),b
  5658  001260  BFF6               	btfsc	??_sprintf& (0+255),7,b
  5659  001262  07F7               	decf	(??_sprintf+1)& (0+255),f,b
  5660  001264  0101               	movlb	1	; () banked
  5661  001266  51EE               	movf	sprintf@prec& (0+255),w,b
  5662  001268  0100               	movlb	0	; () banked
  5663  00126A  27F6               	addwf	??_sprintf& (0+255),f,b
  5664  00126C  0101               	movlb	1	; () banked
  5665  00126E  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  5666  001270  0100               	movlb	0	; () banked
  5667  001272  23F7               	addwfc	(??_sprintf+1)& (0+255),f,b
  5668  001274  0101               	movlb	1	; () banked
  5669  001276  51E3               	movf	sprintf@exp& (0+255),w,b
  5670  001278  0100               	movlb	0	; () banked
  5671  00127A  27F6               	addwf	??_sprintf& (0+255),f,b
  5672  00127C  0101               	movlb	1	; () banked
  5673  00127E  51E4               	movf	(sprintf@exp+1)& (0+255),w,b
  5674  001280  0100               	movlb	0	; () banked
  5675  001282  23F7               	addwfc	(??_sprintf+1)& (0+255),f,b
  5676  001284  51F6               	movf	??_sprintf& (0+255),w,b
  5677  001286  0101               	movlb	1	; () banked
  5678  001288  5FE5               	subwf	sprintf@width& (0+255),f,b
  5679  00128A  0100               	movlb	0	; () banked
  5680  00128C  51F7               	movf	(??_sprintf+1)& (0+255),w,b
  5681  00128E  0101               	movlb	1	; () banked
  5682  001290  5BE6               	subwfb	(sprintf@width+1)& (0+255),f,b
  5683                           
  5684                           ; BSR set to: 1
  5685                           ;doprnt.c: 1143: if(
  5686                           ;doprnt.c: 1145: flag & 0x800 ||
  5687                           ;doprnt.c: 1147: prec)
  5688  001292  B7F2               	btfsc	(sprintf@flag+1)& (0+255),3,b
  5689  001294  D004               	goto	u23440
  5690                           
  5691                           ; BSR set to: 1
  5692  001296  51EE               	movf	sprintf@prec& (0+255),w,b
  5693  001298  11EF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5694  00129A  B4D8               	btfsc	status,2,c
  5695  00129C  D003               	goto	l2463
  5696  00129E                     u23440:
  5697                           
  5698                           ; BSR set to: 1
  5699                           ;doprnt.c: 1148: width--;
  5700                           
  5701                           ; BSR set to: 1
  5702  00129E  07E5               	decf	sprintf@width& (0+255),f,b
  5703  0012A0  A0D8               	btfss	status,0,c
  5704  0012A2  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  5705  0012A4                     l2463:
  5706                           
  5707                           ; BSR set to: 1
  5708                           ;doprnt.c: 1149: if(flag & 0x03)
  5709                           
  5710                           ; BSR set to: 1
  5711  0012A4  0E03               	movlw	3
  5712  0012A6  15F1               	andwf	sprintf@flag& (0+255),w,b
  5713  0012A8  0100               	movlb	0	; () banked
  5714  0012AA  6FF6               	movwf	??_sprintf& (0+255),b
  5715  0012AC  0E00               	movlw	0
  5716  0012AE  0101               	movlb	1	; () banked
  5717  0012B0  15F2               	andwf	(sprintf@flag+1)& (0+255),w,b
  5718  0012B2  0100               	movlb	0	; () banked
  5719  0012B4  6FF7               	movwf	(??_sprintf+1)& (0+255),b
  5720  0012B6  51F6               	movf	??_sprintf& (0+255),w,b
  5721  0012B8  11F7               	iorwf	(??_sprintf+1)& (0+255),w,b
  5722  0012BA  B4D8               	btfsc	status,2,c
  5723  0012BC  D004               	goto	l2466
  5724                           
  5725                           ; BSR set to: 0
  5726                           ;doprnt.c: 1150: width--;
  5727  0012BE  0101               	movlb	1	; () banked
  5728  0012C0  07E5               	decf	sprintf@width& (0+255),f,b
  5729  0012C2  A0D8               	btfss	status,0,c
  5730  0012C4  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  5731  0012C6                     l2466:
  5732                           
  5733                           ;doprnt.c: 1153: if(flag & 0x04) {
  5734                           
  5735                           ; BSR set to: 1
  5736  0012C6  0101               	movlb	1	; () banked
  5737  0012C8  A5F1               	btfss	sprintf@flag& (0+255),2,b
  5738  0012CA  D031               	goto	l2467
  5739                           
  5740                           ; BSR set to: 1
  5741                           ;doprnt.c: 1155: if(flag & 0x02)
  5742  0012CC  A3F1               	btfss	sprintf@flag& (0+255),1,b
  5743  0012CE  D011               	goto	l2468
  5744                           
  5745                           ; BSR set to: 1
  5746                           ;doprnt.c: 1159: ((*sp++ = (flag & 0x01 ? '-' : '+')));
  5747  0012D0  B1F1               	btfsc	sprintf@flag& (0+255),0,b
  5748  0012D2  D004               	goto	l2470
  5749                           
  5750                           ; BSR set to: 1
  5751  0012D4  0E00               	movlw	0
  5752  0012D6  6FCB               	movwf	(_sprintf$4953+1)& (0+255),b
  5753  0012D8  0E2B               	movlw	43
  5754  0012DA  D003               	goto	L10
  5755  0012DC                     l2470:
  5756                           
  5757                           ; BSR set to: 1
  5758                           
  5759                           ; BSR set to: 1
  5760  0012DC  0E00               	movlw	0
  5761  0012DE  6FCB               	movwf	(_sprintf$4953+1)& (0+255),b
  5762  0012E0  0E2D               	movlw	45
  5763  0012E2                     L10:
  5764  0012E2  6FCA               	movwf	_sprintf$4953& (0+255),b
  5765                           
  5766                           ; BSR set to: 1
  5767                           
  5768                           ; BSR set to: 1
  5769  0012E4  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  5770  0012E8  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  5771  0012EC  C1CA  FFDF         	movff	_sprintf$4953,indf2
  5772  0012F0  D008               	goto	l19473
  5773  0012F2                     l2468:
  5774                           
  5775                           ; BSR set to: 1
  5776                           ;doprnt.c: 1161: else
  5777                           ;doprnt.c: 1164: if(flag & 0x01)
  5778  0012F2  A1F1               	btfss	sprintf@flag& (0+255),0,b
  5779  0012F4  D014               	goto	l2475
  5780                           
  5781                           ; BSR set to: 1
  5782                           ;doprnt.c: 1165: ((*sp++ = (' ')));
  5783  0012F6  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  5784  0012FA  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  5785  0012FE  0E20               	movlw	32
  5786  001300  6EDF               	movwf	indf2,c
  5787  001302                     l19473:
  5788                           
  5789                           ; BSR set to: 1
  5790  001302  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  5791  001304  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  5792                           
  5793                           ; BSR set to: 1
  5794                           ;doprnt.c: 1168: while(width > 0) {
  5795                           
  5796                           ; BSR set to: 1
  5797  001306  D00B               	goto	l2475
  5798  001308                     l19475:
  5799                           
  5800                           ; BSR set to: 1
  5801                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  5802  001308  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  5803  00130C  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  5804  001310  0E30               	movlw	48
  5805  001312  6EDF               	movwf	indf2,c
  5806                           
  5807                           ; BSR set to: 1
  5808  001314  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  5809  001316  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  5810                           
  5811                           ; BSR set to: 1
  5812                           ;doprnt.c: 1170: width--;
  5813  001318  07E5               	decf	sprintf@width& (0+255),f,b
  5814  00131A  A0D8               	btfss	status,0,c
  5815  00131C  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  5816  00131E                     l2475:
  5817                           
  5818                           ; BSR set to: 1
  5819                           
  5820                           ; BSR set to: 1
  5821  00131E  BFE6               	btfsc	(sprintf@width+1)& (0+255),7,b
  5822  001320  D081               	goto	l2490
  5823  001322  51E6               	movf	(sprintf@width+1)& (0+255),w,b
  5824  001324  E1F1               	bnz	l19475
  5825  001326  05E5               	decf	sprintf@width& (0+255),w,b
  5826  001328  A0D8               	btfss	status,0,c
  5827  00132A  D07C               	goto	l2490
  5828  00132C  D7ED               	goto	l2476
  5829  00132E                     l2467:
  5830                           
  5831                           ; BSR set to: 1
  5832                           ;doprnt.c: 1175: {
  5833                           ;doprnt.c: 1177: if(!(flag & 0x08))
  5834  00132E  A7F1               	btfss	sprintf@flag& (0+255),3,b
  5835  001330  D00C               	goto	l2480
  5836  001332  D012               	goto	u23520
  5837  001334                     l19485:
  5838                           
  5839                           ; BSR set to: 1
  5840                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  5841  001334  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  5842  001338  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  5843  00133C  0E20               	movlw	32
  5844  00133E  6EDF               	movwf	indf2,c
  5845                           
  5846                           ; BSR set to: 1
  5847  001340  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  5848  001342  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  5849                           
  5850                           ; BSR set to: 1
  5851                           ;doprnt.c: 1182: width--;
  5852  001344  07E5               	decf	sprintf@width& (0+255),f,b
  5853  001346  A0D8               	btfss	status,0,c
  5854  001348  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  5855  00134A                     l2480:
  5856                           
  5857                           ; BSR set to: 1
  5858                           
  5859                           ; BSR set to: 1
  5860  00134A  BFE6               	btfsc	(sprintf@width+1)& (0+255),7,b
  5861  00134C  D005               	goto	u23520
  5862  00134E  51E6               	movf	(sprintf@width+1)& (0+255),w,b
  5863  001350  E1F1               	bnz	l19485
  5864  001352  05E5               	decf	sprintf@width& (0+255),w,b
  5865  001354  B0D8               	btfsc	status,0,c
  5866  001356  D7EE               	goto	l2481
  5867  001358                     u23520:
  5868                           
  5869                           ; BSR set to: 1
  5870                           ;doprnt.c: 1183: }
  5871                           ;doprnt.c: 1186: if(flag & 0x02)
  5872                           
  5873                           ; BSR set to: 1
  5874  001358  A3F1               	btfss	sprintf@flag& (0+255),1,b
  5875  00135A  D011               	goto	l2483
  5876                           
  5877                           ; BSR set to: 1
  5878                           ;doprnt.c: 1190: ((*sp++ = (flag & 0x01 ? '-' : '+')));
  5879  00135C  B1F1               	btfsc	sprintf@flag& (0+255),0,b
  5880  00135E  D004               	goto	l2485
  5881                           
  5882                           ; BSR set to: 1
  5883  001360  0E00               	movlw	0
  5884  001362  6FCD               	movwf	(_sprintf$4954+1)& (0+255),b
  5885  001364  0E2B               	movlw	43
  5886  001366  D003               	goto	L11
  5887  001368                     l2485:
  5888                           
  5889                           ; BSR set to: 1
  5890                           
  5891                           ; BSR set to: 1
  5892  001368  0E00               	movlw	0
  5893  00136A  6FCD               	movwf	(_sprintf$4954+1)& (0+255),b
  5894  00136C  0E2D               	movlw	45
  5895  00136E                     L11:
  5896  00136E  6FCC               	movwf	_sprintf$4954& (0+255),b
  5897                           
  5898                           ; BSR set to: 1
  5899                           
  5900                           ; BSR set to: 1
  5901  001370  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  5902  001374  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  5903  001378  C1CC  FFDF         	movff	_sprintf$4954,indf2
  5904  00137C  D051               	goto	L20
  5905  00137E                     l2483:
  5906                           
  5907                           ; BSR set to: 1
  5908                           ;doprnt.c: 1192: else if(flag & 0x01)
  5909  00137E  A1F1               	btfss	sprintf@flag& (0+255),0,b
  5910  001380  D051               	goto	l2490
  5911                           
  5912                           ; BSR set to: 1
  5913                           ;doprnt.c: 1193: ((*sp++ = (' ')));
  5914  001382  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  5915  001386  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  5916  00138A  0E20               	movlw	32
  5917  00138C  D048               	goto	L12
  5918  00138E                     
  5919                           ; BSR set to: 1
  5920                           ;doprnt.c: 1200: {
  5921                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5922                           
  5923                           ; BSR set to: 1
  5924  00138E  C1E7  F060         	movff	sprintf@val,___lldiv@dividend
  5925  001392  C1E8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  5926  001396  C1E9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  5927  00139A  C1EA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  5928  00139E  51F0               	movf	sprintf@c& (0+255),w,b
  5929  0013A0  0D04               	mullw	4
  5930  0013A2  0E6F               	movlw	low _dpowers
  5931  0013A4  24F3               	addwf	prodl,w,c
  5932  0013A6  6EF6               	movwf	tblptrl,c
  5933  0013A8  0EFB               	movlw	high _dpowers
  5934  0013AA  20F4               	addwfc	prodh,w,c
  5935  0013AC  6EF7               	movwf	tblptrh,c
  5936  0013AE                     	if	0	;There are less than 3 active tblptr bytes
  5937  0013AE                     	endif
  5938  0013AE  0009               	tblrd		*+
  5939  0013B0  CFF5 F064          	movff	tablat,___lldiv@divisor
  5940  0013B4  0009               	tblrd		*+
  5941  0013B6  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  5942  0013BA  0009               	tblrd		*+
  5943  0013BC  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  5944  0013C0  000A               	tblrd		*-
  5945  0013C2  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  5946  0013C6  EC6D  F019         	call	___lldiv	;wreg free
  5947  0013CA  C060  F1DF         	movff	?___lldiv,sprintf@tmpval
  5948  0013CE  C061  F1E0         	movff	?___lldiv+1,sprintf@tmpval+1
  5949  0013D2  C062  F1E1         	movff	?___lldiv+2,sprintf@tmpval+2
  5950  0013D6  C063  F1E2         	movff	?___lldiv+3,sprintf@tmpval+3
  5951                           
  5952                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5953  0013DA  C1DF  F06D         	movff	sprintf@tmpval,___llmod@dividend
  5954  0013DE  C1E0  F06E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  5955  0013E2  C1E1  F06F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  5956  0013E6  C1E2  F070         	movff	sprintf@tmpval+3,___llmod@dividend+3
  5957  0013EA  0E0A               	movlw	10
  5958  0013EC  0100               	movlb	0	; () banked
  5959  0013EE  6F71               	movwf	___llmod@divisor& (0+255),b
  5960  0013F0  0E00               	movlw	0
  5961  0013F2  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  5962  0013F4  0E00               	movlw	0
  5963  0013F6  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  5964  0013F8  0E00               	movlw	0
  5965  0013FA  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  5966  0013FC  EC9D  F01A         	call	___llmod	;wreg free
  5967  001400  C06D  F1DF         	movff	?___llmod,sprintf@tmpval
  5968  001404  C06E  F1E0         	movff	?___llmod+1,sprintf@tmpval+1
  5969  001408  C06F  F1E1         	movff	?___llmod+2,sprintf@tmpval+2
  5970  00140C  C070  F1E2         	movff	?___llmod+3,sprintf@tmpval+3
  5971                           
  5972                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  5973  001410  0101               	movlb	1	; () banked
  5974  001412  51DF               	movf	sprintf@tmpval& (0+255),w,b
  5975  001414  0F30               	addlw	48
  5976  001416  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  5977  00141A  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  5978  00141E                     L12:
  5979  00141E  6EDF               	movwf	indf2,c
  5980  001420                     L20:
  5981                           
  5982                           ; BSR set to: 1
  5983  001420  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  5984  001422  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  5985  001424                     l2490:
  5986                           
  5987                           ; BSR set to: 1
  5988                           
  5989                           ; BSR set to: 1
  5990  001424  07F0               	decf	sprintf@c& (0+255),f,b
  5991  001426  29F0               	incf	sprintf@c& (0+255),w,b
  5992  001428  B4D8               	btfsc	status,2,c
  5993  00142A  D00C               	goto	l2493
  5994  00142C  D7B0               	goto	l2491
  5995  00142E                     l19517:
  5996                           
  5997                           ; BSR set to: 1
  5998                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  5999  00142E  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  6000  001432  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  6001  001436  0E30               	movlw	48
  6002  001438  6EDF               	movwf	indf2,c
  6003                           
  6004                           ; BSR set to: 1
  6005  00143A  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  6006  00143C  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  6007                           
  6008                           ; BSR set to: 1
  6009                           ;doprnt.c: 1209: exp--;
  6010  00143E  07E3               	decf	sprintf@exp& (0+255),f,b
  6011  001440  A0D8               	btfss	status,0,c
  6012  001442  07E4               	decf	(sprintf@exp+1)& (0+255),f,b
  6013  001444                     l2493:
  6014                           
  6015                           ; BSR set to: 1
  6016                           
  6017                           ; BSR set to: 1
  6018  001444  BFE4               	btfsc	(sprintf@exp+1)& (0+255),7,b
  6019  001446  D005               	goto	u23570
  6020  001448  51E4               	movf	(sprintf@exp+1)& (0+255),w,b
  6021  00144A  E1F1               	bnz	l19517
  6022  00144C  05E3               	decf	sprintf@exp& (0+255),w,b
  6023  00144E  B0D8               	btfsc	status,0,c
  6024  001450  D7EE               	goto	l2494
  6025  001452                     u23570:
  6026                           
  6027                           ; BSR set to: 1
  6028                           ;doprnt.c: 1210: }
  6029                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6030                           
  6031                           ; BSR set to: 1
  6032  001452  BFEF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  6033  001454  D009               	goto	l2496
  6034  001456  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  6035  001458  E104               	bnz	u23580
  6036  00145A  0E09               	movlw	9
  6037  00145C  5DEE               	subwf	sprintf@prec& (0+255),w,b
  6038  00145E  A0D8               	btfss	status,0,c
  6039  001460  D003               	goto	l2496
  6040  001462                     u23580:
  6041                           
  6042                           ; BSR set to: 1
  6043                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6044  001462  0E08               	movlw	8
  6045  001464  6FF0               	movwf	sprintf@c& (0+255),b
  6046  001466  D002               	goto	l2497
  6047  001468                     l2496:
  6048                           
  6049                           ; BSR set to: 1
  6050                           ;doprnt.c: 1213: else
  6051                           ;doprnt.c: 1214: c = prec;
  6052  001468  C1EE  F1F0         	movff	sprintf@prec,sprintf@c
  6053  00146C                     l2497:
  6054                           
  6055                           ; BSR set to: 1
  6056                           ;doprnt.c: 1215: prec -= c;
  6057                           
  6058                           ; BSR set to: 1
  6059  00146C  51F0               	movf	sprintf@c& (0+255),w,b
  6060  00146E  5FEE               	subwf	sprintf@prec& (0+255),f,b
  6061  001470  0E00               	movlw	0
  6062  001472  BFF0               	btfsc	sprintf@c& (0+255),7,b
  6063  001474  0EFF               	movlw	255
  6064  001476  5BEF               	subwfb	(sprintf@prec+1)& (0+255),f,b
  6065                           
  6066                           ; BSR set to: 1
  6067                           ;doprnt.c: 1217: if(c || flag & 0x800)
  6068  001478  51F0               	movf	sprintf@c& (0+255),w,b
  6069  00147A  A4D8               	btfss	status,2,c
  6070  00147C  D002               	goto	u23600
  6071                           
  6072                           ; BSR set to: 1
  6073  00147E  A7F2               	btfss	(sprintf@flag+1)& (0+255),3,b
  6074  001480  D008               	goto	l2498
  6075  001482                     u23600:
  6076                           
  6077                           ; BSR set to: 1
  6078                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  6079                           
  6080                           ; BSR set to: 1
  6081  001482  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  6082  001486  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  6083  00148A  0E2E               	movlw	46
  6084  00148C  6EDF               	movwf	indf2,c
  6085                           
  6086                           ; BSR set to: 1
  6087  00148E  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  6088  001490  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  6089  001492                     l2498:
  6090                           
  6091                           ; BSR set to: 1
  6092                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6093                           
  6094                           ; BSR set to: 1
  6095  001492  51F0               	movf	sprintf@c& (0+255),w,b
  6096  001494  EC51  F00E         	call	_scale
  6097  001498  C0AC  F1C0         	movff	?_scale,_sprintf$5669
  6098  00149C  C0AD  F1C1         	movff	?_scale+1,_sprintf$5669+1
  6099  0014A0  C0AE  F1C2         	movff	?_scale+2,_sprintf$5669+2
  6100                           
  6101                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6102  0014A4  C1EB  F0A0         	movff	sprintf@fval,___ftmul@f2
  6103  0014A8  C1EC  F0A1         	movff	sprintf@fval+1,___ftmul@f2+1
  6104  0014AC  C1ED  F0A2         	movff	sprintf@fval+2,___ftmul@f2+2
  6105  0014B0  C1C0  F09D         	movff	_sprintf$5669,___ftmul@f1
  6106  0014B4  C1C1  F09E         	movff	_sprintf$5669+1,___ftmul@f1+1
  6107  0014B8  C1C2  F09F         	movff	_sprintf$5669+2,___ftmul@f1+2
  6108  0014BC  ECB7  F015         	call	___ftmul	;wreg free
  6109  0014C0  C09D  F082         	movff	?___ftmul,___fttol@f1
  6110  0014C4  C09E  F083         	movff	?___ftmul+1,___fttol@f1+1
  6111  0014C8  C09F  F084         	movff	?___ftmul+2,___fttol@f1+2
  6112  0014CC  EC3B  F015         	call	___fttol	;wreg free
  6113  0014D0  C082  F1E7         	movff	?___fttol,sprintf@val
  6114  0014D4  C083  F1E8         	movff	?___fttol+1,sprintf@val+1
  6115  0014D8  C084  F1E9         	movff	?___fttol+2,sprintf@val+2
  6116  0014DC  C085  F1EA         	movff	?___fttol+3,sprintf@val+3
  6117                           
  6118                           ;doprnt.c: 1228: while(c--) {
  6119  0014E0  D072               	goto	l2501
  6120  0014E2                     
  6121                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6122  0014E2  C1E7  F060         	movff	sprintf@val,___lldiv@dividend
  6123  0014E6  C1E8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  6124  0014EA  C1E9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  6125  0014EE  C1EA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  6126  0014F2  0101               	movlb	1	; () banked
  6127  0014F4  51F0               	movf	sprintf@c& (0+255),w,b
  6128  0014F6  0D04               	mullw	4
  6129  0014F8  0E6F               	movlw	low _dpowers
  6130  0014FA  24F3               	addwf	prodl,w,c
  6131  0014FC  6EF6               	movwf	tblptrl,c
  6132  0014FE  0EFB               	movlw	high _dpowers
  6133  001500  20F4               	addwfc	prodh,w,c
  6134  001502  6EF7               	movwf	tblptrh,c
  6135  001504                     	if	0	;There are less than 3 active tblptr bytes
  6136  001504                     	endif
  6137  001504  0009               	tblrd		*+
  6138  001506  CFF5 F064          	movff	tablat,___lldiv@divisor
  6139  00150A  0009               	tblrd		*+
  6140  00150C  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  6141  001510  0009               	tblrd		*+
  6142  001512  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  6143  001516  000A               	tblrd		*-
  6144  001518  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  6145  00151C  EC6D  F019         	call	___lldiv	;wreg free
  6146  001520  C060  F1DF         	movff	?___lldiv,sprintf@tmpval
  6147  001524  C061  F1E0         	movff	?___lldiv+1,sprintf@tmpval+1
  6148  001528  C062  F1E1         	movff	?___lldiv+2,sprintf@tmpval+2
  6149  00152C  C063  F1E2         	movff	?___lldiv+3,sprintf@tmpval+3
  6150                           
  6151                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6152  001530  C1DF  F06D         	movff	sprintf@tmpval,___llmod@dividend
  6153  001534  C1E0  F06E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  6154  001538  C1E1  F06F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  6155  00153C  C1E2  F070         	movff	sprintf@tmpval+3,___llmod@dividend+3
  6156  001540  0E0A               	movlw	10
  6157  001542  0100               	movlb	0	; () banked
  6158  001544  6F71               	movwf	___llmod@divisor& (0+255),b
  6159  001546  0E00               	movlw	0
  6160  001548  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  6161  00154A  0E00               	movlw	0
  6162  00154C  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  6163  00154E  0E00               	movlw	0
  6164  001550  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  6165  001552  EC9D  F01A         	call	___llmod	;wreg free
  6166  001556  C06D  F1DF         	movff	?___llmod,sprintf@tmpval
  6167  00155A  C06E  F1E0         	movff	?___llmod+1,sprintf@tmpval+1
  6168  00155E  C06F  F1E1         	movff	?___llmod+2,sprintf@tmpval+2
  6169  001562  C070  F1E2         	movff	?___llmod+3,sprintf@tmpval+3
  6170                           
  6171                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  6172  001566  0101               	movlb	1	; () banked
  6173  001568  51DF               	movf	sprintf@tmpval& (0+255),w,b
  6174  00156A  0F30               	addlw	48
  6175  00156C  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  6176  001570  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  6177  001574  6EDF               	movwf	indf2,c
  6178                           
  6179                           ; BSR set to: 1
  6180  001576  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  6181  001578  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  6182                           
  6183                           ; BSR set to: 1
  6184                           ;doprnt.c: 1232: val %= dpowers[c];
  6185  00157A  C1E7  F06D         	movff	sprintf@val,___llmod@dividend
  6186  00157E  C1E8  F06E         	movff	sprintf@val+1,___llmod@dividend+1
  6187  001582  C1E9  F06F         	movff	sprintf@val+2,___llmod@dividend+2
  6188  001586  C1EA  F070         	movff	sprintf@val+3,___llmod@dividend+3
  6189  00158A  51F0               	movf	sprintf@c& (0+255),w,b
  6190  00158C  0D04               	mullw	4
  6191  00158E  0E6F               	movlw	low _dpowers
  6192  001590  24F3               	addwf	prodl,w,c
  6193  001592  6EF6               	movwf	tblptrl,c
  6194  001594  0EFB               	movlw	high _dpowers
  6195  001596  20F4               	addwfc	prodh,w,c
  6196  001598  6EF7               	movwf	tblptrh,c
  6197  00159A                     	if	0	;There are less than 3 active tblptr bytes
  6198  00159A                     	endif
  6199  00159A  0009               	tblrd		*+
  6200  00159C  CFF5 F071          	movff	tablat,___llmod@divisor
  6201  0015A0  0009               	tblrd		*+
  6202  0015A2  CFF5 F072          	movff	tablat,___llmod@divisor+1
  6203  0015A6  0009               	tblrd		*+
  6204  0015A8  CFF5 F073          	movff	tablat,___llmod@divisor+2
  6205  0015AC  000A               	tblrd		*-
  6206  0015AE  CFF5 F074          	movff	tablat,___llmod@divisor+3
  6207  0015B2  EC9D  F01A         	call	___llmod	;wreg free
  6208  0015B6  C06D  F1E7         	movff	?___llmod,sprintf@val
  6209  0015BA  C06E  F1E8         	movff	?___llmod+1,sprintf@val+1
  6210  0015BE  C06F  F1E9         	movff	?___llmod+2,sprintf@val+2
  6211  0015C2  C070  F1EA         	movff	?___llmod+3,sprintf@val+3
  6212  0015C6                     l2501:
  6213  0015C6  0101               	movlb	1	; () banked
  6214  0015C8  07F0               	decf	sprintf@c& (0+255),f,b
  6215  0015CA  29F0               	incf	sprintf@c& (0+255),w,b
  6216  0015CC  B4D8               	btfsc	status,2,c
  6217  0015CE  D00C               	goto	l2504
  6218  0015D0  D788               	goto	l2502
  6219  0015D2                     
  6220                           ; BSR set to: 1
  6221                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  6222                           
  6223                           ; BSR set to: 1
  6224  0015D2  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  6225  0015D6  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  6226  0015DA  0E30               	movlw	48
  6227  0015DC  6EDF               	movwf	indf2,c
  6228                           
  6229                           ; BSR set to: 1
  6230  0015DE  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  6231  0015E0  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  6232                           
  6233                           ; BSR set to: 1
  6234                           ;doprnt.c: 1237: prec--;
  6235  0015E2  07EE               	decf	sprintf@prec& (0+255),f,b
  6236  0015E4  A0D8               	btfss	status,0,c
  6237  0015E6  07EF               	decf	(sprintf@prec+1)& (0+255),f,b
  6238  0015E8                     l2504:
  6239                           
  6240                           ; BSR set to: 1
  6241                           
  6242                           ; BSR set to: 1
  6243  0015E8  51EE               	movf	sprintf@prec& (0+255),w,b
  6244  0015EA  11EF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  6245  0015EC  A4D8               	btfss	status,2,c
  6246  0015EE  D7F1               	goto	l2505
  6247                           
  6248                           ; BSR set to: 1
  6249                           ;doprnt.c: 1238: }
  6250                           ;doprnt.c: 1240: if((flag & 0x08) && width > 0)
  6251  0015F0  B7F1               	btfsc	sprintf@flag& (0+255),3,b
  6252                           
  6253                           ; BSR set to: 1
  6254  0015F2  BFE6               	btfsc	(sprintf@width+1)& (0+255),7,b
  6255  0015F4  D342               	goto	u24110
  6256  0015F6  51E6               	movf	(sprintf@width+1)& (0+255),w,b
  6257  0015F8  E103               	bnz	l19565
  6258  0015FA  05E5               	decf	sprintf@width& (0+255),w,b
  6259  0015FC  A0D8               	btfss	status,0,c
  6260  0015FE  D33D               	goto	u24110
  6261  001600                     u23640:
  6262  001600                     l19565:
  6263                           
  6264                           ; BSR set to: 1
  6265                           ;doprnt.c: 1242: ((*sp++ = (' ')));
  6266  001600  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  6267  001604  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  6268  001608  0E20               	movlw	32
  6269  00160A  6EDF               	movwf	indf2,c
  6270                           
  6271                           ; BSR set to: 1
  6272  00160C  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  6273  00160E  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  6274                           
  6275                           ; BSR set to: 1
  6276                           ;doprnt.c: 1243: while(--width);
  6277  001610  07E5               	decf	sprintf@width& (0+255),f,b
  6278  001612  A0D8               	btfss	status,0,c
  6279  001614  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  6280  001616  51E5               	movf	sprintf@width& (0+255),w,b
  6281  001618  11E6               	iorwf	(sprintf@width+1)& (0+255),w,b
  6282  00161A  B4D8               	btfsc	status,2,c
  6283  00161C  D32E               	goto	u24110
  6284  00161E  D7F0               	goto	u23640
  6285  001620                     l2362:
  6286                           
  6287                           ; BSR set to: 1
  6288                           ;doprnt.c: 1246: }
  6289                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  6290                           
  6291                           ; BSR set to: 1
  6292  001620  0EC0               	movlw	192
  6293  001622  15F1               	andwf	sprintf@flag& (0+255),w,b
  6294  001624  0100               	movlb	0	; () banked
  6295  001626  6FF6               	movwf	??_sprintf& (0+255),b
  6296  001628  0E00               	movlw	0
  6297  00162A  0101               	movlb	1	; () banked
  6298  00162C  15F2               	andwf	(sprintf@flag+1)& (0+255),w,b
  6299  00162E  0100               	movlb	0	; () banked
  6300  001630  6FF7               	movwf	(??_sprintf+1)& (0+255),b
  6301  001632  51F6               	movf	??_sprintf& (0+255),w,b
  6302  001634  11F7               	iorwf	(??_sprintf+1)& (0+255),w,b
  6303  001636  A4D8               	btfss	status,2,c
  6304  001638  D01F               	goto	l2510
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;doprnt.c: 1253: {
  6308                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6309  00163A  C1DD  FFD9         	movff	sprintf@ap,fsr2l
  6310  00163E  C1DE  FFDA         	movff	sprintf@ap+1,fsr2h
  6311  001642  CFDE F1E7          	movff	postinc2,sprintf@val
  6312  001646  CFDD F1E8          	movff	postdec2,sprintf@val+1
  6313  00164A  0101               	movlb	1	; () banked
  6314  00164C  0E00               	movlw	0
  6315  00164E  BFE8               	btfsc	(sprintf@val+1)& (0+255),7,b
  6316  001650  0EFF               	movlw	-1
  6317  001652  6FE9               	movwf	(sprintf@val+2)& (0+255),b
  6318  001654  6FEA               	movwf	(sprintf@val+3)& (0+255),b
  6319                           
  6320                           ; BSR set to: 1
  6321  001656  0E02               	movlw	2
  6322  001658  27DD               	addwf	sprintf@ap& (0+255),f,b
  6323  00165A  0E00               	movlw	0
  6324  00165C  23DE               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6325                           
  6326                           ; BSR set to: 1
  6327                           ;doprnt.c: 1261: if((long)val < 0) {
  6328  00165E  AFEA               	btfss	(sprintf@val+3)& (0+255),7,b
  6329  001660  D01E               	goto	l2512
  6330                           
  6331                           ; BSR set to: 1
  6332                           ;doprnt.c: 1262: flag |= 0x03;
  6333  001662  0E03               	movlw	3
  6334  001664  13F1               	iorwf	sprintf@flag& (0+255),f,b
  6335                           
  6336                           ; BSR set to: 1
  6337                           ;doprnt.c: 1263: val = -val;
  6338  001666  1FEA               	comf	(sprintf@val+3)& (0+255),f,b
  6339  001668  1FE9               	comf	(sprintf@val+2)& (0+255),f,b
  6340  00166A  1FE8               	comf	(sprintf@val+1)& (0+255),f,b
  6341  00166C  6DE7               	negf	sprintf@val& (0+255),b
  6342  00166E  0E00               	movlw	0
  6343  001670  23E8               	addwfc	(sprintf@val+1)& (0+255),f,b
  6344  001672  23E9               	addwfc	(sprintf@val+2)& (0+255),f,b
  6345  001674  23EA               	addwfc	(sprintf@val+3)& (0+255),f,b
  6346                           
  6347                           ; BSR set to: 1
  6348                           ;doprnt.c: 1264: }
  6349                           ;doprnt.c: 1266: }
  6350  001676  D013               	goto	l2512
  6351  001678                     l2510:
  6352                           
  6353                           ;doprnt.c: 1268: else
  6354                           ;doprnt.c: 1273: {
  6355                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6356                           
  6357                           ; BSR set to: 1
  6358  001678  C1DD  FFD9         	movff	sprintf@ap,fsr2l
  6359  00167C  C1DE  FFDA         	movff	sprintf@ap+1,fsr2h
  6360  001680  CFDE F0F6          	movff	postinc2,??_sprintf
  6361  001684  CFDD F0F7          	movff	postdec2,??_sprintf+1
  6362  001688  C0F6  F1E7         	movff	??_sprintf,sprintf@val
  6363  00168C  C0F7  F1E8         	movff	??_sprintf+1,sprintf@val+1
  6364  001690  0101               	movlb	1	; () banked
  6365  001692  6BE9               	clrf	(sprintf@val+2)& (0+255),b
  6366  001694  6BEA               	clrf	(sprintf@val+3)& (0+255),b
  6367                           
  6368                           ; BSR set to: 1
  6369  001696  0E02               	movlw	2
  6370  001698  27DD               	addwf	sprintf@ap& (0+255),f,b
  6371  00169A  0E00               	movlw	0
  6372  00169C  23DE               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6373  00169E                     l2512:
  6374                           
  6375                           ; BSR set to: 1
  6376                           ;doprnt.c: 1287: }
  6377                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6378                           
  6379                           ; BSR set to: 1
  6380  00169E  51EE               	movf	sprintf@prec& (0+255),w,b
  6381  0016A0  11EF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  6382  0016A2  A4D8               	btfss	status,2,c
  6383  0016A4  D063               	goto	l2514
  6384                           
  6385                           ; BSR set to: 1
  6386  0016A6  51E7               	movf	sprintf@val& (0+255),w,b
  6387  0016A8  11E8               	iorwf	(sprintf@val+1)& (0+255),w,b
  6388  0016AA  11E9               	iorwf	(sprintf@val+2)& (0+255),w,b
  6389  0016AC  11EA               	iorwf	(sprintf@val+3)& (0+255),w,b
  6390  0016AE  A4D8               	btfss	status,2,c
  6391  0016B0  D05D               	goto	l2514
  6392                           
  6393                           ; BSR set to: 1
  6394                           ;doprnt.c: 1291: prec++;
  6395  0016B2  4BEE               	infsnz	sprintf@prec& (0+255),f,b
  6396  0016B4  2BEF               	incf	(sprintf@prec+1)& (0+255),f,b
  6397                           
  6398                           ; BSR set to: 1
  6399                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  6400  0016B6  D05A               	goto	l2514
  6401  0016B8                     
  6402                           ; BSR set to: 1
  6403                           ;doprnt.c: 1302: case 0xC0:
  6404                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6405                           
  6406                           ; BSR set to: 1
  6407                           
  6408                           ; BSR set to: 1
  6409  0016B8  0E01               	movlw	1
  6410  0016BA  6FF0               	movwf	sprintf@c& (0+255),b
  6411  0016BC                     l19595:
  6412                           
  6413                           ; BSR set to: 1
  6414  0016BC  0E0A               	movlw	10
  6415  0016BE  19F0               	xorwf	sprintf@c& (0+255),w,b
  6416  0016C0  B4D8               	btfsc	status,2,c
  6417  0016C2  D062               	goto	l2520
  6418                           
  6419                           ; BSR set to: 1
  6420                           ;doprnt.c: 1306: if(val < dpowers[c])
  6421                           
  6422                           ; BSR set to: 1
  6423                           
  6424                           ; BSR set to: 1
  6425  0016C4  51F0               	movf	sprintf@c& (0+255),w,b
  6426  0016C6  0D04               	mullw	4
  6427  0016C8  0E6F               	movlw	low _dpowers
  6428  0016CA  24F3               	addwf	prodl,w,c
  6429  0016CC  6EF6               	movwf	tblptrl,c
  6430  0016CE  0EFB               	movlw	high _dpowers
  6431  0016D0  20F4               	addwfc	prodh,w,c
  6432  0016D2  6EF7               	movwf	tblptrh,c
  6433  0016D4                     	if	0	;There are less than 3 active tblptr bytes
  6434  0016D4                     	endif
  6435  0016D4  0009               	tblrd		*+
  6436  0016D6  50F5               	movf	tablat,w,c
  6437  0016D8  5DE7               	subwf	sprintf@val& (0+255),w,b
  6438  0016DA  0009               	tblrd		*+
  6439  0016DC  50F5               	movf	tablat,w,c
  6440  0016DE  59E8               	subwfb	(sprintf@val+1)& (0+255),w,b
  6441  0016E0  0009               	tblrd		*+
  6442  0016E2  50F5               	movf	tablat,w,c
  6443  0016E4  59E9               	subwfb	(sprintf@val+2)& (0+255),w,b
  6444  0016E6  0009               	tblrd		*+
  6445  0016E8  50F5               	movf	tablat,w,c
  6446  0016EA  59EA               	subwfb	(sprintf@val+3)& (0+255),w,b
  6447  0016EC  A0D8               	btfss	status,0,c
  6448  0016EE  D04C               	goto	l2520
  6449                           
  6450                           ; BSR set to: 1
  6451                           
  6452                           ; BSR set to: 1
  6453                           
  6454                           ; BSR set to: 1
  6455                           ;doprnt.c: 1307: break;
  6456  0016F0  2BF0               	incf	sprintf@c& (0+255),f,b
  6457  0016F2  D7E4               	goto	l19595
  6458  0016F4                     
  6459                           ; BSR set to: 1
  6460                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6461                           
  6462                           ; BSR set to: 1
  6463  0016F4  0E01               	movlw	1
  6464  0016F6  6FF0               	movwf	sprintf@c& (0+255),b
  6465  0016F8                     l19609:
  6466                           
  6467                           ; BSR set to: 1
  6468  0016F8  0E08               	movlw	8
  6469  0016FA  19F0               	xorwf	sprintf@c& (0+255),w,b
  6470  0016FC  B4D8               	btfsc	status,2,c
  6471  0016FE  D044               	goto	l2520
  6472                           
  6473                           ; BSR set to: 1
  6474                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6475                           
  6476                           ; BSR set to: 1
  6477                           
  6478                           ; BSR set to: 1
  6479  001700  51F0               	movf	sprintf@c& (0+255),w,b
  6480  001702  0D04               	mullw	4
  6481  001704  0EE5               	movlw	low _hexpowers
  6482  001706  24F3               	addwf	prodl,w,c
  6483  001708  6EF6               	movwf	tblptrl,c
  6484  00170A  0EFB               	movlw	high _hexpowers
  6485  00170C  20F4               	addwfc	prodh,w,c
  6486  00170E  6EF7               	movwf	tblptrh,c
  6487  001710                     	if	0	;There are less than 3 active tblptr bytes
  6488  001710                     	endif
  6489  001710  0009               	tblrd		*+
  6490  001712  50F5               	movf	tablat,w,c
  6491  001714  5DE7               	subwf	sprintf@val& (0+255),w,b
  6492  001716  0009               	tblrd		*+
  6493  001718  50F5               	movf	tablat,w,c
  6494  00171A  59E8               	subwfb	(sprintf@val+1)& (0+255),w,b
  6495  00171C  0009               	tblrd		*+
  6496  00171E  50F5               	movf	tablat,w,c
  6497  001720  59E9               	subwfb	(sprintf@val+2)& (0+255),w,b
  6498  001722  0009               	tblrd		*+
  6499  001724  50F5               	movf	tablat,w,c
  6500  001726  59EA               	subwfb	(sprintf@val+3)& (0+255),w,b
  6501  001728  A0D8               	btfss	status,0,c
  6502  00172A  D02E               	goto	l2520
  6503                           
  6504                           ; BSR set to: 1
  6505                           
  6506                           ; BSR set to: 1
  6507                           
  6508                           ; BSR set to: 1
  6509                           ;doprnt.c: 1318: break;
  6510  00172C  2BF0               	incf	sprintf@c& (0+255),f,b
  6511  00172E  D7E4               	goto	l19609
  6512  001730                     
  6513                           ; BSR set to: 1
  6514                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  6515                           
  6516                           ; BSR set to: 1
  6517  001730  0E01               	movlw	1
  6518  001732  6FF0               	movwf	sprintf@c& (0+255),b
  6519  001734                     l19623:
  6520                           
  6521                           ; BSR set to: 1
  6522  001734  0E0C               	movlw	12
  6523  001736  19F0               	xorwf	sprintf@c& (0+255),w,b
  6524  001738  B4D8               	btfsc	status,2,c
  6525  00173A  D026               	goto	l2520
  6526                           
  6527                           ; BSR set to: 1
  6528                           ;doprnt.c: 1329: if(val < octpowers[c])
  6529                           
  6530                           ; BSR set to: 1
  6531                           
  6532                           ; BSR set to: 1
  6533  00173C  51F0               	movf	sprintf@c& (0+255),w,b
  6534  00173E  0D04               	mullw	4
  6535  001740  0E3F               	movlw	low _octpowers
  6536  001742  24F3               	addwf	prodl,w,c
  6537  001744  6EF6               	movwf	tblptrl,c
  6538  001746  0EFB               	movlw	high _octpowers
  6539  001748  20F4               	addwfc	prodh,w,c
  6540  00174A  6EF7               	movwf	tblptrh,c
  6541  00174C                     	if	0	;There are less than 3 active tblptr bytes
  6542  00174C                     	endif
  6543  00174C  0009               	tblrd		*+
  6544  00174E  50F5               	movf	tablat,w,c
  6545  001750  5DE7               	subwf	sprintf@val& (0+255),w,b
  6546  001752  0009               	tblrd		*+
  6547  001754  50F5               	movf	tablat,w,c
  6548  001756  59E8               	subwfb	(sprintf@val+1)& (0+255),w,b
  6549  001758  0009               	tblrd		*+
  6550  00175A  50F5               	movf	tablat,w,c
  6551  00175C  59E9               	subwfb	(sprintf@val+2)& (0+255),w,b
  6552  00175E  0009               	tblrd		*+
  6553  001760  50F5               	movf	tablat,w,c
  6554  001762  59EA               	subwfb	(sprintf@val+3)& (0+255),w,b
  6555  001764  A0D8               	btfss	status,0,c
  6556  001766  D010               	goto	l2520
  6557                           
  6558                           ; BSR set to: 1
  6559                           
  6560                           ; BSR set to: 1
  6561                           
  6562                           ; BSR set to: 1
  6563                           ;doprnt.c: 1330: break;
  6564  001768  2BF0               	incf	sprintf@c& (0+255),f,b
  6565  00176A  D7E4               	goto	l19623
  6566  00176C                     l2514:
  6567                           
  6568                           ; BSR set to: 1
  6569                           
  6570                           ; BSR set to: 1
  6571  00176C  51F1               	movf	sprintf@flag& (0+255),w,b
  6572  00176E  0BC0               	andlw	192
  6573                           
  6574                           ; Switch size 1, requested type "space"
  6575                           ; Number of cases is 4, Range of values is 0 to 192
  6576                           ; switch strategies available:
  6577                           ; Name         Instructions Cycles
  6578                           ; simple_byte           13     7 (average)
  6579                           ;	Chosen strategy is simple_byte
  6580  001770  0A00               	xorlw	0	; case 0
  6581  001772  B4D8               	btfsc	status,2,c
  6582  001774  D7A1               	goto	l2515
  6583  001776  0A40               	xorlw	64	; case 64
  6584  001778  B4D8               	btfsc	status,2,c
  6585  00177A  D7DA               	goto	l2525
  6586  00177C  0AC0               	xorlw	192	; case 128
  6587  00177E  B4D8               	btfsc	status,2,c
  6588  001780  D7B9               	goto	l2521
  6589  001782  0A40               	xorlw	64	; case 192
  6590  001784  B4D8               	btfsc	status,2,c
  6591  001786  D798               	goto	l2515
  6592  001788                     l2520:
  6593                           
  6594                           ; BSR set to: 1
  6595                           ;doprnt.c: 1339: if(c < prec)
  6596                           
  6597                           ; BSR set to: 1
  6598  001788  0E80               	movlw	128
  6599  00178A  BFF0               	btfsc	sprintf@c& (0+255),7,b
  6600  00178C  0E7F               	movlw	127
  6601  00178E  0100               	movlb	0	; () banked
  6602  001790  6FF6               	movwf	??_sprintf& (0+255),b
  6603  001792  0101               	movlb	1	; () banked
  6604  001794  51EE               	movf	sprintf@prec& (0+255),w,b
  6605  001796  5DF0               	subwf	sprintf@c& (0+255),w,b
  6606  001798  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  6607  00179A  0A80               	xorlw	128
  6608  00179C  0100               	movlb	0	; () banked
  6609  00179E  59F6               	subwfb	??_sprintf& (0+255),w,b
  6610  0017A0  B0D8               	btfsc	status,0,c
  6611  0017A2  D003               	goto	l2529
  6612                           
  6613                           ; BSR set to: 0
  6614                           ;doprnt.c: 1340: c = prec;
  6615  0017A4  C1EE  F1F0         	movff	sprintf@prec,sprintf@c
  6616  0017A8  D015               	goto	l2531
  6617  0017AA                     l2529:
  6618                           
  6619                           ; BSR set to: 0
  6620                           ;doprnt.c: 1341: else if(prec < c)
  6621                           
  6622                           ; BSR set to: 0
  6623  0017AA  0101               	movlb	1	; () banked
  6624  0017AC  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  6625  0017AE  0A80               	xorlw	128
  6626  0017B0  0100               	movlb	0	; () banked
  6627  0017B2  6FF6               	movwf	??_sprintf& (0+255),b
  6628  0017B4  0101               	movlb	1	; () banked
  6629  0017B6  51F0               	movf	sprintf@c& (0+255),w,b
  6630  0017B8  5DEE               	subwf	sprintf@prec& (0+255),w,b
  6631  0017BA  0E80               	movlw	128
  6632  0017BC  BFF0               	btfsc	sprintf@c& (0+255),7,b
  6633  0017BE  0E7F               	movlw	127
  6634  0017C0  0100               	movlb	0	; () banked
  6635  0017C2  59F6               	subwfb	??_sprintf& (0+255),w,b
  6636  0017C4  B0D8               	btfsc	status,0,c
  6637  0017C6  D006               	goto	l2531
  6638                           
  6639                           ; BSR set to: 0
  6640                           ;doprnt.c: 1342: prec = c;
  6641  0017C8  0101               	movlb	1	; () banked
  6642  0017CA  51F0               	movf	sprintf@c& (0+255),w,b
  6643  0017CC  6FEE               	movwf	sprintf@prec& (0+255),b
  6644  0017CE  6BEF               	clrf	(sprintf@prec+1)& (0+255),b
  6645  0017D0  BFEE               	btfsc	sprintf@prec& (0+255),7,b
  6646  0017D2  07EF               	decf	(sprintf@prec+1)& (0+255),f,b
  6647  0017D4                     l2531:
  6648                           
  6649                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6650                           
  6651                           ; BSR set to: 1
  6652                           
  6653                           ; BSR set to: 1
  6654  0017D4  0101               	movlb	1	; () banked
  6655  0017D6  51E5               	movf	sprintf@width& (0+255),w,b
  6656  0017D8  11E6               	iorwf	(sprintf@width+1)& (0+255),w,b
  6657  0017DA  B4D8               	btfsc	status,2,c
  6658  0017DC  D011               	goto	l2532
  6659                           
  6660                           ; BSR set to: 1
  6661  0017DE  0E03               	movlw	3
  6662  0017E0  15F1               	andwf	sprintf@flag& (0+255),w,b
  6663  0017E2  0100               	movlb	0	; () banked
  6664  0017E4  6FF6               	movwf	??_sprintf& (0+255),b
  6665  0017E6  0E00               	movlw	0
  6666  0017E8  0101               	movlb	1	; () banked
  6667  0017EA  15F2               	andwf	(sprintf@flag+1)& (0+255),w,b
  6668  0017EC  0100               	movlb	0	; () banked
  6669  0017EE  6FF7               	movwf	(??_sprintf+1)& (0+255),b
  6670  0017F0  51F6               	movf	??_sprintf& (0+255),w,b
  6671  0017F2  11F7               	iorwf	(??_sprintf+1)& (0+255),w,b
  6672  0017F4  B4D8               	btfsc	status,2,c
  6673  0017F6  D004               	goto	l2532
  6674                           
  6675                           ; BSR set to: 0
  6676                           ;doprnt.c: 1346: width--;
  6677  0017F8  0101               	movlb	1	; () banked
  6678  0017FA  07E5               	decf	sprintf@width& (0+255),f,b
  6679  0017FC  A0D8               	btfss	status,0,c
  6680  0017FE  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  6681  001800                     l2532:
  6682                           
  6683                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6684                           
  6685                           ; BSR set to: 1
  6686  001800  0101               	movlb	1	; () banked
  6687  001802  ADF2               	btfss	(sprintf@flag+1)& (0+255),6,b
  6688  001804  D018               	goto	l2535
  6689                           
  6690                           ; BSR set to: 1
  6691                           ;doprnt.c: 1349: if(width > prec)
  6692  001806  51E5               	movf	sprintf@width& (0+255),w,b
  6693  001808  5DEE               	subwf	sprintf@prec& (0+255),w,b
  6694  00180A  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  6695  00180C  0A80               	xorlw	128
  6696  00180E  0100               	movlb	0	; () banked
  6697  001810  6FF6               	movwf	??_sprintf& (0+255),b
  6698  001812  0101               	movlb	1	; () banked
  6699  001814  51E6               	movf	(sprintf@width+1)& (0+255),w,b
  6700  001816  0A80               	xorlw	128
  6701  001818  0100               	movlb	0	; () banked
  6702  00181A  59F6               	subwfb	??_sprintf& (0+255),w,b
  6703  00181C  B0D8               	btfsc	status,0,c
  6704  00181E  D006               	goto	l2534
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;doprnt.c: 1350: width -= prec;
  6708  001820  0101               	movlb	1	; () banked
  6709  001822  51EE               	movf	sprintf@prec& (0+255),w,b
  6710  001824  5FE5               	subwf	sprintf@width& (0+255),f,b
  6711  001826  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  6712  001828  5BE6               	subwfb	(sprintf@width+1)& (0+255),f,b
  6713  00182A  D005               	goto	l2535
  6714  00182C                     l2534:
  6715                           
  6716                           ;doprnt.c: 1351: else
  6717                           ;doprnt.c: 1352: width = 0;
  6718                           
  6719                           ; BSR set to: 1
  6720  00182C  0E00               	movlw	0
  6721  00182E  0101               	movlb	1	; () banked
  6722  001830  6FE6               	movwf	(sprintf@width+1)& (0+255),b
  6723  001832  0E00               	movlw	0
  6724  001834  6FE5               	movwf	sprintf@width& (0+255),b
  6725  001836                     l2535:
  6726                           
  6727                           ; BSR set to: 1
  6728                           ;doprnt.c: 1353: }
  6729                           ;doprnt.c: 1357: if((flag & (
  6730                           ;doprnt.c: 1359: 0x04|
  6731                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  6732                           
  6733                           ; BSR set to: 1
  6734                           
  6735                           ; BSR set to: 1
  6736  001836  0EC4               	movlw	196
  6737  001838  0100               	movlb	0	; () banked
  6738  00183A  6FF6               	movwf	??_sprintf& (0+255),b
  6739  00183C  0E08               	movlw	8
  6740  00183E  6FF7               	movwf	(??_sprintf+1)& (0+255),b
  6741  001840  C1F1  F0F8         	movff	sprintf@flag,??_sprintf+2
  6742  001844  C1F2  F0F9         	movff	sprintf@flag+1,??_sprintf+3
  6743  001848  51F6               	movf	??_sprintf& (0+255),w,b
  6744  00184A  17F8               	andwf	(??_sprintf+2)& (0+255),f,b
  6745  00184C  51F7               	movf	(??_sprintf+1)& (0+255),w,b
  6746  00184E  17F9               	andwf	(??_sprintf+3)& (0+255),f,b
  6747  001850  0E40               	movlw	64
  6748  001852  19F8               	xorwf	(??_sprintf+2)& (0+255),w,b
  6749  001854  E10D               	bnz	l19667
  6750  001856  0E08               	movlw	8
  6751  001858  19F9               	xorwf	(??_sprintf+3)& (0+255),w,b
  6752  00185A  A4D8               	btfss	status,2,c
  6753  00185C  D009               	goto	l2536
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;doprnt.c: 1362: if(width)
  6757  00185E  0101               	movlb	1	; () banked
  6758  001860  51E5               	movf	sprintf@width& (0+255),w,b
  6759  001862  11E6               	iorwf	(sprintf@width+1)& (0+255),w,b
  6760  001864  B4D8               	btfsc	status,2,c
  6761  001866  D02A               	goto	l2541
  6762                           
  6763                           ; BSR set to: 1
  6764                           ;doprnt.c: 1363: width--;
  6765  001868  07E5               	decf	sprintf@width& (0+255),f,b
  6766  00186A  A0D8               	btfss	status,0,c
  6767  00186C  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  6768                           
  6769                           ; BSR set to: 1
  6770                           ;doprnt.c: 1364: } else
  6771  00186E  D026               	goto	l2541
  6772  001870                     l2536:
  6773  001870                     l19667:
  6774                           
  6775                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  6776  001870  0EC0               	movlw	192
  6777  001872  0100               	movlb	0	; () banked
  6778  001874  6FF6               	movwf	??_sprintf& (0+255),b
  6779  001876  0E08               	movlw	8
  6780  001878  6FF7               	movwf	(??_sprintf+1)& (0+255),b
  6781  00187A  C1F1  F0F8         	movff	sprintf@flag,??_sprintf+2
  6782  00187E  C1F2  F0F9         	movff	sprintf@flag+1,??_sprintf+3
  6783  001882  51F6               	movf	??_sprintf& (0+255),w,b
  6784  001884  17F8               	andwf	(??_sprintf+2)& (0+255),f,b
  6785  001886  51F7               	movf	(??_sprintf+1)& (0+255),w,b
  6786  001888  17F9               	andwf	(??_sprintf+3)& (0+255),f,b
  6787  00188A  0E80               	movlw	128
  6788  00188C  19F8               	xorwf	(??_sprintf+2)& (0+255),w,b
  6789  00188E  E116               	bnz	l19675
  6790  001890  0E08               	movlw	8
  6791  001892  19F9               	xorwf	(??_sprintf+3)& (0+255),w,b
  6792  001894  A4D8               	btfss	status,2,c
  6793  001896  D012               	goto	l2541
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;doprnt.c: 1372: if(width > 2)
  6797  001898  0101               	movlb	1	; () banked
  6798  00189A  BFE6               	btfsc	(sprintf@width+1)& (0+255),7,b
  6799  00189C  D00B               	goto	l2540
  6800  00189E  51E6               	movf	(sprintf@width+1)& (0+255),w,b
  6801  0018A0  E104               	bnz	u23880
  6802  0018A2  0E03               	movlw	3
  6803  0018A4  5DE5               	subwf	sprintf@width& (0+255),w,b
  6804  0018A6  A0D8               	btfss	status,0,c
  6805  0018A8  D005               	goto	l2540
  6806  0018AA                     u23880:
  6807                           
  6808                           ; BSR set to: 1
  6809                           ;doprnt.c: 1373: width -= 2;
  6810  0018AA  0EFE               	movlw	254
  6811  0018AC  27E5               	addwf	sprintf@width& (0+255),f,b
  6812  0018AE  0EFF               	movlw	255
  6813  0018B0  23E6               	addwfc	(sprintf@width+1)& (0+255),f,b
  6814  0018B2  D004               	goto	l2541
  6815  0018B4                     l2540:
  6816                           
  6817                           ; BSR set to: 1
  6818                           ;doprnt.c: 1374: else
  6819                           ;doprnt.c: 1375: width = 0;
  6820                           
  6821                           ; BSR set to: 1
  6822  0018B4  0E00               	movlw	0
  6823  0018B6  6FE6               	movwf	(sprintf@width+1)& (0+255),b
  6824  0018B8  0E00               	movlw	0
  6825  0018BA  6FE5               	movwf	sprintf@width& (0+255),b
  6826  0018BC                     l2541:
  6827  0018BC                     l19675:
  6828                           
  6829                           ;doprnt.c: 1376: }
  6830                           ;doprnt.c: 1381: if(width > c)
  6831  0018BC  0E80               	movlw	128
  6832  0018BE  0101               	movlb	1	; () banked
  6833  0018C0  BFF0               	btfsc	sprintf@c& (0+255),7,b
  6834  0018C2  0E7F               	movlw	127
  6835  0018C4  0100               	movlb	0	; () banked
  6836  0018C6  6FF6               	movwf	??_sprintf& (0+255),b
  6837  0018C8  0101               	movlb	1	; () banked
  6838  0018CA  51E5               	movf	sprintf@width& (0+255),w,b
  6839  0018CC  5DF0               	subwf	sprintf@c& (0+255),w,b
  6840  0018CE  51E6               	movf	(sprintf@width+1)& (0+255),w,b
  6841  0018D0  0A80               	xorlw	128
  6842  0018D2  0100               	movlb	0	; () banked
  6843  0018D4  59F6               	subwfb	??_sprintf& (0+255),w,b
  6844  0018D6  B0D8               	btfsc	status,0,c
  6845  0018D8  D008               	goto	l2542
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;doprnt.c: 1382: width -= c;
  6849  0018DA  0101               	movlb	1	; () banked
  6850  0018DC  51F0               	movf	sprintf@c& (0+255),w,b
  6851  0018DE  5FE5               	subwf	sprintf@width& (0+255),f,b
  6852  0018E0  0E00               	movlw	0
  6853  0018E2  BFF0               	btfsc	sprintf@c& (0+255),7,b
  6854  0018E4  0EFF               	movlw	255
  6855  0018E6  5BE6               	subwfb	(sprintf@width+1)& (0+255),f,b
  6856  0018E8  D005               	goto	l2543
  6857  0018EA                     l2542:
  6858                           
  6859                           ;doprnt.c: 1383: else
  6860                           ;doprnt.c: 1384: width = 0;
  6861                           
  6862                           ; BSR set to: 1
  6863  0018EA  0E00               	movlw	0
  6864  0018EC  0101               	movlb	1	; () banked
  6865  0018EE  6FE6               	movwf	(sprintf@width+1)& (0+255),b
  6866  0018F0  0E00               	movlw	0
  6867  0018F2  6FE5               	movwf	sprintf@width& (0+255),b
  6868  0018F4                     l2543:
  6869                           
  6870                           ; BSR set to: 1
  6871                           ;doprnt.c: 1387: if(flag & 0x04) {
  6872                           
  6873                           ; BSR set to: 1
  6874  0018F4  A5F1               	btfss	sprintf@flag& (0+255),2,b
  6875  0018F6  D05C               	goto	l2544
  6876                           
  6877                           ; BSR set to: 1
  6878                           ;doprnt.c: 1389: if(flag & 0x02)
  6879  0018F8  A3F1               	btfss	sprintf@flag& (0+255),1,b
  6880  0018FA  D011               	goto	l2545
  6881                           
  6882                           ; BSR set to: 1
  6883                           ;doprnt.c: 1390: ((*sp++ = (flag & 0x01 ? '-' : '+')));
  6884  0018FC  B1F1               	btfsc	sprintf@flag& (0+255),0,b
  6885  0018FE  D004               	goto	l2547
  6886                           
  6887                           ; BSR set to: 1
  6888  001900  0E00               	movlw	0
  6889  001902  6FCF               	movwf	(_sprintf$4955+1)& (0+255),b
  6890  001904  0E2B               	movlw	43
  6891  001906  D003               	goto	L13
  6892  001908                     l2547:
  6893                           
  6894                           ; BSR set to: 1
  6895                           
  6896                           ; BSR set to: 1
  6897  001908  0E00               	movlw	0
  6898  00190A  6FCF               	movwf	(_sprintf$4955+1)& (0+255),b
  6899  00190C  0E2D               	movlw	45
  6900  00190E                     L13:
  6901  00190E  6FCE               	movwf	_sprintf$4955& (0+255),b
  6902                           
  6903                           ; BSR set to: 1
  6904                           
  6905                           ; BSR set to: 1
  6906  001910  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  6907  001914  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  6908  001918  C1CE  FFDF         	movff	_sprintf$4955,indf2
  6909  00191C  D036               	goto	l19713
  6910  00191E                     l2545:
  6911                           
  6912                           ; BSR set to: 1
  6913                           ;doprnt.c: 1396: else
  6914                           ;doprnt.c: 1399: if(flag & 0x01)
  6915  00191E  A1F1               	btfss	sprintf@flag& (0+255),0,b
  6916  001920  D007               	goto	l2551
  6917                           
  6918                           ; BSR set to: 1
  6919                           ;doprnt.c: 1400: ((*sp++ = (' ')));
  6920  001922  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  6921  001926  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  6922  00192A  0E20               	movlw	32
  6923  00192C  6EDF               	movwf	indf2,c
  6924  00192E  D02D               	goto	l19713
  6925  001930                     l2551:
  6926                           
  6927                           ; BSR set to: 1
  6928                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  6929                           
  6930                           ; BSR set to: 1
  6931  001930  0EC0               	movlw	192
  6932  001932  0100               	movlb	0	; () banked
  6933  001934  6FF6               	movwf	??_sprintf& (0+255),b
  6934  001936  0E08               	movlw	8
  6935  001938  6FF7               	movwf	(??_sprintf+1)& (0+255),b
  6936  00193A  C1F1  F0F8         	movff	sprintf@flag,??_sprintf+2
  6937  00193E  C1F2  F0F9         	movff	sprintf@flag+1,??_sprintf+3
  6938  001942  51F6               	movf	??_sprintf& (0+255),w,b
  6939  001944  17F8               	andwf	(??_sprintf+2)& (0+255),f,b
  6940  001946  51F7               	movf	(??_sprintf+1)& (0+255),w,b
  6941  001948  17F9               	andwf	(??_sprintf+3)& (0+255),f,b
  6942  00194A  0E80               	movlw	128
  6943  00194C  19F8               	xorwf	(??_sprintf+2)& (0+255),w,b
  6944  00194E  E11F               	bnz	l19715
  6945  001950  0E08               	movlw	8
  6946  001952  19F9               	xorwf	(??_sprintf+3)& (0+255),w,b
  6947  001954  A4D8               	btfss	status,2,c
  6948  001956  D01B               	goto	l2553
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;doprnt.c: 1404: ((*sp++ = ('0')));
  6952  001958  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  6953  00195C  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  6954  001960  0E30               	movlw	48
  6955  001962  6EDF               	movwf	indf2,c
  6956                           
  6957                           ; BSR set to: 0
  6958  001964  0101               	movlb	1	; () banked
  6959  001966  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  6960  001968  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  6961                           
  6962                           ; BSR set to: 1
  6963                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  6964  00196A  BBF1               	btfsc	sprintf@flag& (0+255),5,b
  6965  00196C  D004               	goto	l2555
  6966                           
  6967                           ; BSR set to: 1
  6968  00196E  0E00               	movlw	0
  6969  001970  6FD1               	movwf	(_sprintf$4956+1)& (0+255),b
  6970  001972  0E78               	movlw	120
  6971  001974  D003               	goto	L14
  6972  001976                     l2555:
  6973                           
  6974                           ; BSR set to: 1
  6975                           
  6976                           ; BSR set to: 1
  6977  001976  0E00               	movlw	0
  6978  001978  6FD1               	movwf	(_sprintf$4956+1)& (0+255),b
  6979  00197A  0E58               	movlw	88
  6980  00197C                     L14:
  6981  00197C  6FD0               	movwf	_sprintf$4956& (0+255),b
  6982                           
  6983                           ; BSR set to: 1
  6984                           
  6985                           ; BSR set to: 1
  6986  00197E  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  6987  001982  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  6988  001986  C1D0  FFDF         	movff	_sprintf$4956,indf2
  6989  00198A                     l19713:
  6990                           
  6991                           ; BSR set to: 1
  6992  00198A  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  6993  00198C  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  6994  00198E                     l2553:
  6995  00198E                     l19715:
  6996                           
  6997                           ;doprnt.c: 1412: }
  6998                           ;doprnt.c: 1415: if(width)
  6999  00198E  0101               	movlb	1	; () banked
  7000  001990  51E5               	movf	sprintf@width& (0+255),w,b
  7001  001992  11E6               	iorwf	(sprintf@width+1)& (0+255),w,b
  7002  001994  B4D8               	btfsc	status,2,c
  7003  001996  D151               	goto	l2579
  7004                           
  7005                           ; BSR set to: 1
  7006                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  7007                           
  7008                           ; BSR set to: 1
  7009                           
  7010                           ;doprnt.c: 1416: do
  7011  001998  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  7012  00199C  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  7013  0019A0  0E30               	movlw	48
  7014  0019A2  6EDF               	movwf	indf2,c
  7015                           
  7016                           ; BSR set to: 1
  7017  0019A4  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  7018  0019A6  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  7019                           
  7020                           ; BSR set to: 1
  7021                           ;doprnt.c: 1418: while(--width);
  7022  0019A8  07E5               	decf	sprintf@width& (0+255),f,b
  7023  0019AA  A0D8               	btfss	status,0,c
  7024  0019AC  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  7025  0019AE  D7F0               	goto	L21
  7026  0019B0                     l2544:
  7027                           
  7028                           ; BSR set to: 1
  7029                           ;doprnt.c: 1422: {
  7030                           ;doprnt.c: 1424: if(width
  7031                           ;doprnt.c: 1426: && !(flag & 0x08)
  7032                           ;doprnt.c: 1428: )
  7033                           
  7034                           ; BSR set to: 1
  7035  0019B0  51E5               	movf	sprintf@width& (0+255),w,b
  7036  0019B2  11E6               	iorwf	(sprintf@width+1)& (0+255),w,b
  7037  0019B4  A4D8               	btfss	status,2,c
  7038                           
  7039                           ; BSR set to: 1
  7040  0019B6  B7F1               	btfsc	sprintf@flag& (0+255),3,b
  7041  0019B8  D00F               	goto	u24000
  7042  0019BA                     u23990:
  7043                           
  7044                           ; BSR set to: 1
  7045                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  7046                           
  7047                           ; BSR set to: 1
  7048                           
  7049                           ;doprnt.c: 1429: do
  7050  0019BA  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  7051  0019BE  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  7052  0019C2  0E20               	movlw	32
  7053  0019C4  6EDF               	movwf	indf2,c
  7054                           
  7055                           ; BSR set to: 1
  7056  0019C6  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  7057  0019C8  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  7058                           
  7059                           ; BSR set to: 1
  7060                           ;doprnt.c: 1431: while(--width);
  7061  0019CA  07E5               	decf	sprintf@width& (0+255),f,b
  7062  0019CC  A0D8               	btfss	status,0,c
  7063  0019CE  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  7064  0019D0  51E5               	movf	sprintf@width& (0+255),w,b
  7065  0019D2  11E6               	iorwf	(sprintf@width+1)& (0+255),w,b
  7066  0019D4  A4D8               	btfss	status,2,c
  7067  0019D6  D7F1               	goto	u23990
  7068  0019D8                     u24000:
  7069                           
  7070                           ; BSR set to: 1
  7071                           ;doprnt.c: 1434: if(flag & 0x02)
  7072                           
  7073                           ; BSR set to: 1
  7074  0019D8  A3F1               	btfss	sprintf@flag& (0+255),1,b
  7075  0019DA  D011               	goto	l2565
  7076                           
  7077                           ; BSR set to: 1
  7078                           ;doprnt.c: 1435: ((*sp++ = (flag & 0x01 ? '-' : '+')));
  7079  0019DC  B1F1               	btfsc	sprintf@flag& (0+255),0,b
  7080  0019DE  D004               	goto	l2567
  7081                           
  7082                           ; BSR set to: 1
  7083  0019E0  0E00               	movlw	0
  7084  0019E2  6FD3               	movwf	(_sprintf$4957+1)& (0+255),b
  7085  0019E4  0E2B               	movlw	43
  7086  0019E6  D003               	goto	L15
  7087  0019E8                     l2567:
  7088                           
  7089                           ; BSR set to: 1
  7090                           
  7091                           ; BSR set to: 1
  7092  0019E8  0E00               	movlw	0
  7093  0019EA  6FD3               	movwf	(_sprintf$4957+1)& (0+255),b
  7094  0019EC  0E2D               	movlw	45
  7095  0019EE                     L15:
  7096  0019EE  6FD2               	movwf	_sprintf$4957& (0+255),b
  7097                           
  7098                           ; BSR set to: 1
  7099                           
  7100                           ; BSR set to: 1
  7101  0019F0  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  7102  0019F4  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  7103  0019F8  C1D2  FFDF         	movff	_sprintf$4957,indf2
  7104  0019FC  D008               	goto	l19745
  7105  0019FE                     l2565:
  7106                           
  7107                           ; BSR set to: 1
  7108                           ;doprnt.c: 1443: else if(flag & 0x01)
  7109  0019FE  A1F1               	btfss	sprintf@flag& (0+255),0,b
  7110  001A00  D008               	goto	l2571
  7111                           
  7112                           ; BSR set to: 1
  7113                           ;doprnt.c: 1444: ((*sp++ = (' ')));
  7114  001A02  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  7115  001A06  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  7116  001A0A  0E20               	movlw	32
  7117  001A0C  6EDF               	movwf	indf2,c
  7118  001A0E                     l19745:
  7119                           
  7120                           ; BSR set to: 1
  7121  001A0E  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  7122  001A10  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  7123  001A12                     l2571:
  7124                           
  7125                           ; BSR set to: 1
  7126                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  7127                           
  7128                           ; BSR set to: 1
  7129                           
  7130                           ; BSR set to: 1
  7131  001A12  0EC0               	movlw	192
  7132  001A14  0100               	movlb	0	; () banked
  7133  001A16  6FF6               	movwf	??_sprintf& (0+255),b
  7134  001A18  0E08               	movlw	8
  7135  001A1A  6FF7               	movwf	(??_sprintf+1)& (0+255),b
  7136  001A1C  C1F1  F0F8         	movff	sprintf@flag,??_sprintf+2
  7137  001A20  C1F2  F0F9         	movff	sprintf@flag+1,??_sprintf+3
  7138  001A24  51F6               	movf	??_sprintf& (0+255),w,b
  7139  001A26  17F8               	andwf	(??_sprintf+2)& (0+255),f,b
  7140  001A28  51F7               	movf	(??_sprintf+1)& (0+255),w,b
  7141  001A2A  17F9               	andwf	(??_sprintf+3)& (0+255),f,b
  7142  001A2C  0E40               	movlw	64
  7143  001A2E  19F8               	xorwf	(??_sprintf+2)& (0+255),w,b
  7144  001A30  E10B               	bnz	l19753
  7145  001A32  0E08               	movlw	8
  7146  001A34  19F9               	xorwf	(??_sprintf+3)& (0+255),w,b
  7147  001A36  A4D8               	btfss	status,2,c
  7148  001A38  D007               	goto	l2572
  7149                           
  7150                           ; BSR set to: 0
  7151                           ;doprnt.c: 1449: ((*sp++ = ('0')));
  7152  001A3A  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  7153  001A3E  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  7154  001A42  0E30               	movlw	48
  7155  001A44  6EDF               	movwf	indf2,c
  7156  001A46  D0F6               	goto	l19789
  7157  001A48                     l2572:
  7158  001A48                     l19753:
  7159                           
  7160                           ;doprnt.c: 1450: else
  7161                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  7162  001A48  0EC0               	movlw	192
  7163  001A4A  0100               	movlb	0	; () banked
  7164  001A4C  6FF6               	movwf	??_sprintf& (0+255),b
  7165  001A4E  0E08               	movlw	8
  7166  001A50  6FF7               	movwf	(??_sprintf+1)& (0+255),b
  7167  001A52  C1F1  F0F8         	movff	sprintf@flag,??_sprintf+2
  7168  001A56  C1F2  F0F9         	movff	sprintf@flag+1,??_sprintf+3
  7169  001A5A  51F6               	movf	??_sprintf& (0+255),w,b
  7170  001A5C  17F8               	andwf	(??_sprintf+2)& (0+255),f,b
  7171  001A5E  51F7               	movf	(??_sprintf+1)& (0+255),w,b
  7172  001A60  17F9               	andwf	(??_sprintf+3)& (0+255),f,b
  7173  001A62  0E80               	movlw	128
  7174  001A64  19F8               	xorwf	(??_sprintf+2)& (0+255),w,b
  7175  001A66  E103               	bnz	u24051
  7176  001A68  0E08               	movlw	8
  7177  001A6A  19F9               	xorwf	(??_sprintf+3)& (0+255),w,b
  7178  001A6C  A4D8               	btfss	status,2,c
  7179  001A6E                     u24051:
  7180  001A6E  D0E5               	goto	l2579
  7181                           
  7182                           ; BSR set to: 0
  7183                           ;doprnt.c: 1458: ((*sp++ = ('0')));
  7184  001A70  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  7185  001A74  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  7186  001A78  0E30               	movlw	48
  7187  001A7A  6EDF               	movwf	indf2,c
  7188                           
  7189                           ; BSR set to: 0
  7190  001A7C  0101               	movlb	1	; () banked
  7191  001A7E  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  7192  001A80  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  7193                           
  7194                           ; BSR set to: 1
  7195                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  7196  001A82  BBF1               	btfsc	sprintf@flag& (0+255),5,b
  7197  001A84  D004               	goto	l2576
  7198                           
  7199                           ; BSR set to: 1
  7200  001A86  0E00               	movlw	0
  7201  001A88  6FD5               	movwf	(_sprintf$4958+1)& (0+255),b
  7202  001A8A  0E78               	movlw	120
  7203  001A8C  D003               	goto	L16
  7204  001A8E                     l2576:
  7205                           
  7206                           ; BSR set to: 1
  7207                           
  7208                           ; BSR set to: 1
  7209  001A8E  0E00               	movlw	0
  7210  001A90  6FD5               	movwf	(_sprintf$4958+1)& (0+255),b
  7211  001A92  0E58               	movlw	88
  7212  001A94                     L16:
  7213  001A94  6FD4               	movwf	_sprintf$4958& (0+255),b
  7214                           
  7215                           ; BSR set to: 1
  7216                           
  7217                           ; BSR set to: 1
  7218  001A96  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  7219  001A9A  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  7220  001A9E  C1D4  FFDF         	movff	_sprintf$4958,indf2
  7221  001AA2  D0C9               	goto	L17
  7222  001AA4                     
  7223                           ; BSR set to: 1
  7224                           ;doprnt.c: 1486: case 0xC0:
  7225                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7226                           
  7227                           ; BSR set to: 1
  7228                           
  7229                           ; BSR set to: 1
  7230  001AA4  C1EE  F0F6         	movff	sprintf@prec,??_sprintf
  7231  001AA8  C1EF  F0F7         	movff	sprintf@prec+1,??_sprintf+1
  7232  001AAC  0100               	movlb	0	; () banked
  7233  001AAE  90D8               	bcf	status,0,c
  7234  001AB0  37F6               	rlcf	??_sprintf& (0+255),f,b
  7235  001AB2  37F7               	rlcf	(??_sprintf+1)& (0+255),f,b
  7236  001AB4  90D8               	bcf	status,0,c
  7237  001AB6  37F6               	rlcf	??_sprintf& (0+255),f,b
  7238  001AB8  37F7               	rlcf	(??_sprintf+1)& (0+255),f,b
  7239  001ABA  0E6F               	movlw	low _dpowers
  7240  001ABC  25F6               	addwf	??_sprintf& (0+255),w,b
  7241  001ABE  6EF6               	movwf	tblptrl,c
  7242  001AC0  0EFB               	movlw	high _dpowers
  7243  001AC2  21F7               	addwfc	(??_sprintf+1)& (0+255),w,b
  7244  001AC4  6EF7               	movwf	tblptrh,c
  7245  001AC6                     	if	0	;There are less than 3 active tblptr bytes
  7246  001AC6                     	endif
  7247  001AC6  0009               	tblrd		*+
  7248  001AC8  CFF5 F064          	movff	tablat,___lldiv@divisor
  7249  001ACC  0009               	tblrd		*+
  7250  001ACE  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  7251  001AD2  0009               	tblrd		*+
  7252  001AD4  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  7253  001AD8  000A               	tblrd		*-
  7254  001ADA  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  7255  001ADE  C1E7  F060         	movff	sprintf@val,___lldiv@dividend
  7256  001AE2  C1E8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  7257  001AE6  C1E9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  7258  001AEA  C1EA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  7259  001AEE  EC6D  F019         	call	___lldiv	;wreg free
  7260  001AF2  C060  F06D         	movff	?___lldiv,___llmod@dividend
  7261  001AF6  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
  7262  001AFA  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
  7263  001AFE  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
  7264  001B02  0E0A               	movlw	10
  7265  001B04  0100               	movlb	0	; () banked
  7266  001B06  6F71               	movwf	___llmod@divisor& (0+255),b
  7267  001B08  0E00               	movlw	0
  7268  001B0A  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  7269  001B0C  0E00               	movlw	0
  7270  001B0E  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  7271  001B10  0E00               	movlw	0
  7272  001B12  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  7273  001B14  EC9D  F01A         	call	___llmod	;wreg free
  7274  001B18  0100               	movlb	0	; () banked
  7275  001B1A  516D               	movf	?___llmod& (0+255),w,b
  7276  001B1C  D073               	goto	L18
  7277  001B1E                     
  7278                           ; BSR set to: 1
  7279                           ;doprnt.c: 1499: {
  7280                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7281                           
  7282                           ; BSR set to: 1
  7283  001B1E  C1E7  F060         	movff	sprintf@val,___lldiv@dividend
  7284  001B22  C1E8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  7285  001B26  C1E9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  7286  001B2A  C1EA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  7287  001B2E  C1EE  F0F6         	movff	sprintf@prec,??_sprintf
  7288  001B32  C1EF  F0F7         	movff	sprintf@prec+1,??_sprintf+1
  7289  001B36  0100               	movlb	0	; () banked
  7290  001B38  90D8               	bcf	status,0,c
  7291  001B3A  37F6               	rlcf	??_sprintf& (0+255),f,b
  7292  001B3C  37F7               	rlcf	(??_sprintf+1)& (0+255),f,b
  7293  001B3E  90D8               	bcf	status,0,c
  7294  001B40  37F6               	rlcf	??_sprintf& (0+255),f,b
  7295  001B42  37F7               	rlcf	(??_sprintf+1)& (0+255),f,b
  7296  001B44  0EE5               	movlw	low _hexpowers
  7297  001B46  25F6               	addwf	??_sprintf& (0+255),w,b
  7298  001B48  6EF6               	movwf	tblptrl,c
  7299  001B4A  0EFB               	movlw	high _hexpowers
  7300  001B4C  21F7               	addwfc	(??_sprintf+1)& (0+255),w,b
  7301  001B4E  6EF7               	movwf	tblptrh,c
  7302  001B50                     	if	0	;There are less than 3 active tblptr bytes
  7303  001B50                     	endif
  7304  001B50  0009               	tblrd		*+
  7305  001B52  CFF5 F064          	movff	tablat,___lldiv@divisor
  7306  001B56  0009               	tblrd		*+
  7307  001B58  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  7308  001B5C  0009               	tblrd		*+
  7309  001B5E  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  7310  001B62  000A               	tblrd		*-
  7311  001B64  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  7312  001B68  EC6D  F019         	call	___lldiv	;wreg free
  7313  001B6C  0100               	movlb	0	; () banked
  7314  001B6E  5160               	movf	?___lldiv& (0+255),w,b
  7315  001B70  0B0F               	andlw	15
  7316  001B72  0101               	movlb	1	; () banked
  7317  001B74  6FC3               	movwf	sprintf@idx& (0+255),b
  7318                           
  7319                           ; BSR set to: 1
  7320                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  7321  001B76  BBF1               	btfsc	sprintf@flag& (0+255),5,b
  7322  001B78  D004               	goto	l2587
  7323                           
  7324                           ; BSR set to: 1
  7325  001B7A  0E4D               	movlw	low STR_54
  7326  001B7C  6FD6               	movwf	_sprintf$4964& (0+255),b
  7327  001B7E  0EFF               	movlw	high STR_54
  7328  001B80  D003               	goto	L19
  7329  001B82                     l2587:
  7330                           
  7331                           ; BSR set to: 1
  7332                           
  7333                           ; BSR set to: 1
  7334  001B82  0E3C               	movlw	low STR_53
  7335  001B84  6FD6               	movwf	_sprintf$4964& (0+255),b
  7336  001B86  0EFF               	movlw	high STR_53
  7337  001B88                     L19:
  7338  001B88  6FD7               	movwf	(_sprintf$4964+1)& (0+255),b
  7339                           
  7340                           ; BSR set to: 1
  7341                           
  7342                           ; BSR set to: 1
  7343  001B8A  51C3               	movf	sprintf@idx& (0+255),w,b
  7344  001B8C  0D01               	mullw	1
  7345  001B8E  C1D6  F0F6         	movff	_sprintf$4964,??_sprintf
  7346  001B92  C1D7  F0F7         	movff	_sprintf$4964+1,??_sprintf+1
  7347  001B96  50F3               	movf	prodl,w,c
  7348  001B98  0100               	movlb	0	; () banked
  7349  001B9A  27F6               	addwf	??_sprintf& (0+255),f,b
  7350  001B9C  50F4               	movf	prodh,w,c
  7351  001B9E  23F7               	addwfc	(??_sprintf+1)& (0+255),f,b
  7352  001BA0  C0F6  FFF6         	movff	??_sprintf,tblptrl
  7353  001BA4  C0F7  FFF7         	movff	??_sprintf+1,tblptrh
  7354  001BA8                     	if	0	;tblptru may be non-zero
  7355  001BA8                     	endif
  7356  001BA8                     	if	0	;tblptru may be non-zero
  7357  001BA8                     	endif
  7358  001BA8  0008               	tblrd		*
  7359  001BAA  CFF5 F1F0          	movff	tablat,sprintf@c
  7360                           
  7361                           ;doprnt.c: 1508: }
  7362                           ;doprnt.c: 1510: break;
  7363  001BAE  D03C               	goto	l2584
  7364  001BB0                     
  7365                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  7366                           
  7367                           ; BSR set to: 0
  7368  001BB0  C1E7  F060         	movff	sprintf@val,___lldiv@dividend
  7369  001BB4  C1E8  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  7370  001BB8  C1E9  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  7371  001BBC  C1EA  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  7372  001BC0  C1EE  F0F6         	movff	sprintf@prec,??_sprintf
  7373  001BC4  C1EF  F0F7         	movff	sprintf@prec+1,??_sprintf+1
  7374  001BC8  0100               	movlb	0	; () banked
  7375  001BCA  90D8               	bcf	status,0,c
  7376  001BCC  37F6               	rlcf	??_sprintf& (0+255),f,b
  7377  001BCE  37F7               	rlcf	(??_sprintf+1)& (0+255),f,b
  7378  001BD0  90D8               	bcf	status,0,c
  7379  001BD2  37F6               	rlcf	??_sprintf& (0+255),f,b
  7380  001BD4  37F7               	rlcf	(??_sprintf+1)& (0+255),f,b
  7381  001BD6  0E3F               	movlw	low _octpowers
  7382  001BD8  25F6               	addwf	??_sprintf& (0+255),w,b
  7383  001BDA  6EF6               	movwf	tblptrl,c
  7384  001BDC  0EFB               	movlw	high _octpowers
  7385  001BDE  21F7               	addwfc	(??_sprintf+1)& (0+255),w,b
  7386  001BE0  6EF7               	movwf	tblptrh,c
  7387  001BE2                     	if	0	;There are less than 3 active tblptr bytes
  7388  001BE2                     	endif
  7389  001BE2  0009               	tblrd		*+
  7390  001BE4  CFF5 F064          	movff	tablat,___lldiv@divisor
  7391  001BE8  0009               	tblrd		*+
  7392  001BEA  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  7393  001BEE  0009               	tblrd		*+
  7394  001BF0  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  7395  001BF4  000A               	tblrd		*-
  7396  001BF6  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  7397  001BFA  EC6D  F019         	call	___lldiv	;wreg free
  7398  001BFE  0100               	movlb	0	; () banked
  7399  001C00  5160               	movf	?___lldiv& (0+255),w,b
  7400  001C02  0B07               	andlw	7
  7401  001C04                     L18:
  7402  001C04  0F30               	addlw	48
  7403  001C06  0101               	movlb	1	; () banked
  7404  001C08  6FF0               	movwf	sprintf@c& (0+255),b
  7405                           
  7406                           ; BSR set to: 1
  7407                           ;doprnt.c: 1523: }
  7408                           
  7409                           ;doprnt.c: 1520: break;
  7410  001C0A  D00E               	goto	l2584
  7411  001C0C                     l19785:
  7412                           
  7413                           ; BSR set to: 1
  7414  001C0C  51F1               	movf	sprintf@flag& (0+255),w,b
  7415  001C0E  0BC0               	andlw	192
  7416                           
  7417                           ; Switch size 1, requested type "space"
  7418                           ; Number of cases is 4, Range of values is 0 to 192
  7419                           ; switch strategies available:
  7420                           ; Name         Instructions Cycles
  7421                           ; simple_byte           13     7 (average)
  7422                           ;	Chosen strategy is simple_byte
  7423  001C10  0A00               	xorlw	0	; case 0
  7424  001C12  B4D8               	btfsc	status,2,c
  7425  001C14  D747               	goto	l2582
  7426  001C16  0A40               	xorlw	64	; case 64
  7427  001C18  B4D8               	btfsc	status,2,c
  7428  001C1A  D7CA               	goto	l2590
  7429  001C1C  0AC0               	xorlw	192	; case 128
  7430  001C1E  B4D8               	btfsc	status,2,c
  7431  001C20  D77E               	goto	l2585
  7432  001C22  0A40               	xorlw	64	; case 192
  7433  001C24  B4D8               	btfsc	status,2,c
  7434  001C26  D73E               	goto	l2582
  7435  001C28                     l2584:
  7436                           
  7437                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7438                           
  7439                           ; BSR set to: 1
  7440  001C28  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  7441  001C2C  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  7442  001C30  C1F0  FFDF         	movff	sprintf@c,indf2
  7443  001C34                     l19789:
  7444  001C34  0101               	movlb	1	; () banked
  7445  001C36                     L17:
  7446  001C36  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  7447  001C38  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  7448  001C3A                     l2579:
  7449                           
  7450                           ; BSR set to: 1
  7451  001C3A  0101               	movlb	1	; () banked
  7452  001C3C  07EE               	decf	sprintf@prec& (0+255),f,b
  7453  001C3E  A0D8               	btfss	status,0,c
  7454  001C40  07EF               	decf	(sprintf@prec+1)& (0+255),f,b
  7455  001C42  29EE               	incf	sprintf@prec& (0+255),w,b
  7456  001C44  E1E3               	bnz	l19785
  7457  001C46  29EF               	incf	(sprintf@prec+1)& (0+255),w,b
  7458  001C48  A4D8               	btfss	status,2,c
  7459  001C4A  D7E0               	goto	l2581
  7460                           
  7461                           ; BSR set to: 1
  7462                           ;doprnt.c: 1525: }
  7463                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  7464  001C4C  B7F1               	btfsc	sprintf@flag& (0+255),3,b
  7465                           
  7466                           ; BSR set to: 1
  7467  001C4E  BFE6               	btfsc	(sprintf@width+1)& (0+255),7,b
  7468  001C50  D014               	goto	u24110
  7469  001C52  51E6               	movf	(sprintf@width+1)& (0+255),w,b
  7470  001C54  E103               	bnz	l19795
  7471  001C56  05E5               	decf	sprintf@width& (0+255),w,b
  7472  001C58  A0D8               	btfss	status,0,c
  7473  001C5A  D00F               	goto	u24110
  7474  001C5C                     u24100:
  7475  001C5C                     l19795:
  7476                           
  7477                           ; BSR set to: 1
  7478                           ;doprnt.c: 1530: ((*sp++ = (' ')));
  7479  001C5C  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  7480  001C60  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  7481  001C64  0E20               	movlw	32
  7482  001C66  6EDF               	movwf	indf2,c
  7483                           
  7484                           ; BSR set to: 1
  7485  001C68  4BB4               	infsnz	sprintf@sp& (0+255),f,b
  7486  001C6A  2BB5               	incf	(sprintf@sp+1)& (0+255),f,b
  7487                           
  7488                           ; BSR set to: 1
  7489                           ;doprnt.c: 1531: while(--width);
  7490  001C6C  07E5               	decf	sprintf@width& (0+255),f,b
  7491  001C6E  A0D8               	btfss	status,0,c
  7492  001C70  07E6               	decf	(sprintf@width+1)& (0+255),f,b
  7493  001C72  51E5               	movf	sprintf@width& (0+255),w,b
  7494  001C74  11E6               	iorwf	(sprintf@width+1)& (0+255),w,b
  7495  001C76  A4D8               	btfss	status,2,c
  7496  001C78  D7F1               	goto	u24100
  7497  001C7A                     u24110:
  7498                           
  7499                           ; BSR set to: 1
  7500                           
  7501                           ; BSR set to: 1
  7502                           
  7503                           ; BSR set to: 1
  7504                           
  7505                           ; BSR set to: 1
  7506  001C7A  C1B6  FFF6         	movff	sprintf@f,tblptrl
  7507  001C7E  C1B7  FFF7         	movff	sprintf@f+1,tblptrh
  7508  001C82  4BB6               	infsnz	sprintf@f& (0+255),f,b
  7509  001C84  2BB7               	incf	(sprintf@f+1)& (0+255),f,b
  7510  001C86                     	if	0	;tblptru may be non-zero
  7511  001C86                     	endif
  7512  001C86                     	if	0	;tblptru may be non-zero
  7513  001C86                     	endif
  7514  001C86  0008               	tblrd		*
  7515  001C88  CFF5 F1F0          	movff	tablat,sprintf@c
  7516  001C8C  51F0               	movf	sprintf@c& (0+255),w,b
  7517  001C8E  A4D8               	btfss	status,2,c
  7518  001C90  EF57  F001         	goto	l2304
  7519  001C94                     u24120:
  7520                           
  7521                           ; BSR set to: 1
  7522                           ;doprnt.c: 1538: *sp = 0;
  7523                           
  7524                           ; BSR set to: 1
  7525                           
  7526                           ;doprnt.c: 1533: }
  7527                           ;doprnt.c: 1535: alldone:
  7528                           
  7529                           ; BSR set to: 1
  7530  001C94  C1B4  FFD9         	movff	sprintf@sp,fsr2l
  7531  001C98  C1B5  FFDA         	movff	sprintf@sp+1,fsr2h
  7532  001C9C  0E00               	movlw	0
  7533  001C9E  6EDF               	movwf	indf2,c
  7534  001CA0  0012               	return	
  7535  001CA2                     __end_of_sprintf:
  7536                           	opt stack 0
  7537                           tblptru	equ	0xFF8
  7538                           tblptrh	equ	0xFF7
  7539                           tblptrl	equ	0xFF6
  7540                           tablat	equ	0xFF5
  7541                           prodh	equ	0xFF4
  7542                           prodl	equ	0xFF3
  7543                           postinc0	equ	0xFEE
  7544                           wreg	equ	0xFE8
  7545                           indf1	equ	0xFE7
  7546                           postdec1	equ	0xFE5
  7547                           fsr1h	equ	0xFE2
  7548                           fsr1l	equ	0xFE1
  7549                           indf2	equ	0xFDF
  7550                           postinc2	equ	0xFDE
  7551                           postdec2	equ	0xFDD
  7552                           fsr2h	equ	0xFDA
  7553                           fsr2l	equ	0xFD9
  7554                           status	equ	0xFD8
  7555                           
  7556 ;; *************** function _scale *****************
  7557 ;; Defined at:
  7558 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  7559 ;; Parameters:    Size  Location     Type
  7560 ;;  scl             1    wreg     char 
  7561 ;; Auto vars:     Size  Location     Type
  7562 ;;  scl             1   82[BANK0 ] char 
  7563 ;; Return value:  Size  Location     Type
  7564 ;;                  3   76[BANK0 ] char 
  7565 ;; Registers used:
  7566 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7567 ;; Tracked objects:
  7568 ;;		On entry : 0/0
  7569 ;;		On exit  : 0/0
  7570 ;;		Unchanged: 0/0
  7571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7572 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7573 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7575 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7576 ;;Total ram usage:        7 bytes
  7577 ;; Hardware stack levels used:    1
  7578 ;; Hardware stack levels required when called:    6
  7579 ;; This function calls:
  7580 ;;		___awdiv
  7581 ;;		___awmod
  7582 ;;		___ftmul
  7583 ;;		___wmul
  7584 ;; This function is called by:
  7585 ;;		_sprintf
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           	psect	text2
  7590  001CA2                     __ptext2:
  7591                           	opt stack 0
  7592  001CA2                     _scale:
  7593                           	opt stack 23
  7594                           
  7595                           ; BSR set to: 1
  7596                           ;incstack = 0
  7597                           ;scale@scl stored from wreg
  7598  001CA2  0100               	movlb	0	; () banked
  7599  001CA4  6FB2               	movwf	scale@scl& (0+255),b
  7600                           
  7601                           ;doprnt.c: 428: if(scl < 0) {
  7602  001CA6  0100               	movlb	0	; () banked
  7603  001CA8  AFB2               	btfss	scale@scl& (0+255),7,b
  7604  001CAA  D10C               	goto	l2293
  7605                           
  7606                           ; BSR set to: 0
  7607                           ;doprnt.c: 429: scl = -scl;
  7608  001CAC  6DB2               	negf	scale@scl& (0+255),b
  7609                           
  7610                           ;doprnt.c: 430: if(scl>=110)
  7611  001CAE  51B2               	movf	scale@scl& (0+255),w,b
  7612  001CB0  0A80               	xorlw	128
  7613  001CB2  0F12               	addlw	-238
  7614  001CB4  A0D8               	btfss	status,0,c
  7615  001CB6  D097               	goto	l2294
  7616                           
  7617                           ; BSR set to: 0
  7618                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7619  001CB8  0E00               	movlw	0
  7620  001CBA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7621  001CBC  0E03               	movlw	3
  7622  001CBE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7623  001CC0  0E00               	movlw	0
  7624  001CC2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7625  001CC4  0E0A               	movlw	10
  7626  001CC6  6F68               	movwf	___awdiv@divisor& (0+255),b
  7627  001CC8  0E00               	movlw	0
  7628  001CCA  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7629  001CCC  0E64               	movlw	100
  7630  001CCE  6F62               	movwf	___awmod@divisor& (0+255),b
  7631  001CD0  51B2               	movf	scale@scl& (0+255),w,b
  7632  001CD2  6F60               	movwf	___awmod@dividend& (0+255),b
  7633  001CD4  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7634  001CD6  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7635  001CD8  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7636  001CDA  EC2F  F01A         	call	___awmod	;wreg free
  7637  001CDE  C060  F066         	movff	?___awmod,___awdiv@dividend
  7638  001CE2  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  7639  001CE6  EC2A  F019         	call	___awdiv	;wreg free
  7640  001CEA  0E09               	movlw	9
  7641  001CEC  0100               	movlb	0	; () banked
  7642  001CEE  2566               	addwf	?___awdiv& (0+255),w,b
  7643  001CF0  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7644  001CF2  0E00               	movlw	0
  7645  001CF4  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7646  001CF6  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7647  001CF8  EC78  F01C         	call	___wmul	;wreg free
  7648  001CFC  0EBE               	movlw	low __npowers_
  7649  001CFE  0100               	movlb	0	; () banked
  7650  001D00  256E               	addwf	?___wmul& (0+255),w,b
  7651  001D02  6EF6               	movwf	tblptrl,c
  7652  001D04  0EFB               	movlw	high __npowers_
  7653  001D06  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7654  001D08  6EF7               	movwf	tblptrh,c
  7655  001D0A                     	if	0	;There are less than 3 active tblptr bytes
  7656  001D0A                     	endif
  7657  001D0A  0009               	tblrd		*+
  7658  001D0C  CFF5 F0A0          	movff	tablat,___ftmul@f2
  7659  001D10  0009               	tblrd		*+
  7660  001D12  CFF5 F0A1          	movff	tablat,___ftmul@f2+1
  7661  001D16  000A               	tblrd		*-
  7662  001D18  CFF5 F0A2          	movff	tablat,___ftmul@f2+2
  7663  001D1C  0E00               	movlw	0
  7664  001D1E  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7665  001D20  0E64               	movlw	100
  7666  001D22  6F68               	movwf	___awdiv@divisor& (0+255),b
  7667  001D24  51B2               	movf	scale@scl& (0+255),w,b
  7668  001D26  6F66               	movwf	___awdiv@dividend& (0+255),b
  7669  001D28  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7670  001D2A  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  7671  001D2C  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7672  001D2E  EC2A  F019         	call	___awdiv	;wreg free
  7673  001D32  0E12               	movlw	18
  7674  001D34  0100               	movlb	0	; () banked
  7675  001D36  2566               	addwf	?___awdiv& (0+255),w,b
  7676  001D38  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7677  001D3A  0E00               	movlw	0
  7678  001D3C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7679  001D3E  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7680  001D40  0E00               	movlw	0
  7681  001D42  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7682  001D44  0E03               	movlw	3
  7683  001D46  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7684  001D48  EC78  F01C         	call	___wmul	;wreg free
  7685  001D4C  0EBE               	movlw	low __npowers_
  7686  001D4E  0100               	movlb	0	; () banked
  7687  001D50  256E               	addwf	?___wmul& (0+255),w,b
  7688  001D52  6EF6               	movwf	tblptrl,c
  7689  001D54  0EFB               	movlw	high __npowers_
  7690  001D56  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7691  001D58  6EF7               	movwf	tblptrh,c
  7692  001D5A                     	if	0	;There are less than 3 active tblptr bytes
  7693  001D5A                     	endif
  7694  001D5A  0009               	tblrd		*+
  7695  001D5C  CFF5 F09D          	movff	tablat,___ftmul@f1
  7696  001D60  0009               	tblrd		*+
  7697  001D62  CFF5 F09E          	movff	tablat,___ftmul@f1+1
  7698  001D66  000A               	tblrd		*-
  7699  001D68  CFF5 F09F          	movff	tablat,___ftmul@f1+2
  7700  001D6C  ECB7  F015         	call	___ftmul	;wreg free
  7701  001D70  C09D  F0AF         	movff	?___ftmul,_scale$5668
  7702  001D74  C09E  F0B0         	movff	?___ftmul+1,_scale$5668+1
  7703  001D78  C09F  F0B1         	movff	?___ftmul+2,_scale$5668+2
  7704                           
  7705                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7706  001D7C  C0AF  F09D         	movff	_scale$5668,___ftmul@f1
  7707  001D80  C0B0  F09E         	movff	_scale$5668+1,___ftmul@f1+1
  7708  001D84  C0B1  F09F         	movff	_scale$5668+2,___ftmul@f1+2
  7709  001D88  0E00               	movlw	0
  7710  001D8A  0100               	movlb	0	; () banked
  7711  001D8C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7712  001D8E  0E03               	movlw	3
  7713  001D90  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7714  001D92  0E00               	movlw	0
  7715  001D94  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7716  001D96  0E0A               	movlw	10
  7717  001D98  6F62               	movwf	___awmod@divisor& (0+255),b
  7718  001D9A  51B2               	movf	scale@scl& (0+255),w,b
  7719  001D9C  6F60               	movwf	___awmod@dividend& (0+255),b
  7720  001D9E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7721  001DA0  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7722  001DA2  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7723  001DA4  EC2F  F01A         	call	___awmod	;wreg free
  7724  001DA8  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7725  001DAC  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7726  001DB0  EC78  F01C         	call	___wmul	;wreg free
  7727  001DB4  0EBE               	movlw	low __npowers_
  7728  001DB6  0100               	movlb	0	; () banked
  7729  001DB8  256E               	addwf	?___wmul& (0+255),w,b
  7730  001DBA  6EF6               	movwf	tblptrl,c
  7731  001DBC  0EFB               	movlw	high __npowers_
  7732  001DBE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7733  001DC0  6EF7               	movwf	tblptrh,c
  7734  001DC2                     	if	0	;There are less than 3 active tblptr bytes
  7735  001DC2                     	endif
  7736  001DC2  0009               	tblrd		*+
  7737  001DC4  CFF5 F0A0          	movff	tablat,___ftmul@f2
  7738  001DC8  0009               	tblrd		*+
  7739  001DCA  CFF5 F0A1          	movff	tablat,___ftmul@f2+1
  7740  001DCE  000A               	tblrd		*-
  7741  001DD0  CFF5 F0A2          	movff	tablat,___ftmul@f2+2
  7742  001DD4  ECB7  F015         	call	___ftmul	;wreg free
  7743  001DD8  C09D  F0AC         	movff	?___ftmul,?_scale
  7744  001DDC  C09E  F0AD         	movff	?___ftmul+1,?_scale+1
  7745  001DE0  C09F  F0AE         	movff	?___ftmul+2,?_scale+2
  7746  001DE4  0012               	return	
  7747  001DE6                     l2294:
  7748                           
  7749                           ;doprnt.c: 432: else if(scl > 10)
  7750  001DE6  0100               	movlb	0	; () banked
  7751  001DE8  51B2               	movf	scale@scl& (0+255),w,b
  7752  001DEA  0A80               	xorlw	128
  7753  001DEC  0F75               	addlw	-139
  7754  001DEE  A0D8               	btfss	status,0,c
  7755  001DF0  D056               	goto	l2297
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7759  001DF2  0E00               	movlw	0
  7760  001DF4  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7761  001DF6  0E0A               	movlw	10
  7762  001DF8  6F68               	movwf	___awdiv@divisor& (0+255),b
  7763  001DFA  51B2               	movf	scale@scl& (0+255),w,b
  7764  001DFC  6F66               	movwf	___awdiv@dividend& (0+255),b
  7765  001DFE  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7766  001E00  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  7767  001E02  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7768  001E04  EC2A  F019         	call	___awdiv	;wreg free
  7769  001E08  0E09               	movlw	9
  7770  001E0A  0100               	movlb	0	; () banked
  7771  001E0C  2566               	addwf	?___awdiv& (0+255),w,b
  7772  001E0E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7773  001E10  0E00               	movlw	0
  7774  001E12  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7775  001E14  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7776  001E16  0E00               	movlw	0
  7777  001E18  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7778  001E1A  0E03               	movlw	3
  7779  001E1C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7780  001E1E  EC78  F01C         	call	___wmul	;wreg free
  7781  001E22  0EBE               	movlw	low __npowers_
  7782  001E24  0100               	movlb	0	; () banked
  7783  001E26  256E               	addwf	?___wmul& (0+255),w,b
  7784  001E28  6EF6               	movwf	tblptrl,c
  7785  001E2A  0EFB               	movlw	high __npowers_
  7786  001E2C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7787  001E2E  6EF7               	movwf	tblptrh,c
  7788  001E30                     	if	0	;There are less than 3 active tblptr bytes
  7789  001E30                     	endif
  7790  001E30  0009               	tblrd		*+
  7791  001E32  CFF5 F09D          	movff	tablat,___ftmul@f1
  7792  001E36  0009               	tblrd		*+
  7793  001E38  CFF5 F09E          	movff	tablat,___ftmul@f1+1
  7794  001E3C  000A               	tblrd		*-
  7795  001E3E  CFF5 F09F          	movff	tablat,___ftmul@f1+2
  7796  001E42  0E00               	movlw	0
  7797  001E44  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7798  001E46  0E03               	movlw	3
  7799  001E48  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7800  001E4A  0E00               	movlw	0
  7801  001E4C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7802  001E4E  0E0A               	movlw	10
  7803  001E50  6F62               	movwf	___awmod@divisor& (0+255),b
  7804  001E52  51B2               	movf	scale@scl& (0+255),w,b
  7805  001E54  6F60               	movwf	___awmod@dividend& (0+255),b
  7806  001E56  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7807  001E58  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7808  001E5A  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7809  001E5C  EC2F  F01A         	call	___awmod	;wreg free
  7810  001E60  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7811  001E64  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7812  001E68  EC78  F01C         	call	___wmul	;wreg free
  7813  001E6C  0EBE               	movlw	low __npowers_
  7814  001E6E  0100               	movlb	0	; () banked
  7815  001E70  256E               	addwf	?___wmul& (0+255),w,b
  7816  001E72  6EF6               	movwf	tblptrl,c
  7817  001E74  0EFB               	movlw	high __npowers_
  7818  001E76  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7819  001E78  6EF7               	movwf	tblptrh,c
  7820  001E7A                     	if	0	;There are less than 3 active tblptr bytes
  7821  001E7A                     	endif
  7822  001E7A  0009               	tblrd		*+
  7823  001E7C  CFF5 F0A0          	movff	tablat,___ftmul@f2
  7824  001E80  0009               	tblrd		*+
  7825  001E82  CFF5 F0A1          	movff	tablat,___ftmul@f2+1
  7826  001E86  000A               	tblrd		*-
  7827  001E88  CFF5 F0A2          	movff	tablat,___ftmul@f2+2
  7828  001E8C  ECB7  F015         	call	___ftmul	;wreg free
  7829  001E90  C09D  F0AC         	movff	?___ftmul,?_scale
  7830  001E94  C09E  F0AD         	movff	?___ftmul+1,?_scale+1
  7831  001E98  C09F  F0AE         	movff	?___ftmul+2,?_scale+2
  7832  001E9C  0012               	return	
  7833  001E9E                     l2297:
  7834                           
  7835                           ;doprnt.c: 434: return _npowers_[scl];
  7836  001E9E  0100               	movlb	0	; () banked
  7837  001EA0  51B2               	movf	scale@scl& (0+255),w,b
  7838  001EA2  0D03               	mullw	3
  7839  001EA4  0EBE               	movlw	low __npowers_
  7840  001EA6  24F3               	addwf	prodl,w,c
  7841  001EA8  6EF6               	movwf	tblptrl,c
  7842  001EAA  0EFB               	movlw	high __npowers_
  7843  001EAC  20F4               	addwfc	prodh,w,c
  7844  001EAE  6EF7               	movwf	tblptrh,c
  7845  001EB0                     	if	0	;There are less than 3 active tblptr bytes
  7846  001EB0                     	endif
  7847  001EB0  0009               	tblrd		*+
  7848  001EB2  CFF5 F0AC          	movff	tablat,?_scale
  7849  001EB6  0009               	tblrd		*+
  7850  001EB8  CFF5 F0AD          	movff	tablat,?_scale+1
  7851  001EBC  000A               	tblrd		*-
  7852  001EBE  CFF5 F0AE          	movff	tablat,?_scale+2
  7853                           
  7854                           ; BSR set to: 0
  7855  001EC2  0012               	return	
  7856  001EC4                     l2293:
  7857                           
  7858                           ; BSR set to: 0
  7859                           ;doprnt.c: 435: }
  7860                           ;doprnt.c: 436: if(scl>=110)
  7861                           
  7862                           ; BSR set to: 0
  7863  001EC4  51B2               	movf	scale@scl& (0+255),w,b
  7864  001EC6  0A80               	xorlw	128
  7865  001EC8  0F12               	addlw	-238
  7866  001ECA  A0D8               	btfss	status,0,c
  7867  001ECC  D097               	goto	l2298
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7871  001ECE  0E00               	movlw	0
  7872  001ED0  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7873  001ED2  0E03               	movlw	3
  7874  001ED4  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7875  001ED6  0E00               	movlw	0
  7876  001ED8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7877  001EDA  0E0A               	movlw	10
  7878  001EDC  6F68               	movwf	___awdiv@divisor& (0+255),b
  7879  001EDE  0E00               	movlw	0
  7880  001EE0  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7881  001EE2  0E64               	movlw	100
  7882  001EE4  6F62               	movwf	___awmod@divisor& (0+255),b
  7883  001EE6  51B2               	movf	scale@scl& (0+255),w,b
  7884  001EE8  6F60               	movwf	___awmod@dividend& (0+255),b
  7885  001EEA  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7886  001EEC  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7887  001EEE  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7888  001EF0  EC2F  F01A         	call	___awmod	;wreg free
  7889  001EF4  C060  F066         	movff	?___awmod,___awdiv@dividend
  7890  001EF8  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  7891  001EFC  EC2A  F019         	call	___awdiv	;wreg free
  7892  001F00  0E09               	movlw	9
  7893  001F02  0100               	movlb	0	; () banked
  7894  001F04  2566               	addwf	?___awdiv& (0+255),w,b
  7895  001F06  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7896  001F08  0E00               	movlw	0
  7897  001F0A  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7898  001F0C  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7899  001F0E  EC78  F01C         	call	___wmul	;wreg free
  7900  001F12  0E97               	movlw	low __powers_
  7901  001F14  0100               	movlb	0	; () banked
  7902  001F16  256E               	addwf	?___wmul& (0+255),w,b
  7903  001F18  6EF6               	movwf	tblptrl,c
  7904  001F1A  0EFB               	movlw	high __powers_
  7905  001F1C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7906  001F1E  6EF7               	movwf	tblptrh,c
  7907  001F20                     	if	0	;There are less than 3 active tblptr bytes
  7908  001F20                     	endif
  7909  001F20  0009               	tblrd		*+
  7910  001F22  CFF5 F0A0          	movff	tablat,___ftmul@f2
  7911  001F26  0009               	tblrd		*+
  7912  001F28  CFF5 F0A1          	movff	tablat,___ftmul@f2+1
  7913  001F2C  000A               	tblrd		*-
  7914  001F2E  CFF5 F0A2          	movff	tablat,___ftmul@f2+2
  7915  001F32  0E00               	movlw	0
  7916  001F34  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7917  001F36  0E64               	movlw	100
  7918  001F38  6F68               	movwf	___awdiv@divisor& (0+255),b
  7919  001F3A  51B2               	movf	scale@scl& (0+255),w,b
  7920  001F3C  6F66               	movwf	___awdiv@dividend& (0+255),b
  7921  001F3E  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7922  001F40  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  7923  001F42  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7924  001F44  EC2A  F019         	call	___awdiv	;wreg free
  7925  001F48  0E12               	movlw	18
  7926  001F4A  0100               	movlb	0	; () banked
  7927  001F4C  2566               	addwf	?___awdiv& (0+255),w,b
  7928  001F4E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7929  001F50  0E00               	movlw	0
  7930  001F52  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7931  001F54  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7932  001F56  0E00               	movlw	0
  7933  001F58  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7934  001F5A  0E03               	movlw	3
  7935  001F5C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7936  001F5E  EC78  F01C         	call	___wmul	;wreg free
  7937  001F62  0E97               	movlw	low __powers_
  7938  001F64  0100               	movlb	0	; () banked
  7939  001F66  256E               	addwf	?___wmul& (0+255),w,b
  7940  001F68  6EF6               	movwf	tblptrl,c
  7941  001F6A  0EFB               	movlw	high __powers_
  7942  001F6C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7943  001F6E  6EF7               	movwf	tblptrh,c
  7944  001F70                     	if	0	;There are less than 3 active tblptr bytes
  7945  001F70                     	endif
  7946  001F70  0009               	tblrd		*+
  7947  001F72  CFF5 F09D          	movff	tablat,___ftmul@f1
  7948  001F76  0009               	tblrd		*+
  7949  001F78  CFF5 F09E          	movff	tablat,___ftmul@f1+1
  7950  001F7C  000A               	tblrd		*-
  7951  001F7E  CFF5 F09F          	movff	tablat,___ftmul@f1+2
  7952  001F82  ECB7  F015         	call	___ftmul	;wreg free
  7953  001F86  C09D  F0AF         	movff	?___ftmul,_scale$5668
  7954  001F8A  C09E  F0B0         	movff	?___ftmul+1,_scale$5668+1
  7955  001F8E  C09F  F0B1         	movff	?___ftmul+2,_scale$5668+2
  7956                           
  7957                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7958  001F92  C0AF  F09D         	movff	_scale$5668,___ftmul@f1
  7959  001F96  C0B0  F09E         	movff	_scale$5668+1,___ftmul@f1+1
  7960  001F9A  C0B1  F09F         	movff	_scale$5668+2,___ftmul@f1+2
  7961  001F9E  0E00               	movlw	0
  7962  001FA0  0100               	movlb	0	; () banked
  7963  001FA2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7964  001FA4  0E03               	movlw	3
  7965  001FA6  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7966  001FA8  0E00               	movlw	0
  7967  001FAA  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7968  001FAC  0E0A               	movlw	10
  7969  001FAE  6F62               	movwf	___awmod@divisor& (0+255),b
  7970  001FB0  51B2               	movf	scale@scl& (0+255),w,b
  7971  001FB2  6F60               	movwf	___awmod@dividend& (0+255),b
  7972  001FB4  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7973  001FB6  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7974  001FB8  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7975  001FBA  EC2F  F01A         	call	___awmod	;wreg free
  7976  001FBE  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7977  001FC2  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7978  001FC6  EC78  F01C         	call	___wmul	;wreg free
  7979  001FCA  0E97               	movlw	low __powers_
  7980  001FCC  0100               	movlb	0	; () banked
  7981  001FCE  256E               	addwf	?___wmul& (0+255),w,b
  7982  001FD0  6EF6               	movwf	tblptrl,c
  7983  001FD2  0EFB               	movlw	high __powers_
  7984  001FD4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7985  001FD6  6EF7               	movwf	tblptrh,c
  7986  001FD8                     	if	0	;There are less than 3 active tblptr bytes
  7987  001FD8                     	endif
  7988  001FD8  0009               	tblrd		*+
  7989  001FDA  CFF5 F0A0          	movff	tablat,___ftmul@f2
  7990  001FDE  0009               	tblrd		*+
  7991  001FE0  CFF5 F0A1          	movff	tablat,___ftmul@f2+1
  7992  001FE4  000A               	tblrd		*-
  7993  001FE6  CFF5 F0A2          	movff	tablat,___ftmul@f2+2
  7994  001FEA  ECB7  F015         	call	___ftmul	;wreg free
  7995  001FEE  C09D  F0AC         	movff	?___ftmul,?_scale
  7996  001FF2  C09E  F0AD         	movff	?___ftmul+1,?_scale+1
  7997  001FF6  C09F  F0AE         	movff	?___ftmul+2,?_scale+2
  7998  001FFA  0012               	return	
  7999  001FFC                     l2298:
  8000                           
  8001                           ;doprnt.c: 438: else if(scl > 10)
  8002  001FFC  0100               	movlb	0	; () banked
  8003  001FFE  51B2               	movf	scale@scl& (0+255),w,b
  8004  002000  0A80               	xorlw	128
  8005  002002  0F75               	addlw	-139
  8006  002004  A0D8               	btfss	status,0,c
  8007  002006  D056               	goto	l2300
  8008                           
  8009                           ; BSR set to: 0
  8010                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8011  002008  0E00               	movlw	0
  8012  00200A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  8013  00200C  0E0A               	movlw	10
  8014  00200E  6F68               	movwf	___awdiv@divisor& (0+255),b
  8015  002010  51B2               	movf	scale@scl& (0+255),w,b
  8016  002012  6F66               	movwf	___awdiv@dividend& (0+255),b
  8017  002014  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  8018  002016  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  8019  002018  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8020  00201A  EC2A  F019         	call	___awdiv	;wreg free
  8021  00201E  0E09               	movlw	9
  8022  002020  0100               	movlb	0	; () banked
  8023  002022  2566               	addwf	?___awdiv& (0+255),w,b
  8024  002024  6F6E               	movwf	___wmul@multiplier& (0+255),b
  8025  002026  0E00               	movlw	0
  8026  002028  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  8027  00202A  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8028  00202C  0E00               	movlw	0
  8029  00202E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8030  002030  0E03               	movlw	3
  8031  002032  6F70               	movwf	___wmul@multiplicand& (0+255),b
  8032  002034  EC78  F01C         	call	___wmul	;wreg free
  8033  002038  0E97               	movlw	low __powers_
  8034  00203A  0100               	movlb	0	; () banked
  8035  00203C  256E               	addwf	?___wmul& (0+255),w,b
  8036  00203E  6EF6               	movwf	tblptrl,c
  8037  002040  0EFB               	movlw	high __powers_
  8038  002042  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  8039  002044  6EF7               	movwf	tblptrh,c
  8040  002046                     	if	0	;There are less than 3 active tblptr bytes
  8041  002046                     	endif
  8042  002046  0009               	tblrd		*+
  8043  002048  CFF5 F09D          	movff	tablat,___ftmul@f1
  8044  00204C  0009               	tblrd		*+
  8045  00204E  CFF5 F09E          	movff	tablat,___ftmul@f1+1
  8046  002052  000A               	tblrd		*-
  8047  002054  CFF5 F09F          	movff	tablat,___ftmul@f1+2
  8048  002058  0E00               	movlw	0
  8049  00205A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8050  00205C  0E03               	movlw	3
  8051  00205E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  8052  002060  0E00               	movlw	0
  8053  002062  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  8054  002064  0E0A               	movlw	10
  8055  002066  6F62               	movwf	___awmod@divisor& (0+255),b
  8056  002068  51B2               	movf	scale@scl& (0+255),w,b
  8057  00206A  6F60               	movwf	___awmod@dividend& (0+255),b
  8058  00206C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  8059  00206E  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  8060  002070  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  8061  002072  EC2F  F01A         	call	___awmod	;wreg free
  8062  002076  C060  F06E         	movff	?___awmod,___wmul@multiplier
  8063  00207A  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  8064  00207E  EC78  F01C         	call	___wmul	;wreg free
  8065  002082  0E97               	movlw	low __powers_
  8066  002084  0100               	movlb	0	; () banked
  8067  002086  256E               	addwf	?___wmul& (0+255),w,b
  8068  002088  6EF6               	movwf	tblptrl,c
  8069  00208A  0EFB               	movlw	high __powers_
  8070  00208C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  8071  00208E  6EF7               	movwf	tblptrh,c
  8072  002090                     	if	0	;There are less than 3 active tblptr bytes
  8073  002090                     	endif
  8074  002090  0009               	tblrd		*+
  8075  002092  CFF5 F0A0          	movff	tablat,___ftmul@f2
  8076  002096  0009               	tblrd		*+
  8077  002098  CFF5 F0A1          	movff	tablat,___ftmul@f2+1
  8078  00209C  000A               	tblrd		*-
  8079  00209E  CFF5 F0A2          	movff	tablat,___ftmul@f2+2
  8080  0020A2  ECB7  F015         	call	___ftmul	;wreg free
  8081  0020A6  C09D  F0AC         	movff	?___ftmul,?_scale
  8082  0020AA  C09E  F0AD         	movff	?___ftmul+1,?_scale+1
  8083  0020AE  C09F  F0AE         	movff	?___ftmul+2,?_scale+2
  8084  0020B2  0012               	return	
  8085  0020B4                     l2300:
  8086                           
  8087                           ;doprnt.c: 440: return _powers_[scl];
  8088  0020B4  0100               	movlb	0	; () banked
  8089  0020B6  51B2               	movf	scale@scl& (0+255),w,b
  8090  0020B8  0D03               	mullw	3
  8091  0020BA  0E97               	movlw	low __powers_
  8092  0020BC  24F3               	addwf	prodl,w,c
  8093  0020BE  6EF6               	movwf	tblptrl,c
  8094  0020C0  0EFB               	movlw	high __powers_
  8095  0020C2  20F4               	addwfc	prodh,w,c
  8096  0020C4  6EF7               	movwf	tblptrh,c
  8097  0020C6                     	if	0	;There are less than 3 active tblptr bytes
  8098  0020C6                     	endif
  8099  0020C6  0009               	tblrd		*+
  8100  0020C8  CFF5 F0AC          	movff	tablat,?_scale
  8101  0020CC  0009               	tblrd		*+
  8102  0020CE  CFF5 F0AD          	movff	tablat,?_scale+1
  8103  0020D2  000A               	tblrd		*-
  8104  0020D4  CFF5 F0AE          	movff	tablat,?_scale+2
  8105  0020D8  0012               	return	
  8106  0020DA                     __end_of_scale:
  8107                           	opt stack 0
  8108                           tblptru	equ	0xFF8
  8109                           tblptrh	equ	0xFF7
  8110                           tblptrl	equ	0xFF6
  8111                           tablat	equ	0xFF5
  8112                           prodh	equ	0xFF4
  8113                           prodl	equ	0xFF3
  8114                           postinc0	equ	0xFEE
  8115                           wreg	equ	0xFE8
  8116                           indf1	equ	0xFE7
  8117                           postdec1	equ	0xFE5
  8118                           fsr1h	equ	0xFE2
  8119                           fsr1l	equ	0xFE1
  8120                           indf2	equ	0xFDF
  8121                           postinc2	equ	0xFDE
  8122                           postdec2	equ	0xFDD
  8123                           fsr2h	equ	0xFDA
  8124                           fsr2l	equ	0xFD9
  8125                           status	equ	0xFD8
  8126                           
  8127 ;; *************** function _isdigit *****************
  8128 ;; Defined at:
  8129 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  8130 ;; Parameters:    Size  Location     Type
  8131 ;;  c               1    wreg     unsigned char 
  8132 ;; Auto vars:     Size  Location     Type
  8133 ;;  c               1    2[BANK0 ] unsigned char 
  8134 ;; Return value:  Size  Location     Type
  8135 ;;		None               void
  8136 ;; Registers used:
  8137 ;;		wreg, status,2, status,0
  8138 ;; Tracked objects:
  8139 ;;		On entry : 0/0
  8140 ;;		On exit  : 0/0
  8141 ;;		Unchanged: 0/0
  8142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8144 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8145 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8146 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8147 ;;Total ram usage:        3 bytes
  8148 ;; Hardware stack levels used:    1
  8149 ;; Hardware stack levels required when called:    4
  8150 ;; This function calls:
  8151 ;;		Nothing
  8152 ;; This function is called by:
  8153 ;;		_sprintf
  8154 ;; This function uses a non-reentrant model
  8155 ;;
  8156                           
  8157                           	psect	text3
  8158  003966                     __ptext3:
  8159                           	opt stack 0
  8160  003966                     _isdigit:
  8161                           	opt stack 25
  8162                           
  8163                           ;incstack = 0
  8164                           ;isdigit@c stored from wreg
  8165  003966  0100               	movlb	0	; () banked
  8166  003968  6F62               	movwf	isdigit@c& (0+255),b
  8167  00396A  0E00               	movlw	0
  8168  00396C  0100               	movlb	0	; () banked
  8169  00396E  6F61               	movwf	_isdigit$5190& (0+255),b
  8170                           
  8171                           ; BSR set to: 0
  8172  003970  0E3A               	movlw	58
  8173  003972  6162               	cpfslt	isdigit@c& (0+255),b
  8174  003974  D005               	goto	l2960
  8175                           
  8176                           ; BSR set to: 0
  8177  003976  0E2F               	movlw	47
  8178  003978  6562               	cpfsgt	isdigit@c& (0+255),b
  8179  00397A  D002               	goto	l2960
  8180                           
  8181                           ; BSR set to: 0
  8182  00397C  0E01               	movlw	1
  8183  00397E  6F61               	movwf	_isdigit$5190& (0+255),b
  8184  003980                     l2960:
  8185                           
  8186                           ; BSR set to: 0
  8187                           
  8188                           ; BSR set to: 0
  8189  003980  C061  F060         	movff	_isdigit$5190,??_isdigit
  8190  003984  3160               	rrcf	??_isdigit& (0+255),w,b
  8191  003986  0012               	return	
  8192  003988                     __end_of_isdigit:
  8193                           	opt stack 0
  8194                           tblptru	equ	0xFF8
  8195                           tblptrh	equ	0xFF7
  8196                           tblptrl	equ	0xFF6
  8197                           tablat	equ	0xFF5
  8198                           prodh	equ	0xFF4
  8199                           prodl	equ	0xFF3
  8200                           postinc0	equ	0xFEE
  8201                           wreg	equ	0xFE8
  8202                           indf1	equ	0xFE7
  8203                           postdec1	equ	0xFE5
  8204                           fsr1h	equ	0xFE2
  8205                           fsr1l	equ	0xFE1
  8206                           indf2	equ	0xFDF
  8207                           postinc2	equ	0xFDE
  8208                           postdec2	equ	0xFDD
  8209                           fsr2h	equ	0xFDA
  8210                           fsr2l	equ	0xFD9
  8211                           status	equ	0xFD8
  8212                           
  8213 ;; *************** function _fround *****************
  8214 ;; Defined at:
  8215 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  8216 ;; Parameters:    Size  Location     Type
  8217 ;;  prec            1    wreg     unsigned char 
  8218 ;; Auto vars:     Size  Location     Type
  8219 ;;  prec            1   85[BANK0 ] unsigned char 
  8220 ;; Return value:  Size  Location     Type
  8221 ;;                  3   76[BANK0 ] unsigned char 
  8222 ;; Registers used:
  8223 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8224 ;; Tracked objects:
  8225 ;;		On entry : 0/0
  8226 ;;		On exit  : 0/0
  8227 ;;		Unchanged: 0/0
  8228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8229 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8230 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8232 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8233 ;;Total ram usage:       10 bytes
  8234 ;; Hardware stack levels used:    1
  8235 ;; Hardware stack levels required when called:    6
  8236 ;; This function calls:
  8237 ;;		___awdiv
  8238 ;;		___awmod
  8239 ;;		___ftmul
  8240 ;;		___wmul
  8241 ;; This function is called by:
  8242 ;;		_sprintf
  8243 ;; This function uses a non-reentrant model
  8244 ;;
  8245                           
  8246                           	psect	text4
  8247  0020DA                     __ptext4:
  8248                           	opt stack 0
  8249  0020DA                     _fround:
  8250                           	opt stack 23
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;incstack = 0
  8254                           ;fround@prec stored from wreg
  8255  0020DA  0100               	movlb	0	; () banked
  8256  0020DC  6FB5               	movwf	fround@prec& (0+255),b
  8257                           
  8258                           ;doprnt.c: 413: if(prec>=110)
  8259  0020DE  0E6D               	movlw	109
  8260  0020E0  0100               	movlb	0	; () banked
  8261  0020E2  65B5               	cpfsgt	fround@prec& (0+255),b
  8262  0020E4  D0A6               	goto	l2287
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8266  0020E6  0E00               	movlw	0
  8267  0020E8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8268  0020EA  0E03               	movlw	3
  8269  0020EC  6F70               	movwf	___wmul@multiplicand& (0+255),b
  8270  0020EE  0E00               	movlw	0
  8271  0020F0  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  8272  0020F2  0E0A               	movlw	10
  8273  0020F4  6F68               	movwf	___awdiv@divisor& (0+255),b
  8274  0020F6  0E00               	movlw	0
  8275  0020F8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  8276  0020FA  0E64               	movlw	100
  8277  0020FC  6F62               	movwf	___awmod@divisor& (0+255),b
  8278  0020FE  C0B5  F060         	movff	fround@prec,___awmod@dividend
  8279  002102  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  8280  002104  EC2F  F01A         	call	___awmod	;wreg free
  8281  002108  C060  F066         	movff	?___awmod,___awdiv@dividend
  8282  00210C  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  8283  002110  EC2A  F019         	call	___awdiv	;wreg free
  8284  002114  0E09               	movlw	9
  8285  002116  0100               	movlb	0	; () banked
  8286  002118  2566               	addwf	?___awdiv& (0+255),w,b
  8287  00211A  6F6E               	movwf	___wmul@multiplier& (0+255),b
  8288  00211C  0E00               	movlw	0
  8289  00211E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  8290  002120  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8291  002122  EC78  F01C         	call	___wmul	;wreg free
  8292  002126  0EBE               	movlw	low __npowers_
  8293  002128  0100               	movlb	0	; () banked
  8294  00212A  256E               	addwf	?___wmul& (0+255),w,b
  8295  00212C  6EF6               	movwf	tblptrl,c
  8296  00212E  0EFB               	movlw	high __npowers_
  8297  002130  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  8298  002132  6EF7               	movwf	tblptrh,c
  8299  002134                     	if	0	;There are less than 3 active tblptr bytes
  8300  002134                     	endif
  8301  002134  0009               	tblrd		*+
  8302  002136  CFF5 F0A0          	movff	tablat,___ftmul@f2
  8303  00213A  0009               	tblrd		*+
  8304  00213C  CFF5 F0A1          	movff	tablat,___ftmul@f2+1
  8305  002140  000A               	tblrd		*-
  8306  002142  CFF5 F0A2          	movff	tablat,___ftmul@f2+2
  8307  002146  0E00               	movlw	0
  8308  002148  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  8309  00214A  0E64               	movlw	100
  8310  00214C  6F68               	movwf	___awdiv@divisor& (0+255),b
  8311  00214E  C0B5  F066         	movff	fround@prec,___awdiv@dividend
  8312  002152  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  8313  002154  EC2A  F019         	call	___awdiv	;wreg free
  8314  002158  0E12               	movlw	18
  8315  00215A  0100               	movlb	0	; () banked
  8316  00215C  2566               	addwf	?___awdiv& (0+255),w,b
  8317  00215E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  8318  002160  0E00               	movlw	0
  8319  002162  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  8320  002164  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8321  002166  0E00               	movlw	0
  8322  002168  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8323  00216A  0E03               	movlw	3
  8324  00216C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  8325  00216E  EC78  F01C         	call	___wmul	;wreg free
  8326  002172  0EBE               	movlw	low __npowers_
  8327  002174  0100               	movlb	0	; () banked
  8328  002176  256E               	addwf	?___wmul& (0+255),w,b
  8329  002178  6EF6               	movwf	tblptrl,c
  8330  00217A  0EFB               	movlw	high __npowers_
  8331  00217C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  8332  00217E  6EF7               	movwf	tblptrh,c
  8333  002180                     	if	0	;There are less than 3 active tblptr bytes
  8334  002180                     	endif
  8335  002180  0009               	tblrd		*+
  8336  002182  CFF5 F09D          	movff	tablat,___ftmul@f1
  8337  002186  0009               	tblrd		*+
  8338  002188  CFF5 F09E          	movff	tablat,___ftmul@f1+1
  8339  00218C  000A               	tblrd		*-
  8340  00218E  CFF5 F09F          	movff	tablat,___ftmul@f1+2
  8341  002192  ECB7  F015         	call	___ftmul	;wreg free
  8342  002196  C09D  F0B2         	movff	?___ftmul,_fround$5666
  8343  00219A  C09E  F0B3         	movff	?___ftmul+1,_fround$5666+1
  8344  00219E  C09F  F0B4         	movff	?___ftmul+2,_fround$5666+2
  8345                           
  8346                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8347  0021A2  0E00               	movlw	0
  8348  0021A4  0100               	movlb	0	; () banked
  8349  0021A6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8350  0021A8  0E03               	movlw	3
  8351  0021AA  6F70               	movwf	___wmul@multiplicand& (0+255),b
  8352  0021AC  0E00               	movlw	0
  8353  0021AE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  8354  0021B0  0E0A               	movlw	10
  8355  0021B2  6F62               	movwf	___awmod@divisor& (0+255),b
  8356  0021B4  C0B5  F060         	movff	fround@prec,___awmod@dividend
  8357  0021B8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  8358  0021BA  EC2F  F01A         	call	___awmod	;wreg free
  8359  0021BE  C060  F06E         	movff	?___awmod,___wmul@multiplier
  8360  0021C2  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  8361  0021C6  EC78  F01C         	call	___wmul	;wreg free
  8362  0021CA  0EBE               	movlw	low __npowers_
  8363  0021CC  0100               	movlb	0	; () banked
  8364  0021CE  256E               	addwf	?___wmul& (0+255),w,b
  8365  0021D0  6EF6               	movwf	tblptrl,c
  8366  0021D2  0EFB               	movlw	high __npowers_
  8367  0021D4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  8368  0021D6  6EF7               	movwf	tblptrh,c
  8369  0021D8                     	if	0	;There are less than 3 active tblptr bytes
  8370  0021D8                     	endif
  8371  0021D8  0009               	tblrd		*+
  8372  0021DA  CFF5 F0A0          	movff	tablat,___ftmul@f2
  8373  0021DE  0009               	tblrd		*+
  8374  0021E0  CFF5 F0A1          	movff	tablat,___ftmul@f2+1
  8375  0021E4  000A               	tblrd		*-
  8376  0021E6  CFF5 F0A2          	movff	tablat,___ftmul@f2+2
  8377  0021EA  C0B2  F09D         	movff	_fround$5666,___ftmul@f1
  8378  0021EE  C0B3  F09E         	movff	_fround$5666+1,___ftmul@f1+1
  8379  0021F2  C0B4  F09F         	movff	_fround$5666+2,___ftmul@f1+2
  8380  0021F6  ECB7  F015         	call	___ftmul	;wreg free
  8381  0021FA  C09D  F0AF         	movff	?___ftmul,_fround$5667
  8382  0021FE  C09E  F0B0         	movff	?___ftmul+1,_fround$5667+1
  8383  002202  C09F  F0B1         	movff	?___ftmul+2,_fround$5667+2
  8384                           
  8385                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8386  002206  C0AF  F09D         	movff	_fround$5667,___ftmul@f1
  8387  00220A  C0B0  F09E         	movff	_fround$5667+1,___ftmul@f1+1
  8388  00220E  C0B1  F09F         	movff	_fround$5667+2,___ftmul@f1+2
  8389  002212  0E00               	movlw	0
  8390  002214  0100               	movlb	0	; () banked
  8391  002216  6FA0               	movwf	___ftmul@f2& (0+255),b
  8392  002218  0E00               	movlw	0
  8393  00221A  6FA1               	movwf	(___ftmul@f2+1)& (0+255),b
  8394  00221C  0E3F               	movlw	63
  8395  00221E  6FA2               	movwf	(___ftmul@f2+2)& (0+255),b
  8396  002220  ECB7  F015         	call	___ftmul	;wreg free
  8397  002224  C09D  F0AC         	movff	?___ftmul,?_fround
  8398  002228  C09E  F0AD         	movff	?___ftmul+1,?_fround+1
  8399  00222C  C09F  F0AE         	movff	?___ftmul+2,?_fround+2
  8400  002230  0012               	return	
  8401  002232                     l2287:
  8402                           
  8403                           ;doprnt.c: 415: else if(prec > 10)
  8404  002232  0E0A               	movlw	10
  8405  002234  0100               	movlb	0	; () banked
  8406  002236  65B5               	cpfsgt	fround@prec& (0+255),b
  8407  002238  D067               	goto	l2290
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8411  00223A  0E00               	movlw	0
  8412  00223C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8413  00223E  0E03               	movlw	3
  8414  002240  6F70               	movwf	___wmul@multiplicand& (0+255),b
  8415  002242  0E00               	movlw	0
  8416  002244  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  8417  002246  0E0A               	movlw	10
  8418  002248  6F62               	movwf	___awmod@divisor& (0+255),b
  8419  00224A  C0B5  F060         	movff	fround@prec,___awmod@dividend
  8420  00224E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  8421  002250  EC2F  F01A         	call	___awmod	;wreg free
  8422  002254  C060  F06E         	movff	?___awmod,___wmul@multiplier
  8423  002258  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  8424  00225C  EC78  F01C         	call	___wmul	;wreg free
  8425  002260  0EBE               	movlw	low __npowers_
  8426  002262  0100               	movlb	0	; () banked
  8427  002264  256E               	addwf	?___wmul& (0+255),w,b
  8428  002266  6EF6               	movwf	tblptrl,c
  8429  002268  0EFB               	movlw	high __npowers_
  8430  00226A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  8431  00226C  6EF7               	movwf	tblptrh,c
  8432  00226E                     	if	0	;There are less than 3 active tblptr bytes
  8433  00226E                     	endif
  8434  00226E  0009               	tblrd		*+
  8435  002270  CFF5 F0A0          	movff	tablat,___ftmul@f2
  8436  002274  0009               	tblrd		*+
  8437  002276  CFF5 F0A1          	movff	tablat,___ftmul@f2+1
  8438  00227A  000A               	tblrd		*-
  8439  00227C  CFF5 F0A2          	movff	tablat,___ftmul@f2+2
  8440  002280  0E00               	movlw	0
  8441  002282  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  8442  002284  0E0A               	movlw	10
  8443  002286  6F68               	movwf	___awdiv@divisor& (0+255),b
  8444  002288  C0B5  F066         	movff	fround@prec,___awdiv@dividend
  8445  00228C  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  8446  00228E  EC2A  F019         	call	___awdiv	;wreg free
  8447  002292  0E09               	movlw	9
  8448  002294  0100               	movlb	0	; () banked
  8449  002296  2566               	addwf	?___awdiv& (0+255),w,b
  8450  002298  6F6E               	movwf	___wmul@multiplier& (0+255),b
  8451  00229A  0E00               	movlw	0
  8452  00229C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  8453  00229E  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8454  0022A0  0E00               	movlw	0
  8455  0022A2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8456  0022A4  0E03               	movlw	3
  8457  0022A6  6F70               	movwf	___wmul@multiplicand& (0+255),b
  8458  0022A8  EC78  F01C         	call	___wmul	;wreg free
  8459  0022AC  0EBE               	movlw	low __npowers_
  8460  0022AE  0100               	movlb	0	; () banked
  8461  0022B0  256E               	addwf	?___wmul& (0+255),w,b
  8462  0022B2  6EF6               	movwf	tblptrl,c
  8463  0022B4  0EFB               	movlw	high __npowers_
  8464  0022B6  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  8465  0022B8  6EF7               	movwf	tblptrh,c
  8466  0022BA                     	if	0	;There are less than 3 active tblptr bytes
  8467  0022BA                     	endif
  8468  0022BA  0009               	tblrd		*+
  8469  0022BC  CFF5 F09D          	movff	tablat,___ftmul@f1
  8470  0022C0  0009               	tblrd		*+
  8471  0022C2  CFF5 F09E          	movff	tablat,___ftmul@f1+1
  8472  0022C6  000A               	tblrd		*-
  8473  0022C8  CFF5 F09F          	movff	tablat,___ftmul@f1+2
  8474  0022CC  ECB7  F015         	call	___ftmul	;wreg free
  8475  0022D0  C09D  F0B2         	movff	?___ftmul,_fround$5666
  8476  0022D4  C09E  F0B3         	movff	?___ftmul+1,_fround$5666+1
  8477  0022D8  C09F  F0B4         	movff	?___ftmul+2,_fround$5666+2
  8478                           
  8479                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8480  0022DC  C0B2  F09D         	movff	_fround$5666,___ftmul@f1
  8481  0022E0  C0B3  F09E         	movff	_fround$5666+1,___ftmul@f1+1
  8482  0022E4  C0B4  F09F         	movff	_fround$5666+2,___ftmul@f1+2
  8483  0022E8  0E00               	movlw	0
  8484  0022EA  0100               	movlb	0	; () banked
  8485  0022EC  6FA0               	movwf	___ftmul@f2& (0+255),b
  8486  0022EE  0E00               	movlw	0
  8487  0022F0  6FA1               	movwf	(___ftmul@f2+1)& (0+255),b
  8488  0022F2  0E3F               	movlw	63
  8489  0022F4  6FA2               	movwf	(___ftmul@f2+2)& (0+255),b
  8490  0022F6  ECB7  F015         	call	___ftmul	;wreg free
  8491  0022FA  C09D  F0AC         	movff	?___ftmul,?_fround
  8492  0022FE  C09E  F0AD         	movff	?___ftmul+1,?_fround+1
  8493  002302  C09F  F0AE         	movff	?___ftmul+2,?_fround+2
  8494  002306  0012               	return	
  8495  002308                     l2290:
  8496                           
  8497                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8498  002308  0100               	movlb	0	; () banked
  8499  00230A  51B5               	movf	fround@prec& (0+255),w,b
  8500  00230C  0D03               	mullw	3
  8501  00230E  0EBE               	movlw	low __npowers_
  8502  002310  24F3               	addwf	prodl,w,c
  8503  002312  6EF6               	movwf	tblptrl,c
  8504  002314  0EFB               	movlw	high __npowers_
  8505  002316  20F4               	addwfc	prodh,w,c
  8506  002318  6EF7               	movwf	tblptrh,c
  8507  00231A                     	if	0	;There are less than 3 active tblptr bytes
  8508  00231A                     	endif
  8509  00231A  0009               	tblrd		*+
  8510  00231C  CFF5 F09D          	movff	tablat,___ftmul@f1
  8511  002320  0009               	tblrd		*+
  8512  002322  CFF5 F09E          	movff	tablat,___ftmul@f1+1
  8513  002326  000A               	tblrd		*-
  8514  002328  CFF5 F09F          	movff	tablat,___ftmul@f1+2
  8515  00232C  0E00               	movlw	0
  8516  00232E  6FA0               	movwf	___ftmul@f2& (0+255),b
  8517  002330  0E00               	movlw	0
  8518  002332  6FA1               	movwf	(___ftmul@f2+1)& (0+255),b
  8519  002334  0E3F               	movlw	63
  8520  002336  6FA2               	movwf	(___ftmul@f2+2)& (0+255),b
  8521  002338  ECB7  F015         	call	___ftmul	;wreg free
  8522  00233C  C09D  F0AC         	movff	?___ftmul,?_fround
  8523  002340  C09E  F0AD         	movff	?___ftmul+1,?_fround+1
  8524  002344  C09F  F0AE         	movff	?___ftmul+2,?_fround+2
  8525  002348  0012               	return	
  8526  00234A                     __end_of_fround:
  8527                           	opt stack 0
  8528                           tblptru	equ	0xFF8
  8529                           tblptrh	equ	0xFF7
  8530                           tblptrl	equ	0xFF6
  8531                           tablat	equ	0xFF5
  8532                           prodh	equ	0xFF4
  8533                           prodl	equ	0xFF3
  8534                           postinc0	equ	0xFEE
  8535                           wreg	equ	0xFE8
  8536                           indf1	equ	0xFE7
  8537                           postdec1	equ	0xFE5
  8538                           fsr1h	equ	0xFE2
  8539                           fsr1l	equ	0xFE1
  8540                           indf2	equ	0xFDF
  8541                           postinc2	equ	0xFDE
  8542                           postdec2	equ	0xFDD
  8543                           fsr2h	equ	0xFDA
  8544                           fsr2l	equ	0xFD9
  8545                           status	equ	0xFD8
  8546                           
  8547 ;; *************** function ___wmul *****************
  8548 ;; Defined at:
  8549 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8550 ;; Parameters:    Size  Location     Type
  8551 ;;  multiplier      2   14[BANK0 ] unsigned int 
  8552 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  8553 ;; Auto vars:     Size  Location     Type
  8554 ;;  product         2   18[BANK0 ] unsigned int 
  8555 ;; Return value:  Size  Location     Type
  8556 ;;                  2   14[BANK0 ] unsigned int 
  8557 ;; Registers used:
  8558 ;;		wreg, status,2, status,0, prodl, prodh
  8559 ;; Tracked objects:
  8560 ;;		On entry : 0/0
  8561 ;;		On exit  : 0/0
  8562 ;;		Unchanged: 0/0
  8563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8564 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8565 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8567 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8568 ;;Total ram usage:        6 bytes
  8569 ;; Hardware stack levels used:    1
  8570 ;; Hardware stack levels required when called:    4
  8571 ;; This function calls:
  8572 ;;		Nothing
  8573 ;; This function is called by:
  8574 ;;		_fround
  8575 ;;		_scale
  8576 ;;		_sprintf
  8577 ;;		_TempDemo
  8578 ;;		_PrintTempLCD
  8579 ;; This function uses a non-reentrant model
  8580 ;;
  8581                           
  8582                           	psect	text5
  8583  0038F0                     __ptext5:
  8584                           	opt stack 0
  8585  0038F0                     ___wmul:
  8586                           	opt stack 24
  8587                           
  8588                           ;incstack = 0
  8589  0038F0  0100               	movlb	0	; () banked
  8590  0038F2  516E               	movf	___wmul@multiplier& (0+255),w,b
  8591  0038F4  0370               	mulwf	___wmul@multiplicand& (0+255),b
  8592  0038F6  CFF3 F072          	movff	prodl,___wmul@product
  8593  0038FA  CFF4 F073          	movff	prodh,___wmul@product+1
  8594  0038FE  516E               	movf	___wmul@multiplier& (0+255),w,b
  8595  003900  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  8596  003902  50F3               	movf	prodl,w,c
  8597  003904  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  8598  003906  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  8599  003908  0370               	mulwf	___wmul@multiplicand& (0+255),b
  8600  00390A  50F3               	movf	prodl,w,c
  8601  00390C  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  8602                           
  8603                           ; BSR set to: 0
  8604  00390E  C072  F06E         	movff	___wmul@product,?___wmul
  8605  003912  C073  F06F         	movff	___wmul@product+1,?___wmul+1
  8606  003916  0012               	return	
  8607  003918                     __end_of___wmul:
  8608                           	opt stack 0
  8609                           tblptru	equ	0xFF8
  8610                           tblptrh	equ	0xFF7
  8611                           tblptrl	equ	0xFF6
  8612                           tablat	equ	0xFF5
  8613                           prodh	equ	0xFF4
  8614                           prodl	equ	0xFF3
  8615                           postinc0	equ	0xFEE
  8616                           wreg	equ	0xFE8
  8617                           indf1	equ	0xFE7
  8618                           postdec1	equ	0xFE5
  8619                           fsr1h	equ	0xFE2
  8620                           fsr1l	equ	0xFE1
  8621                           indf2	equ	0xFDF
  8622                           postinc2	equ	0xFDE
  8623                           postdec2	equ	0xFDD
  8624                           fsr2h	equ	0xFDA
  8625                           fsr2l	equ	0xFD9
  8626                           status	equ	0xFD8
  8627                           
  8628 ;; *************** function ___awmod *****************
  8629 ;; Defined at:
  8630 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  8631 ;; Parameters:    Size  Location     Type
  8632 ;;  dividend        2    0[BANK0 ] int 
  8633 ;;  divisor         2    2[BANK0 ] int 
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;  sign            1    5[BANK0 ] unsigned char 
  8636 ;;  counter         1    4[BANK0 ] unsigned char 
  8637 ;; Return value:  Size  Location     Type
  8638 ;;                  2    0[BANK0 ] int 
  8639 ;; Registers used:
  8640 ;;		wreg, status,2, status,0
  8641 ;; Tracked objects:
  8642 ;;		On entry : 0/0
  8643 ;;		On exit  : 0/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8646 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8647 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8649 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8650 ;;Total ram usage:        6 bytes
  8651 ;; Hardware stack levels used:    1
  8652 ;; Hardware stack levels required when called:    4
  8653 ;; This function calls:
  8654 ;;		Nothing
  8655 ;; This function is called by:
  8656 ;;		_fround
  8657 ;;		_scale
  8658 ;;		_sprintf
  8659 ;;		_MiMAC_SetPower
  8660 ;; This function uses a non-reentrant model
  8661 ;;
  8662                           
  8663                           	psect	text6
  8664  00345E                     __ptext6:
  8665                           	opt stack 0
  8666  00345E                     ___awmod:
  8667                           	opt stack 24
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;incstack = 0
  8671  00345E  0E00               	movlw	0
  8672  003460  0100               	movlb	0	; () banked
  8673  003462  6F65               	movwf	___awmod@sign& (0+255),b
  8674                           
  8675                           ; BSR set to: 0
  8676  003464  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8677  003466  D006               	goto	l2777
  8678                           
  8679                           ; BSR set to: 0
  8680  003468  6D60               	negf	___awmod@dividend& (0+255),b
  8681  00346A  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  8682  00346C  B0D8               	btfsc	status,0,c
  8683  00346E  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  8684                           
  8685                           ; BSR set to: 0
  8686  003470  0E01               	movlw	1
  8687  003472  6F65               	movwf	___awmod@sign& (0+255),b
  8688  003474                     l2777:
  8689                           
  8690                           ; BSR set to: 0
  8691                           
  8692                           ; BSR set to: 0
  8693  003474  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8694  003476  D004               	goto	l2778
  8695                           
  8696                           ; BSR set to: 0
  8697  003478  6D62               	negf	___awmod@divisor& (0+255),b
  8698  00347A  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  8699  00347C  B0D8               	btfsc	status,0,c
  8700  00347E  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  8701  003480                     l2778:
  8702                           
  8703                           ; BSR set to: 0
  8704                           
  8705                           ; BSR set to: 0
  8706  003480  5162               	movf	___awmod@divisor& (0+255),w,b
  8707  003482  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8708  003484  B4D8               	btfsc	status,2,c
  8709  003486  D018               	goto	l2785
  8710                           
  8711                           ; BSR set to: 0
  8712  003488  0E01               	movlw	1
  8713  00348A  6F64               	movwf	___awmod@counter& (0+255),b
  8714  00348C  D004               	goto	l2780
  8715  00348E                     
  8716                           ; BSR set to: 0
  8717                           
  8718                           ; BSR set to: 0
  8719  00348E  90D8               	bcf	status,0,c
  8720  003490  3762               	rlcf	___awmod@divisor& (0+255),f,b
  8721  003492  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8722  003494  2B64               	incf	___awmod@counter& (0+255),f,b
  8723  003496                     l2780:
  8724                           
  8725                           ; BSR set to: 0
  8726                           
  8727                           ; BSR set to: 0
  8728  003496  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8729  003498  D7FA               	goto	l2781
  8730  00349A                     u22040:
  8731                           
  8732                           ; BSR set to: 0
  8733                           
  8734                           ; BSR set to: 0
  8735                           
  8736                           ; BSR set to: 0
  8737  00349A  5162               	movf	___awmod@divisor& (0+255),w,b
  8738  00349C  5D60               	subwf	___awmod@dividend& (0+255),w,b
  8739  00349E  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8740  0034A0  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8741  0034A2  A0D8               	btfss	status,0,c
  8742  0034A4  D004               	goto	l2784
  8743                           
  8744                           ; BSR set to: 0
  8745  0034A6  5162               	movf	___awmod@divisor& (0+255),w,b
  8746  0034A8  5F60               	subwf	___awmod@dividend& (0+255),f,b
  8747  0034AA  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8748  0034AC  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8749  0034AE                     l2784:
  8750                           
  8751                           ; BSR set to: 0
  8752                           
  8753                           ; BSR set to: 0
  8754  0034AE  90D8               	bcf	status,0,c
  8755  0034B0  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8756  0034B2  3362               	rrcf	___awmod@divisor& (0+255),f,b
  8757                           
  8758                           ; BSR set to: 0
  8759  0034B4  2F64               	decfsz	___awmod@counter& (0+255),f,b
  8760  0034B6  D7F1               	goto	u22040
  8761  0034B8                     l2785:
  8762                           
  8763                           ; BSR set to: 0
  8764                           
  8765                           ; BSR set to: 0
  8766                           
  8767                           ; BSR set to: 0
  8768  0034B8  5165               	movf	___awmod@sign& (0+255),w,b
  8769  0034BA  B4D8               	btfsc	status,2,c
  8770  0034BC  D004               	goto	l2786
  8771                           
  8772                           ; BSR set to: 0
  8773  0034BE  6D60               	negf	___awmod@dividend& (0+255),b
  8774  0034C0  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  8775  0034C2  B0D8               	btfsc	status,0,c
  8776  0034C4  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  8777  0034C6                     l2786:
  8778                           
  8779                           ; BSR set to: 0
  8780                           
  8781                           ; BSR set to: 0
  8782  0034C6  C060  F060         	movff	___awmod@dividend,?___awmod
  8783  0034CA  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  8784  0034CE  0012               	return	
  8785  0034D0                     __end_of___awmod:
  8786                           	opt stack 0
  8787                           tblptru	equ	0xFF8
  8788                           tblptrh	equ	0xFF7
  8789                           tblptrl	equ	0xFF6
  8790                           tablat	equ	0xFF5
  8791                           prodh	equ	0xFF4
  8792                           prodl	equ	0xFF3
  8793                           postinc0	equ	0xFEE
  8794                           wreg	equ	0xFE8
  8795                           indf1	equ	0xFE7
  8796                           postdec1	equ	0xFE5
  8797                           fsr1h	equ	0xFE2
  8798                           fsr1l	equ	0xFE1
  8799                           indf2	equ	0xFDF
  8800                           postinc2	equ	0xFDE
  8801                           postdec2	equ	0xFDD
  8802                           fsr2h	equ	0xFDA
  8803                           fsr2l	equ	0xFD9
  8804                           status	equ	0xFD8
  8805                           
  8806 ;; *************** function __tdiv_to_l_ *****************
  8807 ;; Defined at:
  8808 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  8809 ;; Parameters:    Size  Location     Type
  8810 ;;  f1              3    0[BANK0 ] float 
  8811 ;;  f2              3    3[BANK0 ] float 
  8812 ;; Auto vars:     Size  Location     Type
  8813 ;;  quot            4    9[BANK0 ] unsigned long 
  8814 ;;  exp1            1   14[BANK0 ] unsigned char 
  8815 ;;  cntr            1   13[BANK0 ] unsigned char 
  8816 ;; Return value:  Size  Location     Type
  8817 ;;                  4    0[BANK0 ] unsigned long 
  8818 ;; Registers used:
  8819 ;;		wreg, status,2, status,0
  8820 ;; Tracked objects:
  8821 ;;		On entry : 0/0
  8822 ;;		On exit  : 0/0
  8823 ;;		Unchanged: 0/0
  8824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8825 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8826 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8827 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8828 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8829 ;;Total ram usage:       15 bytes
  8830 ;; Hardware stack levels used:    1
  8831 ;; Hardware stack levels required when called:    4
  8832 ;; This function calls:
  8833 ;;		Nothing
  8834 ;; This function is called by:
  8835 ;;		_sprintf
  8836 ;; This function uses a non-reentrant model
  8837 ;;
  8838                           
  8839                           	psect	text7
  8840  002718                     __ptext7:
  8841                           	opt stack 0
  8842  002718                     __tdiv_to_l_:
  8843                           	opt stack 25
  8844                           
  8845                           ; BSR set to: 0
  8846                           ;incstack = 0
  8847  002718  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8848  00271C  0100               	movlb	0	; () banked
  8849  00271E  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8850  002720  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8851  002722  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8852  002724  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8853  002726  E301               	bnc	u22261
  8854  002728  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8855  00272A                     u22261:
  8856  00272A  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  8857  00272C  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  8858  00272E  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8859  002730  A4D8               	btfss	status,2,c
  8860  002732  D009               	goto	l2900
  8861                           
  8862                           ; BSR set to: 0
  8863  002734  0E00               	movlw	0
  8864  002736  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  8865  002738  0E00               	movlw	0
  8866  00273A  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8867  00273C  0E00               	movlw	0
  8868  00273E  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8869  002740  0E00               	movlw	0
  8870  002742  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8871                           
  8872                           ; BSR set to: 0
  8873  002744  0012               	return	
  8874  002746                     l2900:
  8875                           
  8876                           ; BSR set to: 0
  8877                           
  8878                           ; BSR set to: 0
  8879  002746  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8880  00274A  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8881  00274C  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8882  00274E  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8883  002750  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8884  002752  E301               	bnc	u22281
  8885  002754  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8886  002756                     u22281:
  8887  002756  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  8888  002758  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8889  00275A  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8890  00275C  A4D8               	btfss	status,2,c
  8891  00275E  D009               	goto	l2902
  8892                           
  8893                           ; BSR set to: 0
  8894  002760  0E00               	movlw	0
  8895  002762  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  8896  002764  0E00               	movlw	0
  8897  002766  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8898  002768  0E00               	movlw	0
  8899  00276A  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8900  00276C  0E00               	movlw	0
  8901  00276E  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8902                           
  8903                           ; BSR set to: 0
  8904  002770  0012               	return	
  8905  002772                     l2902:
  8906                           
  8907                           ; BSR set to: 0
  8908                           
  8909                           ; BSR set to: 0
  8910  002772  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  8911                           
  8912                           ; BSR set to: 0
  8913  002774  0EFF               	movlw	255
  8914  002776  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  8915  002778  0EFF               	movlw	255
  8916  00277A  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8917  00277C  0E00               	movlw	0
  8918  00277E  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8919  002780  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  8920                           
  8921                           ; BSR set to: 0
  8922  002782  0EFF               	movlw	255
  8923  002784  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  8924  002786  0EFF               	movlw	255
  8925  002788  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  8926  00278A  0E00               	movlw	0
  8927  00278C  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  8928                           
  8929                           ; BSR set to: 0
  8930  00278E  0E00               	movlw	0
  8931  002790  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
  8932  002792  0E00               	movlw	0
  8933  002794  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  8934  002796  0E00               	movlw	0
  8935  002798  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  8936  00279A  0E00               	movlw	0
  8937  00279C  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  8938                           
  8939                           ; BSR set to: 0
  8940  00279E  0E7F               	movlw	127
  8941  0027A0  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8942                           
  8943                           ; BSR set to: 0
  8944  0027A2  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8945  0027A4  0F98               	addlw	152
  8946  0027A6  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8947                           
  8948                           ; BSR set to: 0
  8949  0027A8  0E18               	movlw	24
  8950  0027AA  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8951  0027AC                     l2903:
  8952                           
  8953                           ; BSR set to: 0
  8954  0027AC  90D8               	bcf	status,0,c
  8955  0027AE  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8956  0027B0  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8957  0027B2  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8958  0027B4  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8959                           
  8960                           ; BSR set to: 0
  8961  0027B6  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8962  0027B8  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  8963  0027BA  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8964  0027BC  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8965  0027BE  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8966  0027C0  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  8967  0027C2  A0D8               	btfss	status,0,c
  8968  0027C4  D007               	goto	l2904
  8969                           
  8970                           ; BSR set to: 0
  8971  0027C6  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8972  0027C8  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  8973  0027CA  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8974  0027CC  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8975  0027CE  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8976  0027D0  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8977                           
  8978                           ; BSR set to: 0
  8979  0027D2  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  8980  0027D4                     l2904:
  8981                           
  8982                           ; BSR set to: 0
  8983  0027D4  90D8               	bcf	status,0,c
  8984  0027D6  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  8985  0027D8  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8986  0027DA  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8987                           
  8988                           ; BSR set to: 0
  8989  0027DC  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  8990  0027DE  D7E6               	goto	l2903
  8991                           
  8992                           ; BSR set to: 0
  8993                           
  8994                           ; BSR set to: 0
  8995  0027E0  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  8996  0027E2  D016               	goto	l2906
  8997                           
  8998                           ; BSR set to: 0
  8999  0027E4  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  9000  0027E6  0A80               	xorlw	128
  9001  0027E8  0F97               	addlw	151
  9002  0027EA  B0D8               	btfsc	status,0,c
  9003  0027EC  D009               	goto	l2907
  9004                           
  9005                           ; BSR set to: 0
  9006  0027EE  0E00               	movlw	0
  9007  0027F0  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  9008  0027F2  0E00               	movlw	0
  9009  0027F4  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  9010  0027F6  0E00               	movlw	0
  9011  0027F8  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  9012  0027FA  0E00               	movlw	0
  9013  0027FC  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  9014                           
  9015                           ; BSR set to: 0
  9016  0027FE  0012               	return	
  9017  002800                     l2907:
  9018                           
  9019                           ; BSR set to: 0
  9020                           
  9021                           ; BSR set to: 0
  9022                           
  9023                           ; BSR set to: 0
  9024  002800  90D8               	bcf	status,0,c
  9025  002802  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  9026  002804  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  9027  002806  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  9028  002808  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  9029                           
  9030                           ; BSR set to: 0
  9031  00280A  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  9032  00280C  D7F9               	goto	l2907
  9033                           
  9034                           ; BSR set to: 0
  9035  00280E  D015               	goto	u22340
  9036  002810                     l2906:
  9037                           
  9038                           ; BSR set to: 0
  9039                           
  9040                           ; BSR set to: 0
  9041  002810  0E17               	movlw	23
  9042  002812  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  9043  002814  D00F               	goto	l2912
  9044                           
  9045                           ; BSR set to: 0
  9046  002816  0E00               	movlw	0
  9047  002818  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  9048  00281A  0E00               	movlw	0
  9049  00281C  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  9050  00281E  0E00               	movlw	0
  9051  002820  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  9052  002822  0E00               	movlw	0
  9053  002824  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  9054                           
  9055                           ; BSR set to: 0
  9056  002826  0012               	return	
  9057  002828                     
  9058                           ; BSR set to: 0
  9059                           
  9060                           ; BSR set to: 0
  9061  002828  90D8               	bcf	status,0,c
  9062  00282A  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  9063  00282C  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  9064  00282E  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  9065  002830  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  9066  002832  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  9067  002834                     l2912:
  9068                           
  9069                           ; BSR set to: 0
  9070                           
  9071                           ; BSR set to: 0
  9072  002834  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  9073  002836  A4D8               	btfss	status,2,c
  9074  002838  D7F7               	goto	l2913
  9075  00283A                     u22340:
  9076                           
  9077                           ; BSR set to: 0
  9078                           
  9079                           ; BSR set to: 0
  9080  00283A  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  9081  00283E  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  9082  002842  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  9083  002846  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  9084                           
  9085                           ; BSR set to: 0
  9086  00284A  0012               	return		;funcret
  9087  00284C                     __end_of__tdiv_to_l_:
  9088                           	opt stack 0
  9089                           tblptru	equ	0xFF8
  9090                           tblptrh	equ	0xFF7
  9091                           tblptrl	equ	0xFF6
  9092                           tablat	equ	0xFF5
  9093                           prodh	equ	0xFF4
  9094                           prodl	equ	0xFF3
  9095                           postinc0	equ	0xFEE
  9096                           wreg	equ	0xFE8
  9097                           indf1	equ	0xFE7
  9098                           postdec1	equ	0xFE5
  9099                           fsr1h	equ	0xFE2
  9100                           fsr1l	equ	0xFE1
  9101                           indf2	equ	0xFDF
  9102                           postinc2	equ	0xFDE
  9103                           postdec2	equ	0xFDD
  9104                           fsr2h	equ	0xFDA
  9105                           fsr2l	equ	0xFD9
  9106                           status	equ	0xFD8
  9107                           
  9108 ;; *************** function __div_to_l_ *****************
  9109 ;; Defined at:
  9110 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  9111 ;; Parameters:    Size  Location     Type
  9112 ;;  f1              3    0[BANK0 ] unsigned long 
  9113 ;;  f2              3    3[BANK0 ] unsigned long 
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;  quot            4    6[BANK0 ] unsigned long 
  9116 ;;  exp1            1   11[BANK0 ] unsigned char 
  9117 ;;  cntr            1   10[BANK0 ] unsigned char 
  9118 ;; Return value:  Size  Location     Type
  9119 ;;                  4    0[BANK0 ] unsigned long 
  9120 ;; Registers used:
  9121 ;;		wreg, status,2, status,0
  9122 ;; Tracked objects:
  9123 ;;		On entry : 0/0
  9124 ;;		On exit  : 0/0
  9125 ;;		Unchanged: 0/0
  9126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9127 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9128 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9130 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9131 ;;Total ram usage:       12 bytes
  9132 ;; Hardware stack levels used:    1
  9133 ;; Hardware stack levels required when called:    4
  9134 ;; This function calls:
  9135 ;;		Nothing
  9136 ;; This function is called by:
  9137 ;;		_sprintf
  9138 ;; This function uses a non-reentrant model
  9139 ;;
  9140                           
  9141                           	psect	text8
  9142  00284C                     __ptext8:
  9143                           	opt stack 0
  9144  00284C                     __div_to_l_:
  9145                           	opt stack 25
  9146                           
  9147                           ; BSR set to: 0
  9148                           ;incstack = 0
  9149  00284C  0100               	movlb	0	; () banked
  9150  00284E  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  9151  002850  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  9152  002852  6F6B               	movwf	__div_to_l_@exp1& (0+255),b
  9153  002854  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  9154  002856  A4D8               	btfss	status,2,c
  9155  002858  D009               	goto	l2796
  9156                           
  9157                           ; BSR set to: 0
  9158  00285A  0E00               	movlw	0
  9159  00285C  6F60               	movwf	?__div_to_l_& (0+255),b
  9160  00285E  0E00               	movlw	0
  9161  002860  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  9162  002862  0E00               	movlw	0
  9163  002864  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  9164  002866  0E00               	movlw	0
  9165  002868  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  9166                           
  9167                           ; BSR set to: 0
  9168  00286A  0012               	return	
  9169  00286C                     l2796:
  9170                           
  9171                           ; BSR set to: 0
  9172                           
  9173                           ; BSR set to: 0
  9174  00286C  3565               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  9175  00286E  3566               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  9176  002870  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  9177  002872  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  9178  002874  A4D8               	btfss	status,2,c
  9179  002876  D009               	goto	l2798
  9180                           
  9181                           ; BSR set to: 0
  9182  002878  0E00               	movlw	0
  9183  00287A  6F60               	movwf	?__div_to_l_& (0+255),b
  9184  00287C  0E00               	movlw	0
  9185  00287E  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  9186  002880  0E00               	movlw	0
  9187  002882  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  9188  002884  0E00               	movlw	0
  9189  002886  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  9190                           
  9191                           ; BSR set to: 0
  9192  002888  0012               	return	
  9193  00288A                     l2798:
  9194                           
  9195                           ; BSR set to: 0
  9196                           
  9197                           ; BSR set to: 0
  9198  00288A  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  9199                           
  9200                           ; BSR set to: 0
  9201  00288C  0EFF               	movlw	255
  9202  00288E  1760               	andwf	__div_to_l_@f1& (0+255),f,b
  9203  002890  0EFF               	movlw	255
  9204  002892  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  9205  002894  0EFF               	movlw	255
  9206  002896  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  9207  002898  0E00               	movlw	0
  9208  00289A  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  9209                           
  9210                           ; BSR set to: 0
  9211  00289C  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  9212  00289E  0EFF               	movlw	255
  9213  0028A0  1763               	andwf	__div_to_l_@f2& (0+255),f,b
  9214  0028A2  0EFF               	movlw	255
  9215  0028A4  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  9216  0028A6  0EFF               	movlw	255
  9217  0028A8  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  9218  0028AA  0E00               	movlw	0
  9219  0028AC  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  9220                           
  9221                           ; BSR set to: 0
  9222  0028AE  0E00               	movlw	0
  9223  0028B0  6F66               	movwf	__div_to_l_@quot& (0+255),b
  9224  0028B2  0E00               	movlw	0
  9225  0028B4  6F67               	movwf	(__div_to_l_@quot+1)& (0+255),b
  9226  0028B6  0E00               	movlw	0
  9227  0028B8  6F68               	movwf	(__div_to_l_@quot+2)& (0+255),b
  9228  0028BA  0E00               	movlw	0
  9229  0028BC  6F69               	movwf	(__div_to_l_@quot+3)& (0+255),b
  9230                           
  9231                           ; BSR set to: 0
  9232  0028BE  0E7F               	movlw	127
  9233  0028C0  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  9234                           
  9235                           ; BSR set to: 0
  9236  0028C2  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  9237  0028C4  0FA0               	addlw	160
  9238  0028C6  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  9239                           
  9240                           ; BSR set to: 0
  9241  0028C8  0E20               	movlw	32
  9242  0028CA  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  9243  0028CC                     
  9244                           ; BSR set to: 0
  9245                           
  9246                           ; BSR set to: 0
  9247  0028CC  90D8               	bcf	status,0,c
  9248  0028CE  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  9249  0028D0  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9250  0028D2  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9251  0028D4  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9252                           
  9253                           ; BSR set to: 0
  9254  0028D6  5163               	movf	__div_to_l_@f2& (0+255),w,b
  9255  0028D8  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
  9256  0028DA  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  9257  0028DC  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  9258  0028DE  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9259  0028E0  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  9260  0028E2  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9261  0028E4  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  9262  0028E6  A0D8               	btfss	status,0,c
  9263  0028E8  D009               	goto	l2800
  9264                           
  9265                           ; BSR set to: 0
  9266  0028EA  5163               	movf	__div_to_l_@f2& (0+255),w,b
  9267  0028EC  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
  9268  0028EE  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  9269  0028F0  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  9270  0028F2  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9271  0028F4  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  9272  0028F6  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9273  0028F8  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  9274                           
  9275                           ; BSR set to: 0
  9276  0028FA  8166               	bsf	__div_to_l_@quot& (0+255),0,b
  9277  0028FC                     l2800:
  9278                           
  9279                           ; BSR set to: 0
  9280                           
  9281                           ; BSR set to: 0
  9282  0028FC  90D8               	bcf	status,0,c
  9283  0028FE  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
  9284  002900  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  9285  002902  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  9286  002904  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  9287                           
  9288                           ; BSR set to: 0
  9289  002906  2F6A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  9290  002908  D7E1               	goto	l2799
  9291                           
  9292                           ; BSR set to: 0
  9293                           
  9294                           ; BSR set to: 0
  9295  00290A  AF6B               	btfss	__div_to_l_@exp1& (0+255),7,b
  9296  00290C  D016               	goto	l2802
  9297                           
  9298                           ; BSR set to: 0
  9299  00290E  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  9300  002910  0A80               	xorlw	128
  9301  002912  0F9F               	addlw	159
  9302  002914  B0D8               	btfsc	status,0,c
  9303  002916  D009               	goto	l2803
  9304                           
  9305                           ; BSR set to: 0
  9306  002918  0E00               	movlw	0
  9307  00291A  6F60               	movwf	?__div_to_l_& (0+255),b
  9308  00291C  0E00               	movlw	0
  9309  00291E  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  9310  002920  0E00               	movlw	0
  9311  002922  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  9312  002924  0E00               	movlw	0
  9313  002926  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  9314                           
  9315                           ; BSR set to: 0
  9316  002928  0012               	return	
  9317  00292A                     l2803:
  9318                           
  9319                           ; BSR set to: 0
  9320                           
  9321                           ; BSR set to: 0
  9322                           
  9323                           ; BSR set to: 0
  9324  00292A  90D8               	bcf	status,0,c
  9325  00292C  3369               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  9326  00292E  3368               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  9327  002930  3367               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  9328  002932  3366               	rrcf	__div_to_l_@quot& (0+255),f,b
  9329                           
  9330                           ; BSR set to: 0
  9331  002934  3F6B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  9332  002936  D7F9               	goto	l2803
  9333                           
  9334                           ; BSR set to: 0
  9335  002938  D015               	goto	u22410
  9336  00293A                     l2802:
  9337                           
  9338                           ; BSR set to: 0
  9339                           
  9340                           ; BSR set to: 0
  9341  00293A  0E1F               	movlw	31
  9342  00293C  656B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  9343  00293E  D00F               	goto	l2808
  9344                           
  9345                           ; BSR set to: 0
  9346  002940  0E00               	movlw	0
  9347  002942  6F60               	movwf	?__div_to_l_& (0+255),b
  9348  002944  0E00               	movlw	0
  9349  002946  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  9350  002948  0E00               	movlw	0
  9351  00294A  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  9352  00294C  0E00               	movlw	0
  9353  00294E  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  9354                           
  9355                           ; BSR set to: 0
  9356  002950  0012               	return	
  9357  002952                     
  9358                           ; BSR set to: 0
  9359                           
  9360                           ; BSR set to: 0
  9361  002952  90D8               	bcf	status,0,c
  9362  002954  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  9363  002956  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9364  002958  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9365  00295A  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9366  00295C  076B               	decf	__div_to_l_@exp1& (0+255),f,b
  9367  00295E                     l2808:
  9368                           
  9369                           ; BSR set to: 0
  9370                           
  9371                           ; BSR set to: 0
  9372  00295E  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  9373  002960  A4D8               	btfss	status,2,c
  9374  002962  D7F7               	goto	l2809
  9375  002964                     u22410:
  9376                           
  9377                           ; BSR set to: 0
  9378                           
  9379                           ; BSR set to: 0
  9380  002964  C066  F060         	movff	__div_to_l_@quot,?__div_to_l_
  9381  002968  C067  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9382  00296C  C068  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9383  002970  C069  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9384                           
  9385                           ; BSR set to: 0
  9386  002974  0012               	return		;funcret
  9387  002976                     __end_of__div_to_l_:
  9388                           	opt stack 0
  9389                           tblptru	equ	0xFF8
  9390                           tblptrh	equ	0xFF7
  9391                           tblptrl	equ	0xFF6
  9392                           tablat	equ	0xFF5
  9393                           prodh	equ	0xFF4
  9394                           prodl	equ	0xFF3
  9395                           postinc0	equ	0xFEE
  9396                           wreg	equ	0xFE8
  9397                           indf1	equ	0xFE7
  9398                           postdec1	equ	0xFE5
  9399                           fsr1h	equ	0xFE2
  9400                           fsr1l	equ	0xFE1
  9401                           indf2	equ	0xFDF
  9402                           postinc2	equ	0xFDE
  9403                           postdec2	equ	0xFDD
  9404                           fsr2h	equ	0xFDA
  9405                           fsr2l	equ	0xFD9
  9406                           status	equ	0xFD8
  9407                           
  9408 ;; *************** function ___lltoft *****************
  9409 ;; Defined at:
  9410 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  9411 ;; Parameters:    Size  Location     Type
  9412 ;;  c               4   49[BANK0 ] unsigned long 
  9413 ;; Auto vars:     Size  Location     Type
  9414 ;;  exp             1   57[BANK0 ] unsigned char 
  9415 ;; Return value:  Size  Location     Type
  9416 ;;                  3   49[BANK0 ] float 
  9417 ;; Registers used:
  9418 ;;		wreg, status,2, status,0, cstack
  9419 ;; Tracked objects:
  9420 ;;		On entry : 0/0
  9421 ;;		On exit  : 0/0
  9422 ;;		Unchanged: 0/0
  9423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9424 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9426 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9427 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9428 ;;Total ram usage:        9 bytes
  9429 ;; Hardware stack levels used:    1
  9430 ;; Hardware stack levels required when called:    5
  9431 ;; This function calls:
  9432 ;;		___ftpack
  9433 ;; This function is called by:
  9434 ;;		_sprintf
  9435 ;; This function uses a non-reentrant model
  9436 ;;
  9437                           
  9438                           	psect	text9
  9439  00360A                     __ptext9:
  9440                           	opt stack 0
  9441  00360A                     ___lltoft:
  9442                           	opt stack 24
  9443                           
  9444                           ; BSR set to: 0
  9445                           ;incstack = 0
  9446  00360A  0E8E               	movlw	142
  9447  00360C  0100               	movlb	0	; () banked
  9448  00360E  6F99               	movwf	___lltoft@exp& (0+255),b
  9449  003610  D006               	goto	l3007
  9450  003612                     
  9451                           ; BSR set to: 0
  9452                           
  9453                           ; BSR set to: 0
  9454  003612  90D8               	bcf	status,0,c
  9455  003614  3394               	rrcf	(___lltoft@c+3)& (0+255),f,b
  9456  003616  3393               	rrcf	(___lltoft@c+2)& (0+255),f,b
  9457  003618  3392               	rrcf	(___lltoft@c+1)& (0+255),f,b
  9458  00361A  3391               	rrcf	___lltoft@c& (0+255),f,b
  9459  00361C  2B99               	incf	___lltoft@exp& (0+255),f,b
  9460  00361E                     l3007:
  9461                           
  9462                           ; BSR set to: 0
  9463                           
  9464                           ; BSR set to: 0
  9465  00361E  0E00               	movlw	0
  9466  003620  1591               	andwf	___lltoft@c& (0+255),w,b
  9467  003622  6F95               	movwf	??___lltoft& (0+255),b
  9468  003624  0E00               	movlw	0
  9469  003626  1592               	andwf	(___lltoft@c+1)& (0+255),w,b
  9470  003628  6F96               	movwf	(??___lltoft+1)& (0+255),b
  9471  00362A  0E00               	movlw	0
  9472  00362C  1593               	andwf	(___lltoft@c+2)& (0+255),w,b
  9473  00362E  6F97               	movwf	(??___lltoft+2)& (0+255),b
  9474  003630  0EFF               	movlw	255
  9475  003632  1594               	andwf	(___lltoft@c+3)& (0+255),w,b
  9476  003634  6F98               	movwf	(??___lltoft+3)& (0+255),b
  9477  003636  5195               	movf	??___lltoft& (0+255),w,b
  9478  003638  1196               	iorwf	(??___lltoft+1)& (0+255),w,b
  9479  00363A  1197               	iorwf	(??___lltoft+2)& (0+255),w,b
  9480  00363C  1198               	iorwf	(??___lltoft+3)& (0+255),w,b
  9481  00363E  A4D8               	btfss	status,2,c
  9482  003640  D7E8               	goto	l3008
  9483                           
  9484                           ; BSR set to: 0
  9485                           
  9486                           ; BSR set to: 0
  9487  003642  C091  F060         	movff	___lltoft@c,___ftpack@arg
  9488  003646  C092  F061         	movff	___lltoft@c+1,___ftpack@arg+1
  9489  00364A  C093  F062         	movff	___lltoft@c+2,___ftpack@arg+2
  9490  00364E  C099  F063         	movff	___lltoft@exp,___ftpack@exp
  9491  003652  0E00               	movlw	0
  9492  003654  6F64               	movwf	___ftpack@sign& (0+255),b
  9493  003656  ECFF  F016         	call	___ftpack	;wreg free
  9494  00365A  C060  F091         	movff	?___ftpack,?___lltoft
  9495  00365E  C061  F092         	movff	?___ftpack+1,?___lltoft+1
  9496  003662  C062  F093         	movff	?___ftpack+2,?___lltoft+2
  9497  003666  0012               	return	
  9498  003668                     __end_of___lltoft:
  9499                           	opt stack 0
  9500                           tblptru	equ	0xFF8
  9501                           tblptrh	equ	0xFF7
  9502                           tblptrl	equ	0xFF6
  9503                           tablat	equ	0xFF5
  9504                           prodh	equ	0xFF4
  9505                           prodl	equ	0xFF3
  9506                           postinc0	equ	0xFEE
  9507                           wreg	equ	0xFE8
  9508                           indf1	equ	0xFE7
  9509                           postdec1	equ	0xFE5
  9510                           fsr1h	equ	0xFE2
  9511                           fsr1l	equ	0xFE1
  9512                           indf2	equ	0xFDF
  9513                           postinc2	equ	0xFDE
  9514                           postdec2	equ	0xFDD
  9515                           fsr2h	equ	0xFDA
  9516                           fsr2l	equ	0xFD9
  9517                           status	equ	0xFD8
  9518                           
  9519 ;; *************** function ___llmod *****************
  9520 ;; Defined at:
  9521 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9522 ;; Parameters:    Size  Location     Type
  9523 ;;  dividend        4   13[BANK0 ] unsigned long 
  9524 ;;  divisor         4   17[BANK0 ] unsigned long 
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;  counter         1   21[BANK0 ] unsigned char 
  9527 ;; Return value:  Size  Location     Type
  9528 ;;                  4   13[BANK0 ] unsigned long 
  9529 ;; Registers used:
  9530 ;;		wreg, status,2, status,0
  9531 ;; Tracked objects:
  9532 ;;		On entry : 0/0
  9533 ;;		On exit  : 0/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9536 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9537 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9539 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9540 ;;Total ram usage:        9 bytes
  9541 ;; Hardware stack levels used:    1
  9542 ;; Hardware stack levels required when called:    4
  9543 ;; This function calls:
  9544 ;;		Nothing
  9545 ;; This function is called by:
  9546 ;;		_sprintf
  9547 ;; This function uses a non-reentrant model
  9548 ;;
  9549                           
  9550                           	psect	text10
  9551  00353A                     __ptext10:
  9552                           	opt stack 0
  9553  00353A                     ___llmod:
  9554                           	opt stack 25
  9555                           
  9556                           ;incstack = 0
  9557  00353A  0100               	movlb	0	; () banked
  9558  00353C  5171               	movf	___llmod@divisor& (0+255),w,b
  9559  00353E  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  9560  003540  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  9561  003542  1174               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  9562  003544  B4D8               	btfsc	status,2,c
  9563  003546  D024               	goto	l3001
  9564                           
  9565                           ; BSR set to: 0
  9566  003548  0E01               	movlw	1
  9567  00354A  6F75               	movwf	___llmod@counter& (0+255),b
  9568  00354C  D006               	goto	l2996
  9569  00354E                     
  9570                           ; BSR set to: 0
  9571                           
  9572                           ; BSR set to: 0
  9573  00354E  90D8               	bcf	status,0,c
  9574  003550  3771               	rlcf	___llmod@divisor& (0+255),f,b
  9575  003552  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  9576  003554  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  9577  003556  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  9578  003558  2B75               	incf	___llmod@counter& (0+255),f,b
  9579  00355A                     l2996:
  9580                           
  9581                           ; BSR set to: 0
  9582                           
  9583                           ; BSR set to: 0
  9584  00355A  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
  9585  00355C  D7F8               	goto	l2997
  9586  00355E                     u22530:
  9587                           
  9588                           ; BSR set to: 0
  9589                           
  9590                           ; BSR set to: 0
  9591                           
  9592                           ; BSR set to: 0
  9593  00355E  5171               	movf	___llmod@divisor& (0+255),w,b
  9594  003560  5D6D               	subwf	___llmod@dividend& (0+255),w,b
  9595  003562  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  9596  003564  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  9597  003566  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  9598  003568  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  9599  00356A  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  9600  00356C  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  9601  00356E  A0D8               	btfss	status,0,c
  9602  003570  D008               	goto	l3000
  9603                           
  9604                           ; BSR set to: 0
  9605  003572  5171               	movf	___llmod@divisor& (0+255),w,b
  9606  003574  5F6D               	subwf	___llmod@dividend& (0+255),f,b
  9607  003576  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  9608  003578  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  9609  00357A  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  9610  00357C  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  9611  00357E  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  9612  003580  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  9613  003582                     l3000:
  9614                           
  9615                           ; BSR set to: 0
  9616                           
  9617                           ; BSR set to: 0
  9618  003582  90D8               	bcf	status,0,c
  9619  003584  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  9620  003586  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  9621  003588  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  9622  00358A  3371               	rrcf	___llmod@divisor& (0+255),f,b
  9623                           
  9624                           ; BSR set to: 0
  9625  00358C  2F75               	decfsz	___llmod@counter& (0+255),f,b
  9626  00358E  D7E7               	goto	u22530
  9627  003590                     l3001:
  9628                           
  9629                           ; BSR set to: 0
  9630                           
  9631                           ; BSR set to: 0
  9632  003590  C06D  F06D         	movff	___llmod@dividend,?___llmod
  9633  003594  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
  9634  003598  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
  9635  00359C  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
  9636                           
  9637                           ; BSR set to: 0
  9638  0035A0  0012               	return		;funcret
  9639  0035A2                     __end_of___llmod:
  9640                           	opt stack 0
  9641                           tblptru	equ	0xFF8
  9642                           tblptrh	equ	0xFF7
  9643                           tblptrl	equ	0xFF6
  9644                           tablat	equ	0xFF5
  9645                           prodh	equ	0xFF4
  9646                           prodl	equ	0xFF3
  9647                           postinc0	equ	0xFEE
  9648                           wreg	equ	0xFE8
  9649                           indf1	equ	0xFE7
  9650                           postdec1	equ	0xFE5
  9651                           fsr1h	equ	0xFE2
  9652                           fsr1l	equ	0xFE1
  9653                           indf2	equ	0xFDF
  9654                           postinc2	equ	0xFDE
  9655                           postdec2	equ	0xFDD
  9656                           fsr2h	equ	0xFDA
  9657                           fsr2l	equ	0xFD9
  9658                           status	equ	0xFD8
  9659                           
  9660 ;; *************** function ___lldiv *****************
  9661 ;; Defined at:
  9662 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  9663 ;; Parameters:    Size  Location     Type
  9664 ;;  dividend        4    0[BANK0 ] unsigned long 
  9665 ;;  divisor         4    4[BANK0 ] unsigned long 
  9666 ;; Auto vars:     Size  Location     Type
  9667 ;;  quotient        4    8[BANK0 ] unsigned long 
  9668 ;;  counter         1   12[BANK0 ] unsigned char 
  9669 ;; Return value:  Size  Location     Type
  9670 ;;                  4    0[BANK0 ] unsigned long 
  9671 ;; Registers used:
  9672 ;;		wreg, status,2, status,0
  9673 ;; Tracked objects:
  9674 ;;		On entry : 0/0
  9675 ;;		On exit  : 0/0
  9676 ;;		Unchanged: 0/0
  9677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9678 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9679 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9681 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9682 ;;Total ram usage:       13 bytes
  9683 ;; Hardware stack levels used:    1
  9684 ;; Hardware stack levels required when called:    4
  9685 ;; This function calls:
  9686 ;;		Nothing
  9687 ;; This function is called by:
  9688 ;;		_sprintf
  9689 ;; This function uses a non-reentrant model
  9690 ;;
  9691                           
  9692                           	psect	text11
  9693  0032DA                     __ptext11:
  9694                           	opt stack 0
  9695  0032DA                     ___lldiv:
  9696                           	opt stack 25
  9697                           
  9698                           ; BSR set to: 0
  9699                           ;incstack = 0
  9700  0032DA  0E00               	movlw	0
  9701  0032DC  0100               	movlb	0	; () banked
  9702  0032DE  6F68               	movwf	___lldiv@quotient& (0+255),b
  9703  0032E0  0E00               	movlw	0
  9704  0032E2  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  9705  0032E4  0E00               	movlw	0
  9706  0032E6  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  9707  0032E8  0E00               	movlw	0
  9708  0032EA  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  9709                           
  9710                           ; BSR set to: 0
  9711  0032EC  5164               	movf	___lldiv@divisor& (0+255),w,b
  9712  0032EE  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  9713  0032F0  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  9714  0032F2  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  9715  0032F4  B4D8               	btfsc	status,2,c
  9716  0032F6  D02A               	goto	l2991
  9717                           
  9718                           ; BSR set to: 0
  9719  0032F8  0E01               	movlw	1
  9720  0032FA  6F6C               	movwf	___lldiv@counter& (0+255),b
  9721  0032FC  D006               	goto	l2986
  9722  0032FE                     
  9723                           ; BSR set to: 0
  9724                           
  9725                           ; BSR set to: 0
  9726  0032FE  90D8               	bcf	status,0,c
  9727  003300  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  9728  003302  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  9729  003304  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  9730  003306  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  9731  003308  2B6C               	incf	___lldiv@counter& (0+255),f,b
  9732  00330A                     l2986:
  9733                           
  9734                           ; BSR set to: 0
  9735                           
  9736                           ; BSR set to: 0
  9737  00330A  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  9738  00330C  D7F8               	goto	l2987
  9739  00330E                     u22500:
  9740                           
  9741                           ; BSR set to: 0
  9742                           
  9743                           ; BSR set to: 0
  9744                           
  9745                           ; BSR set to: 0
  9746  00330E  90D8               	bcf	status,0,c
  9747  003310  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  9748  003312  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  9749  003314  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  9750  003316  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  9751                           
  9752                           ; BSR set to: 0
  9753  003318  5164               	movf	___lldiv@divisor& (0+255),w,b
  9754  00331A  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  9755  00331C  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  9756  00331E  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  9757  003320  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  9758  003322  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  9759  003324  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9760  003326  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  9761  003328  A0D8               	btfss	status,0,c
  9762  00332A  D009               	goto	l2990
  9763                           
  9764                           ; BSR set to: 0
  9765  00332C  5164               	movf	___lldiv@divisor& (0+255),w,b
  9766  00332E  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  9767  003330  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  9768  003332  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  9769  003334  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  9770  003336  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  9771  003338  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9772  00333A  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  9773                           
  9774                           ; BSR set to: 0
  9775  00333C  8168               	bsf	___lldiv@quotient& (0+255),0,b
  9776  00333E                     l2990:
  9777                           
  9778                           ; BSR set to: 0
  9779                           
  9780                           ; BSR set to: 0
  9781  00333E  90D8               	bcf	status,0,c
  9782  003340  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  9783  003342  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  9784  003344  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  9785  003346  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  9786                           
  9787                           ; BSR set to: 0
  9788  003348  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  9789  00334A  D7E1               	goto	u22500
  9790  00334C                     l2991:
  9791                           
  9792                           ; BSR set to: 0
  9793                           
  9794                           ; BSR set to: 0
  9795  00334C  C068  F060         	movff	___lldiv@quotient,?___lldiv
  9796  003350  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  9797  003354  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  9798  003358  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  9799                           
  9800                           ; BSR set to: 0
  9801  00335C  0012               	return		;funcret
  9802  00335E                     __end_of___lldiv:
  9803                           	opt stack 0
  9804                           tblptru	equ	0xFF8
  9805                           tblptrh	equ	0xFF7
  9806                           tblptrl	equ	0xFF6
  9807                           tablat	equ	0xFF5
  9808                           prodh	equ	0xFF4
  9809                           prodl	equ	0xFF3
  9810                           postinc0	equ	0xFEE
  9811                           wreg	equ	0xFE8
  9812                           indf1	equ	0xFE7
  9813                           postdec1	equ	0xFE5
  9814                           fsr1h	equ	0xFE2
  9815                           fsr1l	equ	0xFE1
  9816                           indf2	equ	0xFDF
  9817                           postinc2	equ	0xFDE
  9818                           postdec2	equ	0xFDD
  9819                           fsr2h	equ	0xFDA
  9820                           fsr2l	equ	0xFD9
  9821                           status	equ	0xFD8
  9822                           
  9823 ;; *************** function ___ftsub *****************
  9824 ;; Defined at:
  9825 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  9826 ;; Parameters:    Size  Location     Type
  9827 ;;  f1              3   98[BANK0 ] float 
  9828 ;;  f2              3  101[BANK0 ] float 
  9829 ;; Auto vars:     Size  Location     Type
  9830 ;;		None
  9831 ;; Return value:  Size  Location     Type
  9832 ;;                  3   98[BANK0 ] float 
  9833 ;; Registers used:
  9834 ;;		wreg, status,2, status,0, cstack
  9835 ;; Tracked objects:
  9836 ;;		On entry : 0/0
  9837 ;;		On exit  : 0/0
  9838 ;;		Unchanged: 0/0
  9839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9840 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9843 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9844 ;;Total ram usage:        6 bytes
  9845 ;; Hardware stack levels used:    1
  9846 ;; Hardware stack levels required when called:    6
  9847 ;; This function calls:
  9848 ;;		___ftadd
  9849 ;; This function is called by:
  9850 ;;		_sprintf
  9851 ;; This function uses a non-reentrant model
  9852 ;;
  9853                           
  9854                           	psect	text12
  9855  003810                     __ptext12:
  9856                           	opt stack 0
  9857  003810                     ___ftsub:
  9858                           	opt stack 23
  9859                           
  9860                           ; BSR set to: 0
  9861                           ;incstack = 0
  9862  003810  0100               	movlb	0	; () banked
  9863  003812  51C5               	movf	___ftsub@f2& (0+255),w,b
  9864  003814  11C6               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9865  003816  11C7               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9866  003818  B4D8               	btfsc	status,2,c
  9867  00381A  D006               	goto	l2941
  9868                           
  9869                           ; BSR set to: 0
  9870  00381C  0E00               	movlw	0
  9871  00381E  1BC5               	xorwf	___ftsub@f2& (0+255),f,b
  9872  003820  0E00               	movlw	0
  9873  003822  1BC6               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9874  003824  0E80               	movlw	128
  9875  003826  1BC7               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9876  003828                     l2941:
  9877                           
  9878                           ; BSR set to: 0
  9879                           
  9880                           ; BSR set to: 0
  9881  003828  C0C2  F0B6         	movff	___ftsub@f1,___ftadd@f1
  9882  00382C  C0C3  F0B7         	movff	___ftsub@f1+1,___ftadd@f1+1
  9883  003830  C0C4  F0B8         	movff	___ftsub@f1+2,___ftadd@f1+2
  9884  003834  C0C5  F0B9         	movff	___ftsub@f2,___ftadd@f2
  9885  003838  C0C6  F0BA         	movff	___ftsub@f2+1,___ftadd@f2+1
  9886  00383C  C0C7  F0BB         	movff	___ftsub@f2+2,___ftadd@f2+2
  9887  003840  ECB5  F012         	call	___ftadd	;wreg free
  9888  003844  C0B6  F0C2         	movff	?___ftadd,?___ftsub
  9889  003848  C0B7  F0C3         	movff	?___ftadd+1,?___ftsub+1
  9890  00384C  C0B8  F0C4         	movff	?___ftadd+2,?___ftsub+2
  9891  003850  0012               	return	
  9892  003852                     __end_of___ftsub:
  9893                           	opt stack 0
  9894                           tblptru	equ	0xFF8
  9895                           tblptrh	equ	0xFF7
  9896                           tblptrl	equ	0xFF6
  9897                           tablat	equ	0xFF5
  9898                           prodh	equ	0xFF4
  9899                           prodl	equ	0xFF3
  9900                           postinc0	equ	0xFEE
  9901                           wreg	equ	0xFE8
  9902                           indf1	equ	0xFE7
  9903                           postdec1	equ	0xFE5
  9904                           fsr1h	equ	0xFE2
  9905                           fsr1l	equ	0xFE1
  9906                           indf2	equ	0xFDF
  9907                           postinc2	equ	0xFDE
  9908                           postdec2	equ	0xFDD
  9909                           fsr2h	equ	0xFDA
  9910                           fsr2l	equ	0xFD9
  9911                           status	equ	0xFD8
  9912                           
  9913 ;; *************** function ___ftneg *****************
  9914 ;; Defined at:
  9915 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  9916 ;; Parameters:    Size  Location     Type
  9917 ;;  f1              3   58[BANK0 ] float 
  9918 ;; Auto vars:     Size  Location     Type
  9919 ;;		None
  9920 ;; Return value:  Size  Location     Type
  9921 ;;                  3   58[BANK0 ] float 
  9922 ;; Registers used:
  9923 ;;		wreg, status,2, status,0
  9924 ;; Tracked objects:
  9925 ;;		On entry : 0/0
  9926 ;;		On exit  : 0/0
  9927 ;;		Unchanged: 0/0
  9928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9929 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9932 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9933 ;;Total ram usage:        3 bytes
  9934 ;; Hardware stack levels used:    1
  9935 ;; Hardware stack levels required when called:    4
  9936 ;; This function calls:
  9937 ;;		Nothing
  9938 ;; This function is called by:
  9939 ;;		_sprintf
  9940 ;;		_ReadTempSensor
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           	psect	text13
  9945  003940                     __ptext13:
  9946                           	opt stack 0
  9947  003940                     ___ftneg:
  9948                           	opt stack 25
  9949                           
  9950                           ;incstack = 0
  9951  003940  0100               	movlb	0	; () banked
  9952  003942  519A               	movf	___ftneg@f1& (0+255),w,b
  9953  003944  119B               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  9954  003946  119C               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  9955  003948  B4D8               	btfsc	status,2,c
  9956  00394A  D006               	goto	l2935
  9957                           
  9958                           ; BSR set to: 0
  9959  00394C  0E00               	movlw	0
  9960  00394E  1B9A               	xorwf	___ftneg@f1& (0+255),f,b
  9961  003950  0E00               	movlw	0
  9962  003952  1B9B               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  9963  003954  0E80               	movlw	128
  9964  003956  1B9C               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  9965  003958                     l2935:
  9966                           
  9967                           ; BSR set to: 0
  9968  003958  C09A  F09A         	movff	___ftneg@f1,?___ftneg
  9969  00395C  C09B  F09B         	movff	___ftneg@f1+1,?___ftneg+1
  9970  003960  C09C  F09C         	movff	___ftneg@f1+2,?___ftneg+2
  9971                           
  9972                           ; BSR set to: 0
  9973  003964  0012               	return		;funcret
  9974  003966                     __end_of___ftneg:
  9975                           	opt stack 0
  9976                           tblptru	equ	0xFF8
  9977                           tblptrh	equ	0xFF7
  9978                           tblptrl	equ	0xFF6
  9979                           tablat	equ	0xFF5
  9980                           prodh	equ	0xFF4
  9981                           prodl	equ	0xFF3
  9982                           postinc0	equ	0xFEE
  9983                           wreg	equ	0xFE8
  9984                           indf1	equ	0xFE7
  9985                           postdec1	equ	0xFE5
  9986                           fsr1h	equ	0xFE2
  9987                           fsr1l	equ	0xFE1
  9988                           indf2	equ	0xFDF
  9989                           postinc2	equ	0xFDE
  9990                           postdec2	equ	0xFDD
  9991                           fsr2h	equ	0xFDA
  9992                           fsr2l	equ	0xFD9
  9993                           status	equ	0xFD8
  9994                           
  9995 ;; *************** function ___ftge *****************
  9996 ;; Defined at:
  9997 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  9998 ;; Parameters:    Size  Location     Type
  9999 ;;  ff1             3   98[BANK0 ] float 
 10000 ;;  ff2             3  101[BANK0 ] float 
 10001 ;; Auto vars:     Size  Location     Type
 10002 ;;		None
 10003 ;; Return value:  Size  Location     Type
 10004 ;;		None               void
 10005 ;; Registers used:
 10006 ;;		wreg, status,2, status,0
 10007 ;; Tracked objects:
 10008 ;;		On entry : 0/0
 10009 ;;		On exit  : 0/0
 10010 ;;		Unchanged: 0/0
 10011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10012 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10014 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10015 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10016 ;;Total ram usage:        9 bytes
 10017 ;; Hardware stack levels used:    1
 10018 ;; Hardware stack levels required when called:    4
 10019 ;; This function calls:
 10020 ;;		Nothing
 10021 ;; This function is called by:
 10022 ;;		_sprintf
 10023 ;;		_ReadTempSensor
 10024 ;; This function uses a non-reentrant model
 10025 ;;
 10026                           
 10027                           	psect	text14
 10028  003130                     __ptext14:
 10029                           	opt stack 0
 10030  003130                     ___ftge:
 10031                           	opt stack 25
 10032                           
 10033                           ; BSR set to: 0
 10034                           ;incstack = 0
 10035  003130  0100               	movlb	0	; () banked
 10036  003132  AFC4               	btfss	(___ftge@ff1+2)& (0+255),7,b
 10037  003134  D016               	goto	l2917
 10038                           
 10039                           ; BSR set to: 0
 10040  003136  C0C2  F0C8         	movff	___ftge@ff1,??___ftge
 10041  00313A  C0C3  F0C9         	movff	___ftge@ff1+1,??___ftge+1
 10042  00313E  C0C4  F0CA         	movff	___ftge@ff1+2,??___ftge+2
 10043  003142  1FC8               	comf	??___ftge& (0+255),f,b
 10044  003144  1FC9               	comf	(??___ftge+1)& (0+255),f,b
 10045  003146  1FCA               	comf	(??___ftge+2)& (0+255),f,b
 10046  003148  2BC8               	incf	??___ftge& (0+255),f,b
 10047  00314A  0E00               	movlw	0
 10048  00314C  23C9               	addwfc	(??___ftge+1)& (0+255),f,b
 10049  00314E  23CA               	addwfc	(??___ftge+2)& (0+255),f,b
 10050  003150  0E00               	movlw	0
 10051  003152  25C8               	addwf	??___ftge& (0+255),w,b
 10052  003154  6FC2               	movwf	___ftge@ff1& (0+255),b
 10053  003156  0E00               	movlw	0
 10054  003158  21C9               	addwfc	(??___ftge+1)& (0+255),w,b
 10055  00315A  6FC3               	movwf	(___ftge@ff1+1)& (0+255),b
 10056  00315C  0E80               	movlw	128
 10057  00315E  21CA               	addwfc	(??___ftge+2)& (0+255),w,b
 10058  003160  6FC4               	movwf	(___ftge@ff1+2)& (0+255),b
 10059  003162                     l2917:
 10060                           
 10061                           ; BSR set to: 0
 10062                           
 10063                           ; BSR set to: 0
 10064  003162  AFC7               	btfss	(___ftge@ff2+2)& (0+255),7,b
 10065  003164  D016               	goto	l2918
 10066                           
 10067                           ; BSR set to: 0
 10068  003166  C0C5  F0C8         	movff	___ftge@ff2,??___ftge
 10069  00316A  C0C6  F0C9         	movff	___ftge@ff2+1,??___ftge+1
 10070  00316E  C0C7  F0CA         	movff	___ftge@ff2+2,??___ftge+2
 10071  003172  1FC8               	comf	??___ftge& (0+255),f,b
 10072  003174  1FC9               	comf	(??___ftge+1)& (0+255),f,b
 10073  003176  1FCA               	comf	(??___ftge+2)& (0+255),f,b
 10074  003178  2BC8               	incf	??___ftge& (0+255),f,b
 10075  00317A  0E00               	movlw	0
 10076  00317C  23C9               	addwfc	(??___ftge+1)& (0+255),f,b
 10077  00317E  23CA               	addwfc	(??___ftge+2)& (0+255),f,b
 10078  003180  0E00               	movlw	0
 10079  003182  25C8               	addwf	??___ftge& (0+255),w,b
 10080  003184  6FC5               	movwf	___ftge@ff2& (0+255),b
 10081  003186  0E00               	movlw	0
 10082  003188  21C9               	addwfc	(??___ftge+1)& (0+255),w,b
 10083  00318A  6FC6               	movwf	(___ftge@ff2+1)& (0+255),b
 10084  00318C  0E80               	movlw	128
 10085  00318E  21CA               	addwfc	(??___ftge+2)& (0+255),w,b
 10086  003190  6FC7               	movwf	(___ftge@ff2+2)& (0+255),b
 10087  003192                     l2918:
 10088                           
 10089                           ; BSR set to: 0
 10090                           
 10091                           ; BSR set to: 0
 10092  003192  0E00               	movlw	0
 10093  003194  1BC2               	xorwf	___ftge@ff1& (0+255),f,b
 10094  003196  0E00               	movlw	0
 10095  003198  1BC3               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 10096  00319A  0E80               	movlw	128
 10097  00319C  1BC4               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 10098                           
 10099                           ; BSR set to: 0
 10100  00319E  0E00               	movlw	0
 10101  0031A0  1BC5               	xorwf	___ftge@ff2& (0+255),f,b
 10102  0031A2  0E00               	movlw	0
 10103  0031A4  1BC6               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 10104  0031A6  0E80               	movlw	128
 10105  0031A8  1BC7               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 10106  0031AA  51C5               	movf	___ftge@ff2& (0+255),w,b
 10107  0031AC  5DC2               	subwf	___ftge@ff1& (0+255),w,b
 10108  0031AE  51C6               	movf	(___ftge@ff2+1)& (0+255),w,b
 10109  0031B0  59C3               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 10110  0031B2  51C7               	movf	(___ftge@ff2+2)& (0+255),w,b
 10111  0031B4  59C4               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 10112  0031B6  B0D8               	btfsc	status,0,c
 10113  0031B8  D002               	goto	l10659
 10114                           
 10115                           ; BSR set to: 0
 10116  0031BA  90D8               	bcf	status,0,c
 10117  0031BC  0012               	return	
 10118  0031BE                     l10659:
 10119                           
 10120                           ; BSR set to: 0
 10121                           
 10122                           ; BSR set to: 0
 10123  0031BE  80D8               	bsf	status,0,c
 10124                           
 10125                           ; BSR set to: 0
 10126  0031C0  0012               	return	
 10127  0031C2                     __end_of___ftge:
 10128                           	opt stack 0
 10129                           tblptru	equ	0xFF8
 10130                           tblptrh	equ	0xFF7
 10131                           tblptrl	equ	0xFF6
 10132                           tablat	equ	0xFF5
 10133                           prodh	equ	0xFF4
 10134                           prodl	equ	0xFF3
 10135                           postinc0	equ	0xFEE
 10136                           wreg	equ	0xFE8
 10137                           indf1	equ	0xFE7
 10138                           postdec1	equ	0xFE5
 10139                           fsr1h	equ	0xFE2
 10140                           fsr1l	equ	0xFE1
 10141                           indf2	equ	0xFDF
 10142                           postinc2	equ	0xFDE
 10143                           postdec2	equ	0xFDD
 10144                           fsr2h	equ	0xFDA
 10145                           fsr2l	equ	0xFD9
 10146                           status	equ	0xFD8
 10147                           
 10148 ;; *************** function ___ftdiv *****************
 10149 ;; Defined at:
 10150 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 10151 ;; Parameters:    Size  Location     Type
 10152 ;;  f1              3   83[BANK0 ] float 
 10153 ;;  f2              3   86[BANK0 ] float 
 10154 ;; Auto vars:     Size  Location     Type
 10155 ;;  f3              3   93[BANK0 ] float 
 10156 ;;  sign            1   97[BANK0 ] unsigned char 
 10157 ;;  exp             1   96[BANK0 ] unsigned char 
 10158 ;;  cntr            1   92[BANK0 ] unsigned char 
 10159 ;; Return value:  Size  Location     Type
 10160 ;;                  3   83[BANK0 ] float 
 10161 ;; Registers used:
 10162 ;;		wreg, status,2, status,0, cstack
 10163 ;; Tracked objects:
 10164 ;;		On entry : 0/0
 10165 ;;		On exit  : 0/0
 10166 ;;		Unchanged: 0/0
 10167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10168 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10169 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10170 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10171 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10172 ;;Total ram usage:       15 bytes
 10173 ;; Hardware stack levels used:    1
 10174 ;; Hardware stack levels required when called:    5
 10175 ;; This function calls:
 10176 ;;		___ftpack
 10177 ;; This function is called by:
 10178 ;;		_sprintf
 10179 ;;		_ReadTempSensor
 10180 ;; This function uses a non-reentrant model
 10181 ;;
 10182                           
 10183                           	psect	text15
 10184  002C64                     __ptext15:
 10185                           	opt stack 0
 10186  002C64                     ___ftdiv:
 10187                           	opt stack 24
 10188                           
 10189                           ; BSR set to: 0
 10190                           ;incstack = 0
 10191  002C64  C0B5  F0B9         	movff	___ftdiv@f1+2,??___ftdiv
 10192  002C68  0100               	movlb	0	; () banked
 10193  002C6A  6BBA               	clrf	(??___ftdiv+1)& (0+255),b
 10194  002C6C  6BBB               	clrf	(??___ftdiv+2)& (0+255),b
 10195  002C6E  35B4               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 10196  002C70  37B9               	rlcf	??___ftdiv& (0+255),f,b
 10197  002C72  E301               	bnc	u22421
 10198  002C74  81BA               	bsf	(??___ftdiv+1)& (0+255),0,b
 10199  002C76                     u22421:
 10200  002C76  51B9               	movf	??___ftdiv& (0+255),w,b
 10201  002C78  6FC0               	movwf	___ftdiv@exp& (0+255),b
 10202  002C7A  51C0               	movf	___ftdiv@exp& (0+255),w,b
 10203  002C7C  A4D8               	btfss	status,2,c
 10204  002C7E  D007               	goto	l2892
 10205                           
 10206                           ; BSR set to: 0
 10207  002C80  0E00               	movlw	0
 10208  002C82  6FB3               	movwf	?___ftdiv& (0+255),b
 10209  002C84  0E00               	movlw	0
 10210  002C86  6FB4               	movwf	(?___ftdiv+1)& (0+255),b
 10211  002C88  0E00               	movlw	0
 10212  002C8A  6FB5               	movwf	(?___ftdiv+2)& (0+255),b
 10213                           
 10214                           ; BSR set to: 0
 10215  002C8C  0012               	return	
 10216  002C8E                     l2892:
 10217                           
 10218                           ; BSR set to: 0
 10219                           
 10220                           ; BSR set to: 0
 10221  002C8E  C0B8  F0B9         	movff	___ftdiv@f2+2,??___ftdiv
 10222  002C92  6BBA               	clrf	(??___ftdiv+1)& (0+255),b
 10223  002C94  6BBB               	clrf	(??___ftdiv+2)& (0+255),b
 10224  002C96  35B7               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 10225  002C98  37B9               	rlcf	??___ftdiv& (0+255),f,b
 10226  002C9A  E301               	bnc	u22441
 10227  002C9C  81BA               	bsf	(??___ftdiv+1)& (0+255),0,b
 10228  002C9E                     u22441:
 10229  002C9E  51B9               	movf	??___ftdiv& (0+255),w,b
 10230  002CA0  6FC1               	movwf	___ftdiv@sign& (0+255),b
 10231  002CA2  51C1               	movf	___ftdiv@sign& (0+255),w,b
 10232  002CA4  A4D8               	btfss	status,2,c
 10233  002CA6  D007               	goto	l2894
 10234                           
 10235                           ; BSR set to: 0
 10236  002CA8  0E00               	movlw	0
 10237  002CAA  6FB3               	movwf	?___ftdiv& (0+255),b
 10238  002CAC  0E00               	movlw	0
 10239  002CAE  6FB4               	movwf	(?___ftdiv+1)& (0+255),b
 10240  002CB0  0E00               	movlw	0
 10241  002CB2  6FB5               	movwf	(?___ftdiv+2)& (0+255),b
 10242                           
 10243                           ; BSR set to: 0
 10244  002CB4  0012               	return	
 10245  002CB6                     l2894:
 10246                           
 10247                           ; BSR set to: 0
 10248                           
 10249                           ; BSR set to: 0
 10250  002CB6  0E00               	movlw	0
 10251  002CB8  6FBD               	movwf	___ftdiv@f3& (0+255),b
 10252  002CBA  0E00               	movlw	0
 10253  002CBC  6FBE               	movwf	(___ftdiv@f3+1)& (0+255),b
 10254  002CBE  0E00               	movlw	0
 10255  002CC0  6FBF               	movwf	(___ftdiv@f3+2)& (0+255),b
 10256                           
 10257                           ; BSR set to: 0
 10258  002CC2  51C1               	movf	___ftdiv@sign& (0+255),w,b
 10259  002CC4  0F89               	addlw	137
 10260  002CC6  5FC0               	subwf	___ftdiv@exp& (0+255),f,b
 10261                           
 10262                           ; BSR set to: 0
 10263  002CC8  C0B5  F0C1         	movff	___ftdiv@f1+2,___ftdiv@sign
 10264                           
 10265                           ; BSR set to: 0
 10266  002CCC  51B8               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10267  002CCE  1BC1               	xorwf	___ftdiv@sign& (0+255),f,b
 10268                           
 10269                           ; BSR set to: 0
 10270  002CD0  0E80               	movlw	128
 10271  002CD2  17C1               	andwf	___ftdiv@sign& (0+255),f,b
 10272                           
 10273                           ; BSR set to: 0
 10274  002CD4  8FB4               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 10275                           
 10276                           ; BSR set to: 0
 10277  002CD6  0EFF               	movlw	255
 10278  002CD8  17B3               	andwf	___ftdiv@f1& (0+255),f,b
 10279  002CDA  0EFF               	movlw	255
 10280  002CDC  17B4               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 10281  002CDE  0E00               	movlw	0
 10282  002CE0  17B5               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 10283                           
 10284                           ; BSR set to: 0
 10285  002CE2  8FB7               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 10286                           
 10287                           ; BSR set to: 0
 10288  002CE4  0EFF               	movlw	255
 10289  002CE6  17B6               	andwf	___ftdiv@f2& (0+255),f,b
 10290  002CE8  0EFF               	movlw	255
 10291  002CEA  17B7               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 10292  002CEC  0E00               	movlw	0
 10293  002CEE  17B8               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 10294                           
 10295                           ; BSR set to: 0
 10296  002CF0  0E18               	movlw	24
 10297  002CF2  6FBC               	movwf	___ftdiv@cntr& (0+255),b
 10298  002CF4                     
 10299                           ; BSR set to: 0
 10300                           
 10301                           ; BSR set to: 0
 10302  002CF4  90D8               	bcf	status,0,c
 10303  002CF6  37BD               	rlcf	___ftdiv@f3& (0+255),f,b
 10304  002CF8  37BE               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10305  002CFA  37BF               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10306                           
 10307                           ; BSR set to: 0
 10308  002CFC  51B6               	movf	___ftdiv@f2& (0+255),w,b
 10309  002CFE  5DB3               	subwf	___ftdiv@f1& (0+255),w,b
 10310  002D00  51B7               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10311  002D02  59B4               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 10312  002D04  51B8               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10313  002D06  59B5               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 10314  002D08  A0D8               	btfss	status,0,c
 10315  002D0A  D007               	goto	l2896
 10316                           
 10317                           ; BSR set to: 0
 10318  002D0C  51B6               	movf	___ftdiv@f2& (0+255),w,b
 10319  002D0E  5FB3               	subwf	___ftdiv@f1& (0+255),f,b
 10320  002D10  51B7               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10321  002D12  5BB4               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 10322  002D14  51B8               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10323  002D16  5BB5               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 10324                           
 10325                           ; BSR set to: 0
 10326  002D18  81BD               	bsf	___ftdiv@f3& (0+255),0,b
 10327  002D1A                     l2896:
 10328                           
 10329                           ; BSR set to: 0
 10330  002D1A  90D8               	bcf	status,0,c
 10331  002D1C  37B3               	rlcf	___ftdiv@f1& (0+255),f,b
 10332  002D1E  37B4               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 10333  002D20  37B5               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 10334                           
 10335                           ; BSR set to: 0
 10336  002D22  2FBC               	decfsz	___ftdiv@cntr& (0+255),f,b
 10337  002D24  D7E7               	goto	l2895
 10338                           
 10339                           ; BSR set to: 0
 10340                           
 10341                           ; BSR set to: 0
 10342  002D26  C0BD  F060         	movff	___ftdiv@f3,___ftpack@arg
 10343  002D2A  C0BE  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10344  002D2E  C0BF  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10345  002D32  C0C0  F063         	movff	___ftdiv@exp,___ftpack@exp
 10346  002D36  C0C1  F064         	movff	___ftdiv@sign,___ftpack@sign
 10347  002D3A  ECFF  F016         	call	___ftpack	;wreg free
 10348  002D3E  C060  F0B3         	movff	?___ftpack,?___ftdiv
 10349  002D42  C061  F0B4         	movff	?___ftpack+1,?___ftdiv+1
 10350  002D46  C062  F0B5         	movff	?___ftpack+2,?___ftdiv+2
 10351  002D4A  0012               	return	
 10352  002D4C                     __end_of___ftdiv:
 10353                           	opt stack 0
 10354                           tblptru	equ	0xFF8
 10355                           tblptrh	equ	0xFF7
 10356                           tblptrl	equ	0xFF6
 10357                           tablat	equ	0xFF5
 10358                           prodh	equ	0xFF4
 10359                           prodl	equ	0xFF3
 10360                           postinc0	equ	0xFEE
 10361                           wreg	equ	0xFE8
 10362                           indf1	equ	0xFE7
 10363                           postdec1	equ	0xFE5
 10364                           fsr1h	equ	0xFE2
 10365                           fsr1l	equ	0xFE1
 10366                           indf2	equ	0xFDF
 10367                           postinc2	equ	0xFDE
 10368                           postdec2	equ	0xFDD
 10369                           fsr2h	equ	0xFDA
 10370                           fsr2l	equ	0xFD9
 10371                           status	equ	0xFD8
 10372                           
 10373 ;; *************** function _readHumidity *****************
 10374 ;; Defined at:
 10375 ;;		line 67 in file "../src/CapteurI2C.c"
 10376 ;; Parameters:    Size  Location     Type
 10377 ;;		None
 10378 ;; Auto vars:     Size  Location     Type
 10379 ;;  T2              3  136[BANK0 ] const float 
 10380 ;;  T1              3  133[BANK0 ] const float 
 10381 ;;  C3              3  130[BANK0 ] const float 
 10382 ;;  C2              3  127[BANK0 ] const float 
 10383 ;;  C1              3  124[BANK0 ] const float 
 10384 ;;  _temperature    3  121[BANK0 ] float 
 10385 ;;  _correctedHu    3  118[BANK0 ] float 
 10386 ;;  _linearHumid    3  115[BANK0 ] float 
 10387 ;;  _val            2  148[BANK0 ] int 
 10388 ;;  _gHumidCmd      2  139[BANK0 ] int 
 10389 ;;  crc             1  141[BANK0 ] unsigned char 
 10390 ;; Return value:  Size  Location     Type
 10391 ;;                  3  112[BANK0 ] float 
 10392 ;; Registers used:
 10393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10394 ;; Tracked objects:
 10395 ;;		On entry : 0/0
 10396 ;;		On exit  : 0/0
 10397 ;;		Unchanged: 0/0
 10398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10399 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10400 ;;      Locals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10402 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10403 ;;Total ram usage:       38 bytes
 10404 ;; Hardware stack levels used:    1
 10405 ;; Hardware stack levels required when called:    9
 10406 ;; This function calls:
 10407 ;;		___awtoft
 10408 ;;		___ftadd
 10409 ;;		___ftmul
 10410 ;;		_getData16SHT
 10411 ;;		_readTemperatureC
 10412 ;;		_sendCommandSHT
 10413 ;;		_waitForResultSHT
 10414 ;; This function is called by:
 10415 ;;		_main
 10416 ;; This function uses a non-reentrant model
 10417 ;;
 10418                           
 10419                           	psect	text16
 10420  00234A                     __ptext16:
 10421                           	opt stack 0
 10422  00234A                     _readHumidity:
 10423                           	opt stack 21
 10424                           
 10425                           ;CapteurI2C.c: 69: int _val;
 10426                           ;CapteurI2C.c: 70: float _linearHumidity;
 10427                           ;CapteurI2C.c: 71: float _correctedHumidity;
 10428                           ;CapteurI2C.c: 72: float _temperature;
 10429                           ;CapteurI2C.c: 75: const float C1 = -4.0;
 10430                           
 10431                           ;incstack = 0
 10432  00234A  0E00               	movlw	0
 10433  00234C  0100               	movlb	0	; () banked
 10434  00234E  6FDC               	movwf	readHumidity@C1& (0+255),b
 10435  002350  0E80               	movlw	128
 10436  002352  6FDD               	movwf	(readHumidity@C1+1)& (0+255),b
 10437  002354  0EC0               	movlw	192
 10438  002356  6FDE               	movwf	(readHumidity@C1+2)& (0+255),b
 10439                           
 10440                           ;CapteurI2C.c: 76: const float C2 = 0.0405;
 10441  002358  0EE3               	movlw	227
 10442  00235A  6FDF               	movwf	readHumidity@C2& (0+255),b
 10443  00235C  0E25               	movlw	37
 10444  00235E  6FE0               	movwf	(readHumidity@C2+1)& (0+255),b
 10445  002360  0E3D               	movlw	61
 10446  002362  6FE1               	movwf	(readHumidity@C2+2)& (0+255),b
 10447                           
 10448                           ;CapteurI2C.c: 77: const float C3 = -0.0000028;
 10449  002364  0EE8               	movlw	232
 10450  002366  6FE2               	movwf	readHumidity@C3& (0+255),b
 10451  002368  0E3B               	movlw	59
 10452  00236A  6FE3               	movwf	(readHumidity@C3+1)& (0+255),b
 10453  00236C  0EB6               	movlw	182
 10454  00236E  6FE4               	movwf	(readHumidity@C3+2)& (0+255),b
 10455                           
 10456                           ;CapteurI2C.c: 78: const float T1 = 0.01;
 10457  002370  0ED7               	movlw	215
 10458  002372  6FE5               	movwf	readHumidity@T1& (0+255),b
 10459  002374  0E23               	movlw	35
 10460  002376  6FE6               	movwf	(readHumidity@T1+1)& (0+255),b
 10461  002378  0E3C               	movlw	60
 10462  00237A  6FE7               	movwf	(readHumidity@T1+2)& (0+255),b
 10463                           
 10464                           ;CapteurI2C.c: 79: const float T2 = 0.00008;
 10465  00237C  0EC6               	movlw	198
 10466  00237E  6FE8               	movwf	readHumidity@T2& (0+255),b
 10467  002380  0EA7               	movlw	167
 10468  002382  6FE9               	movwf	(readHumidity@T2+1)& (0+255),b
 10469  002384  0E38               	movlw	56
 10470  002386  6FEA               	movwf	(readHumidity@T2+2)& (0+255),b
 10471                           
 10472                           ;CapteurI2C.c: 88: int _gHumidCmd = 0b00000101;
 10473  002388  0E00               	movlw	0
 10474  00238A  6FEC               	movwf	(readHumidity@_gHumidCmd+1)& (0+255),b
 10475  00238C  0E05               	movlw	5
 10476  00238E  6FEB               	movwf	readHumidity@_gHumidCmd& (0+255),b
 10477                           
 10478                           ;CapteurI2C.c: 90: char crc=0;
 10479  002390  0E00               	movlw	0
 10480  002392  6FED               	movwf	readHumidity@crc& (0+255),b
 10481                           
 10482                           ; BSR set to: 0
 10483                           ;CapteurI2C.c: 92: sendCommandSHT(_gHumidCmd);
 10484  002394  C0EB  F062         	movff	readHumidity@_gHumidCmd,sendCommandSHT@_command
 10485  002398  C0EC  F063         	movff	readHumidity@_gHumidCmd+1,sendCommandSHT@_command+1
 10486  00239C  EC34  F01B         	call	_sendCommandSHT	;wreg free
 10487                           
 10488                           ;CapteurI2C.c: 93: waitForResultSHT();
 10489  0023A0  ECE3  F01B         	call	_waitForResultSHT	;wreg free
 10490                           
 10491                           ;CapteurI2C.c: 94: getData16SHT(&_val, &crc);
 10492  0023A4  0EF4               	movlw	low readHumidity@_val
 10493  0023A6  0100               	movlb	0	; () banked
 10494  0023A8  6F75               	movwf	getData16SHT@val& (0+255),b
 10495  0023AA  0E00               	movlw	high readHumidity@_val
 10496  0023AC  6F76               	movwf	(getData16SHT@val+1)& (0+255),b
 10497  0023AE  0EED               	movlw	low readHumidity@crc
 10498  0023B0  6F77               	movwf	getData16SHT@CRC& (0+255),b
 10499  0023B2  0E00               	movlw	high readHumidity@crc
 10500  0023B4  6F78               	movwf	(getData16SHT@CRC+1)& (0+255),b
 10501  0023B6  ECF0  F019         	call	_getData16SHT	;wreg free
 10502                           
 10503                           ;CapteurI2C.c: 98: _linearHumidity = C1 + C2 * _val + C3 * _val * _val;
 10504  0023BA  C0F4  F068         	movff	readHumidity@_val,___awtoft@c
 10505  0023BE  C0F5  F069         	movff	readHumidity@_val+1,___awtoft@c+1
 10506  0023C2  EC46  F01C         	call	___awtoft	;wreg free
 10507  0023C6  C068  F0A0         	movff	?___awtoft,___ftmul@f2
 10508  0023CA  C069  F0A1         	movff	?___awtoft+1,___ftmul@f2+1
 10509  0023CE  C06A  F0A2         	movff	?___awtoft+2,___ftmul@f2+2
 10510  0023D2  C0F4  F068         	movff	readHumidity@_val,___awtoft@c
 10511  0023D6  C0F5  F069         	movff	readHumidity@_val+1,___awtoft@c+1
 10512  0023DA  EC46  F01C         	call	___awtoft	;wreg free
 10513  0023DE  C068  F09D         	movff	?___awtoft,___ftmul@f1
 10514  0023E2  C069  F09E         	movff	?___awtoft+1,___ftmul@f1+1
 10515  0023E6  C06A  F09F         	movff	?___awtoft+2,___ftmul@f1+2
 10516  0023EA  ECB7  F015         	call	___ftmul	;wreg free
 10517  0023EE  C09D  F0EE         	movff	?___ftmul,_readHumidity$5664
 10518  0023F2  C09E  F0EF         	movff	?___ftmul+1,_readHumidity$5664+1
 10519  0023F6  C09F  F0F0         	movff	?___ftmul+2,_readHumidity$5664+2
 10520                           
 10521                           ;CapteurI2C.c: 98: _linearHumidity = C1 + C2 * _val + C3 * _val * _val;
 10522  0023FA  C0E2  F0A0         	movff	readHumidity@C3,___ftmul@f2
 10523  0023FE  C0E3  F0A1         	movff	readHumidity@C3+1,___ftmul@f2+1
 10524  002402  C0E4  F0A2         	movff	readHumidity@C3+2,___ftmul@f2+2
 10525  002406  C0EE  F09D         	movff	_readHumidity$5664,___ftmul@f1
 10526  00240A  C0EF  F09E         	movff	_readHumidity$5664+1,___ftmul@f1+1
 10527  00240E  C0F0  F09F         	movff	_readHumidity$5664+2,___ftmul@f1+2
 10528  002412  ECB7  F015         	call	___ftmul	;wreg free
 10529  002416  C09D  F0B9         	movff	?___ftmul,___ftadd@f2
 10530  00241A  C09E  F0BA         	movff	?___ftmul+1,___ftadd@f2+1
 10531  00241E  C09F  F0BB         	movff	?___ftmul+2,___ftadd@f2+2
 10532  002422  C0DF  F0A0         	movff	readHumidity@C2,___ftmul@f2
 10533  002426  C0E0  F0A1         	movff	readHumidity@C2+1,___ftmul@f2+1
 10534  00242A  C0E1  F0A2         	movff	readHumidity@C2+2,___ftmul@f2+2
 10535  00242E  C0F4  F068         	movff	readHumidity@_val,___awtoft@c
 10536  002432  C0F5  F069         	movff	readHumidity@_val+1,___awtoft@c+1
 10537  002436  EC46  F01C         	call	___awtoft	;wreg free
 10538  00243A  C068  F09D         	movff	?___awtoft,___ftmul@f1
 10539  00243E  C069  F09E         	movff	?___awtoft+1,___ftmul@f1+1
 10540  002442  C06A  F09F         	movff	?___awtoft+2,___ftmul@f1+2
 10541  002446  ECB7  F015         	call	___ftmul	;wreg free
 10542  00244A  C09D  F0B6         	movff	?___ftmul,___ftadd@f1
 10543  00244E  C09E  F0B7         	movff	?___ftmul+1,___ftadd@f1+1
 10544  002452  C09F  F0B8         	movff	?___ftmul+2,___ftadd@f1+2
 10545  002456  ECB5  F012         	call	___ftadd	;wreg free
 10546  00245A  C0B6  F0F1         	movff	?___ftadd,_readHumidity$5665
 10547  00245E  C0B7  F0F2         	movff	?___ftadd+1,_readHumidity$5665+1
 10548  002462  C0B8  F0F3         	movff	?___ftadd+2,_readHumidity$5665+2
 10549                           
 10550                           ;CapteurI2C.c: 98: _linearHumidity = C1 + C2 * _val + C3 * _val * _val;
 10551  002466  C0F1  F0B6         	movff	_readHumidity$5665,___ftadd@f1
 10552  00246A  C0F2  F0B7         	movff	_readHumidity$5665+1,___ftadd@f1+1
 10553  00246E  C0F3  F0B8         	movff	_readHumidity$5665+2,___ftadd@f1+2
 10554  002472  C0DC  F0B9         	movff	readHumidity@C1,___ftadd@f2
 10555  002476  C0DD  F0BA         	movff	readHumidity@C1+1,___ftadd@f2+1
 10556  00247A  C0DE  F0BB         	movff	readHumidity@C1+2,___ftadd@f2+2
 10557  00247E  ECB5  F012         	call	___ftadd	;wreg free
 10558  002482  C0B6  F0D3         	movff	?___ftadd,readHumidity@_linearHumidity
 10559  002486  C0B7  F0D4         	movff	?___ftadd+1,readHumidity@_linearHumidity+1
 10560  00248A  C0B8  F0D5         	movff	?___ftadd+2,readHumidity@_linearHumidity+2
 10561                           
 10562                           ;CapteurI2C.c: 101: _temperature = readTemperatureC();
 10563  00248E  EC4E  F018         	call	_readTemperatureC	;wreg free
 10564  002492  C0C2  F0D9         	movff	?_readTemperatureC,readHumidity@_temperature
 10565  002496  C0C3  F0DA         	movff	?_readTemperatureC+1,readHumidity@_temperature+1
 10566  00249A  C0C4  F0DB         	movff	?_readTemperatureC+2,readHumidity@_temperature+2
 10567                           
 10568                           ;CapteurI2C.c: 104: _correctedHumidity = (_temperature - 25.0 ) * (T1 + T2 * _val) + _li
      +                          nearHumidity;
 10569  00249E  C0E5  F0B9         	movff	readHumidity@T1,___ftadd@f2
 10570  0024A2  C0E6  F0BA         	movff	readHumidity@T1+1,___ftadd@f2+1
 10571  0024A6  C0E7  F0BB         	movff	readHumidity@T1+2,___ftadd@f2+2
 10572  0024AA  C0E8  F0A0         	movff	readHumidity@T2,___ftmul@f2
 10573  0024AE  C0E9  F0A1         	movff	readHumidity@T2+1,___ftmul@f2+1
 10574  0024B2  C0EA  F0A2         	movff	readHumidity@T2+2,___ftmul@f2+2
 10575  0024B6  C0F4  F068         	movff	readHumidity@_val,___awtoft@c
 10576  0024BA  C0F5  F069         	movff	readHumidity@_val+1,___awtoft@c+1
 10577  0024BE  EC46  F01C         	call	___awtoft	;wreg free
 10578  0024C2  C068  F09D         	movff	?___awtoft,___ftmul@f1
 10579  0024C6  C069  F09E         	movff	?___awtoft+1,___ftmul@f1+1
 10580  0024CA  C06A  F09F         	movff	?___awtoft+2,___ftmul@f1+2
 10581  0024CE  ECB7  F015         	call	___ftmul	;wreg free
 10582  0024D2  C09D  F0B6         	movff	?___ftmul,___ftadd@f1
 10583  0024D6  C09E  F0B7         	movff	?___ftmul+1,___ftadd@f1+1
 10584  0024DA  C09F  F0B8         	movff	?___ftmul+2,___ftadd@f1+2
 10585  0024DE  ECB5  F012         	call	___ftadd	;wreg free
 10586  0024E2  C0B6  F0EE         	movff	?___ftadd,_readHumidity$5664
 10587  0024E6  C0B7  F0EF         	movff	?___ftadd+1,_readHumidity$5664+1
 10588  0024EA  C0B8  F0F0         	movff	?___ftadd+2,_readHumidity$5664+2
 10589                           
 10590                           ;CapteurI2C.c: 104: _correctedHumidity = (_temperature - 25.0 ) * (T1 + T2 * _val) + _li
      +                          nearHumidity;
 10591  0024EE  C0EE  F0A0         	movff	_readHumidity$5664,___ftmul@f2
 10592  0024F2  C0EF  F0A1         	movff	_readHumidity$5664+1,___ftmul@f2+1
 10593  0024F6  C0F0  F0A2         	movff	_readHumidity$5664+2,___ftmul@f2+2
 10594  0024FA  0E00               	movlw	0
 10595  0024FC  0100               	movlb	0	; () banked
 10596  0024FE  6FB9               	movwf	___ftadd@f2& (0+255),b
 10597  002500  0EC8               	movlw	200
 10598  002502  6FBA               	movwf	(___ftadd@f2+1)& (0+255),b
 10599  002504  0EC1               	movlw	193
 10600  002506  6FBB               	movwf	(___ftadd@f2+2)& (0+255),b
 10601  002508  C0D9  F0B6         	movff	readHumidity@_temperature,___ftadd@f1
 10602  00250C  C0DA  F0B7         	movff	readHumidity@_temperature+1,___ftadd@f1+1
 10603  002510  C0DB  F0B8         	movff	readHumidity@_temperature+2,___ftadd@f1+2
 10604  002514  ECB5  F012         	call	___ftadd	;wreg free
 10605  002518  C0B6  F09D         	movff	?___ftadd,___ftmul@f1
 10606  00251C  C0B7  F09E         	movff	?___ftadd+1,___ftmul@f1+1
 10607  002520  C0B8  F09F         	movff	?___ftadd+2,___ftmul@f1+2
 10608  002524  ECB7  F015         	call	___ftmul	;wreg free
 10609  002528  C09D  F0F1         	movff	?___ftmul,_readHumidity$5665
 10610  00252C  C09E  F0F2         	movff	?___ftmul+1,_readHumidity$5665+1
 10611  002530  C09F  F0F3         	movff	?___ftmul+2,_readHumidity$5665+2
 10612                           
 10613                           ;CapteurI2C.c: 104: _correctedHumidity = (_temperature - 25.0 ) * (T1 + T2 * _val) + _li
      +                          nearHumidity;
 10614  002534  C0F1  F0B6         	movff	_readHumidity$5665,___ftadd@f1
 10615  002538  C0F2  F0B7         	movff	_readHumidity$5665+1,___ftadd@f1+1
 10616  00253C  C0F3  F0B8         	movff	_readHumidity$5665+2,___ftadd@f1+2
 10617  002540  C0D3  F0B9         	movff	readHumidity@_linearHumidity,___ftadd@f2
 10618  002544  C0D4  F0BA         	movff	readHumidity@_linearHumidity+1,___ftadd@f2+1
 10619  002548  C0D5  F0BB         	movff	readHumidity@_linearHumidity+2,___ftadd@f2+2
 10620  00254C  ECB5  F012         	call	___ftadd	;wreg free
 10621  002550  C0B6  F0D6         	movff	?___ftadd,readHumidity@_correctedHumidity
 10622  002554  C0B7  F0D7         	movff	?___ftadd+1,readHumidity@_correctedHumidity+1
 10623  002558  C0B8  F0D8         	movff	?___ftadd+2,readHumidity@_correctedHumidity+2
 10624                           
 10625                           ;CapteurI2C.c: 106: return (_correctedHumidity);
 10626  00255C  C0D6  F0D0         	movff	readHumidity@_correctedHumidity,?_readHumidity
 10627  002560  C0D7  F0D1         	movff	readHumidity@_correctedHumidity+1,?_readHumidity+1
 10628  002564  C0D8  F0D2         	movff	readHumidity@_correctedHumidity+2,?_readHumidity+2
 10629  002568  0012               	return	
 10630  00256A                     __end_of_readHumidity:
 10631                           	opt stack 0
 10632                           tblptru	equ	0xFF8
 10633                           tblptrh	equ	0xFF7
 10634                           tblptrl	equ	0xFF6
 10635                           tablat	equ	0xFF5
 10636                           prodh	equ	0xFF4
 10637                           prodl	equ	0xFF3
 10638                           postinc0	equ	0xFEE
 10639                           wreg	equ	0xFE8
 10640                           indf1	equ	0xFE7
 10641                           postdec1	equ	0xFE5
 10642                           fsr1h	equ	0xFE2
 10643                           fsr1l	equ	0xFE1
 10644                           indf2	equ	0xFDF
 10645                           postinc2	equ	0xFDE
 10646                           postdec2	equ	0xFDD
 10647                           fsr2h	equ	0xFDA
 10648                           fsr2l	equ	0xFD9
 10649                           status	equ	0xFD8
 10650                           
 10651 ;; *************** function _readTemperatureC *****************
 10652 ;; Defined at:
 10653 ;;		line 25 in file "../src/CapteurI2C.c"
 10654 ;; Parameters:    Size  Location     Type
 10655 ;;		None
 10656 ;; Auto vars:     Size  Location     Type
 10657 ;;  D2              3  107[BANK0 ] const float 
 10658 ;;  D1              3  104[BANK0 ] const float 
 10659 ;;  _temperature    3  101[BANK0 ] float 
 10660 ;;  _val            2  110[BANK0 ] int 
 10661 ;; Return value:  Size  Location     Type
 10662 ;;                  3   98[BANK0 ] float 
 10663 ;; Registers used:
 10664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10665 ;; Tracked objects:
 10666 ;;		On entry : 0/0
 10667 ;;		On exit  : 0/0
 10668 ;;		Unchanged: 0/0
 10669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10670 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10671 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10673 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10674 ;;Total ram usage:       14 bytes
 10675 ;; Hardware stack levels used:    1
 10676 ;; Hardware stack levels required when called:    8
 10677 ;; This function calls:
 10678 ;;		___awtoft
 10679 ;;		___ftadd
 10680 ;;		___ftmul
 10681 ;;		___fttol
 10682 ;;		_readTemperatureRaw
 10683 ;; This function is called by:
 10684 ;;		_readHumidity
 10685 ;;		_main
 10686 ;; This function uses a non-reentrant model
 10687 ;;
 10688                           
 10689                           	psect	text17
 10690  00309C                     __ptext17:
 10691                           	opt stack 0
 10692  00309C                     _readTemperatureC:
 10693                           	opt stack 22
 10694                           
 10695                           ;CapteurI2C.c: 27: int _val;
 10696                           ;CapteurI2C.c: 28: float _temperature;
 10697                           ;CapteurI2C.c: 31: const float D1 = -40.0;
 10698                           
 10699                           ;incstack = 0
 10700  00309C  0E00               	movlw	0
 10701  00309E  0100               	movlb	0	; () banked
 10702  0030A0  6FC8               	movwf	readTemperatureC@D1& (0+255),b
 10703  0030A2  0E20               	movlw	32
 10704  0030A4  6FC9               	movwf	(readTemperatureC@D1+1)& (0+255),b
 10705  0030A6  0EC2               	movlw	194
 10706  0030A8  6FCA               	movwf	(readTemperatureC@D1+2)& (0+255),b
 10707                           
 10708                           ;CapteurI2C.c: 32: const float D2 = 0.01;
 10709  0030AA  0ED7               	movlw	215
 10710  0030AC  6FCB               	movwf	readTemperatureC@D2& (0+255),b
 10711  0030AE  0E23               	movlw	35
 10712  0030B0  6FCC               	movwf	(readTemperatureC@D2+1)& (0+255),b
 10713  0030B2  0E3C               	movlw	60
 10714  0030B4  6FCD               	movwf	(readTemperatureC@D2+2)& (0+255),b
 10715                           
 10716                           ; BSR set to: 0
 10717                           ;CapteurI2C.c: 35: _val = readTemperatureRaw();
 10718  0030B6  ECA6  F016         	call	_readTemperatureRaw	;wreg free
 10719  0030BA  C079  F082         	movff	?_readTemperatureRaw,___fttol@f1
 10720  0030BE  C07A  F083         	movff	?_readTemperatureRaw+1,___fttol@f1+1
 10721  0030C2  C07B  F084         	movff	?_readTemperatureRaw+2,___fttol@f1+2
 10722  0030C6  EC3B  F015         	call	___fttol	;wreg free
 10723  0030CA  C082  F0CE         	movff	?___fttol,readTemperatureC@_val
 10724  0030CE  C083  F0CF         	movff	?___fttol+1,readTemperatureC@_val+1
 10725                           
 10726                           ;CapteurI2C.c: 38: _temperature = (_val * D2) + D1;
 10727  0030D2  C0CB  F0A0         	movff	readTemperatureC@D2,___ftmul@f2
 10728  0030D6  C0CC  F0A1         	movff	readTemperatureC@D2+1,___ftmul@f2+1
 10729  0030DA  C0CD  F0A2         	movff	readTemperatureC@D2+2,___ftmul@f2+2
 10730  0030DE  C0CE  F068         	movff	readTemperatureC@_val,___awtoft@c
 10731  0030E2  C0CF  F069         	movff	readTemperatureC@_val+1,___awtoft@c+1
 10732  0030E6  EC46  F01C         	call	___awtoft	;wreg free
 10733  0030EA  C068  F09D         	movff	?___awtoft,___ftmul@f1
 10734  0030EE  C069  F09E         	movff	?___awtoft+1,___ftmul@f1+1
 10735  0030F2  C06A  F09F         	movff	?___awtoft+2,___ftmul@f1+2
 10736  0030F6  ECB7  F015         	call	___ftmul	;wreg free
 10737  0030FA  C09D  F0B6         	movff	?___ftmul,___ftadd@f1
 10738  0030FE  C09E  F0B7         	movff	?___ftmul+1,___ftadd@f1+1
 10739  003102  C09F  F0B8         	movff	?___ftmul+2,___ftadd@f1+2
 10740  003106  C0C8  F0B9         	movff	readTemperatureC@D1,___ftadd@f2
 10741  00310A  C0C9  F0BA         	movff	readTemperatureC@D1+1,___ftadd@f2+1
 10742  00310E  C0CA  F0BB         	movff	readTemperatureC@D1+2,___ftadd@f2+2
 10743  003112  ECB5  F012         	call	___ftadd	;wreg free
 10744  003116  C0B6  F0C5         	movff	?___ftadd,readTemperatureC@_temperature
 10745  00311A  C0B7  F0C6         	movff	?___ftadd+1,readTemperatureC@_temperature+1
 10746  00311E  C0B8  F0C7         	movff	?___ftadd+2,readTemperatureC@_temperature+2
 10747                           
 10748                           ;CapteurI2C.c: 40: return (_temperature);
 10749  003122  C0C5  F0C2         	movff	readTemperatureC@_temperature,?_readTemperatureC
 10750  003126  C0C6  F0C3         	movff	readTemperatureC@_temperature+1,?_readTemperatureC+1
 10751  00312A  C0C7  F0C4         	movff	readTemperatureC@_temperature+2,?_readTemperatureC+2
 10752  00312E  0012               	return	
 10753  003130                     __end_of_readTemperatureC:
 10754                           	opt stack 0
 10755                           tblptru	equ	0xFF8
 10756                           tblptrh	equ	0xFF7
 10757                           tblptrl	equ	0xFF6
 10758                           tablat	equ	0xFF5
 10759                           prodh	equ	0xFF4
 10760                           prodl	equ	0xFF3
 10761                           postinc0	equ	0xFEE
 10762                           wreg	equ	0xFE8
 10763                           indf1	equ	0xFE7
 10764                           postdec1	equ	0xFE5
 10765                           fsr1h	equ	0xFE2
 10766                           fsr1l	equ	0xFE1
 10767                           indf2	equ	0xFDF
 10768                           postinc2	equ	0xFDE
 10769                           postdec2	equ	0xFDD
 10770                           fsr2h	equ	0xFDA
 10771                           fsr2l	equ	0xFD9
 10772                           status	equ	0xFD8
 10773                           
 10774 ;; *************** function _readTemperatureRaw *****************
 10775 ;; Defined at:
 10776 ;;		line 112 in file "../src/CapteurI2C.c"
 10777 ;; Parameters:    Size  Location     Type
 10778 ;;		None
 10779 ;; Auto vars:     Size  Location     Type
 10780 ;;  _val            2   31[BANK0 ] int 
 10781 ;;  _gTempCmd       2   29[BANK0 ] int 
 10782 ;;  calcCRC         1   33[BANK0 ] unsigned char 
 10783 ;;  crc             1   28[BANK0 ] unsigned char 
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  3   25[BANK0 ] float 
 10786 ;; Registers used:
 10787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10793 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10794 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10796 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10797 ;;Total ram usage:        9 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; Hardware stack levels required when called:    7
 10800 ;; This function calls:
 10801 ;;		___awdiv
 10802 ;;		___awtoft
 10803 ;;		_getData16SHT
 10804 ;;		_sendCommandSHT
 10805 ;;		_waitForResultSHT
 10806 ;; This function is called by:
 10807 ;;		_readTemperatureC
 10808 ;;		_readTemperatureF
 10809 ;; This function uses a non-reentrant model
 10810 ;;
 10811                           
 10812                           	psect	text18
 10813  002D4C                     __ptext18:
 10814                           	opt stack 0
 10815  002D4C                     _readTemperatureRaw:
 10816                           	opt stack 22
 10817                           
 10818                           ;CapteurI2C.c: 114: int _val;
 10819                           ;CapteurI2C.c: 115: char crc;
 10820                           ;CapteurI2C.c: 116: char calcCRC = 0;
 10821                           
 10822                           ;incstack = 0
 10823  002D4C  0E00               	movlw	0
 10824  002D4E  0100               	movlb	0	; () banked
 10825  002D50  6F81               	movwf	readTemperatureRaw@calcCRC& (0+255),b
 10826                           
 10827                           ;CapteurI2C.c: 119: int _gTempCmd = 0b00000011;
 10828  002D52  0E00               	movlw	0
 10829  002D54  6F7E               	movwf	(readTemperatureRaw@_gTempCmd+1)& (0+255),b
 10830  002D56  0E03               	movlw	3
 10831  002D58  6F7D               	movwf	readTemperatureRaw@_gTempCmd& (0+255),b
 10832                           
 10833                           ; BSR set to: 0
 10834                           ;CapteurI2C.c: 121: sendCommandSHT(_gTempCmd);
 10835  002D5A  C07D  F062         	movff	readTemperatureRaw@_gTempCmd,sendCommandSHT@_command
 10836  002D5E  C07E  F063         	movff	readTemperatureRaw@_gTempCmd+1,sendCommandSHT@_command+1
 10837  002D62  EC34  F01B         	call	_sendCommandSHT	;wreg free
 10838                           
 10839                           ;CapteurI2C.c: 122: waitForResultSHT();
 10840  002D66  ECE3  F01B         	call	_waitForResultSHT	;wreg free
 10841                           
 10842                           ;CapteurI2C.c: 123: getData16SHT(&_val, &crc);
 10843  002D6A  0E7F               	movlw	low readTemperatureRaw@_val
 10844  002D6C  0100               	movlb	0	; () banked
 10845  002D6E  6F75               	movwf	getData16SHT@val& (0+255),b
 10846  002D70  0E00               	movlw	high readTemperatureRaw@_val
 10847  002D72  6F76               	movwf	(getData16SHT@val+1)& (0+255),b
 10848  002D74  0E7C               	movlw	low readTemperatureRaw@crc
 10849  002D76  6F77               	movwf	getData16SHT@CRC& (0+255),b
 10850  002D78  0E00               	movlw	high readTemperatureRaw@crc
 10851  002D7A  6F78               	movwf	(getData16SHT@CRC+1)& (0+255),b
 10852  002D7C  ECF0  F019         	call	_getData16SHT	;wreg free
 10853                           
 10854                           ;CapteurI2C.c: 125: calcCRC = _gTempCmd;
 10855  002D80  C07D  F081         	movff	readTemperatureRaw@_gTempCmd,readTemperatureRaw@calcCRC
 10856                           
 10857                           ;CapteurI2C.c: 126: calcCRC = crcTable[calcCRC];
 10858  002D84  0100               	movlb	0	; () banked
 10859  002D86  5181               	movf	readTemperatureRaw@calcCRC& (0+255),w,b
 10860  002D88  0D01               	mullw	1
 10861  002D8A  0E00               	movlw	low _crcTable
 10862  002D8C  24F3               	addwf	prodl,w,c
 10863  002D8E  6ED9               	movwf	fsr2l,c
 10864  002D90  0E05               	movlw	high _crcTable
 10865  002D92  20F4               	addwfc	prodh,w,c
 10866  002D94  6EDA               	movwf	fsr2h,c
 10867  002D96  50DF               	movf	indf2,w,c
 10868  002D98  6F81               	movwf	readTemperatureRaw@calcCRC& (0+255),b
 10869                           
 10870                           ; BSR set to: 0
 10871                           ;CapteurI2C.c: 128: calcCRC = calcCRC ^ (_val/256);
 10872  002D9A  C07F  F066         	movff	readTemperatureRaw@_val,___awdiv@dividend
 10873  002D9E  C080  F067         	movff	readTemperatureRaw@_val+1,___awdiv@dividend+1
 10874  002DA2  0E01               	movlw	1
 10875  002DA4  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 10876  002DA6  0E00               	movlw	0
 10877  002DA8  6F68               	movwf	___awdiv@divisor& (0+255),b
 10878  002DAA  EC2A  F019         	call	___awdiv	;wreg free
 10879  002DAE  0100               	movlb	0	; () banked
 10880  002DB0  5166               	movf	?___awdiv& (0+255),w,b
 10881  002DB2  1981               	xorwf	readTemperatureRaw@calcCRC& (0+255),w,b
 10882  002DB4  6F81               	movwf	readTemperatureRaw@calcCRC& (0+255),b
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;CapteurI2C.c: 129: calcCRC = crcTable[calcCRC];
 10886  002DB6  5181               	movf	readTemperatureRaw@calcCRC& (0+255),w,b
 10887  002DB8  0D01               	mullw	1
 10888  002DBA  0E00               	movlw	low _crcTable
 10889  002DBC  24F3               	addwf	prodl,w,c
 10890  002DBE  6ED9               	movwf	fsr2l,c
 10891  002DC0  0E05               	movlw	high _crcTable
 10892  002DC2  20F4               	addwfc	prodh,w,c
 10893  002DC4  6EDA               	movwf	fsr2h,c
 10894  002DC6  50DF               	movf	indf2,w,c
 10895  002DC8  6F81               	movwf	readTemperatureRaw@calcCRC& (0+255),b
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;CapteurI2C.c: 131: calcCRC = calcCRC ^ (_val&255);
 10899  002DCA  517F               	movf	readTemperatureRaw@_val& (0+255),w,b
 10900  002DCC  1981               	xorwf	readTemperatureRaw@calcCRC& (0+255),w,b
 10901  002DCE  6F81               	movwf	readTemperatureRaw@calcCRC& (0+255),b
 10902                           
 10903                           ; BSR set to: 0
 10904                           ;CapteurI2C.c: 132: calcCRC = crcTable[calcCRC];
 10905  002DD0  5181               	movf	readTemperatureRaw@calcCRC& (0+255),w,b
 10906  002DD2  0D01               	mullw	1
 10907  002DD4  0E00               	movlw	low _crcTable
 10908  002DD6  24F3               	addwf	prodl,w,c
 10909  002DD8  6ED9               	movwf	fsr2l,c
 10910  002DDA  0E05               	movlw	high _crcTable
 10911  002DDC  20F4               	addwfc	prodh,w,c
 10912  002DDE  6EDA               	movwf	fsr2h,c
 10913  002DE0  50DF               	movf	indf2,w,c
 10914  002DE2  6F81               	movwf	readTemperatureRaw@calcCRC& (0+255),b
 10915                           
 10916                           ; BSR set to: 0
 10917                           ;CapteurI2C.c: 136: return (_val);
 10918  002DE4  C07F  F068         	movff	readTemperatureRaw@_val,___awtoft@c
 10919  002DE8  C080  F069         	movff	readTemperatureRaw@_val+1,___awtoft@c+1
 10920  002DEC  EC46  F01C         	call	___awtoft	;wreg free
 10921  002DF0  C068  F079         	movff	?___awtoft,?_readTemperatureRaw
 10922  002DF4  C069  F07A         	movff	?___awtoft+1,?_readTemperatureRaw+1
 10923  002DF8  C06A  F07B         	movff	?___awtoft+2,?_readTemperatureRaw+2
 10924  002DFC  0012               	return	
 10925  002DFE                     __end_of_readTemperatureRaw:
 10926                           	opt stack 0
 10927                           tblptru	equ	0xFF8
 10928                           tblptrh	equ	0xFF7
 10929                           tblptrl	equ	0xFF6
 10930                           tablat	equ	0xFF5
 10931                           prodh	equ	0xFF4
 10932                           prodl	equ	0xFF3
 10933                           postinc0	equ	0xFEE
 10934                           wreg	equ	0xFE8
 10935                           indf1	equ	0xFE7
 10936                           postdec1	equ	0xFE5
 10937                           fsr1h	equ	0xFE2
 10938                           fsr1l	equ	0xFE1
 10939                           indf2	equ	0xFDF
 10940                           postinc2	equ	0xFDE
 10941                           postdec2	equ	0xFDD
 10942                           fsr2h	equ	0xFDA
 10943                           fsr2l	equ	0xFD9
 10944                           status	equ	0xFD8
 10945                           
 10946 ;; *************** function _waitForResultSHT *****************
 10947 ;; Defined at:
 10948 ;;		line 207 in file "../src/CapteurI2C.c"
 10949 ;; Parameters:    Size  Location     Type
 10950 ;;		None
 10951 ;; Auto vars:     Size  Location     Type
 10952 ;;  i               2    3[BANK0 ] int 
 10953 ;;  ack             2    1[BANK0 ] int 
 10954 ;; Return value:  Size  Location     Type
 10955 ;;                  1    wreg      void 
 10956 ;; Registers used:
 10957 ;;		wreg, status,2, status,0, cstack
 10958 ;; Tracked objects:
 10959 ;;		On entry : 0/0
 10960 ;;		On exit  : 0/0
 10961 ;;		Unchanged: 0/0
 10962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10964 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10966 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10967 ;;Total ram usage:        5 bytes
 10968 ;; Hardware stack levels used:    1
 10969 ;; Hardware stack levels required when called:    5
 10970 ;; This function calls:
 10971 ;;		_i2cHighSda
 10972 ;; This function is called by:
 10973 ;;		_readHumidity
 10974 ;;		_readTemperatureRaw
 10975 ;; This function uses a non-reentrant model
 10976 ;;
 10977                           
 10978                           	psect	text19
 10979  0037C6                     __ptext19:
 10980                           	opt stack 0
 10981  0037C6                     _waitForResultSHT:
 10982                           	opt stack 23
 10983                           
 10984                           ;CapteurI2C.c: 208: int i;
 10985                           ;CapteurI2C.c: 209: int ack;
 10986                           ;CapteurI2C.c: 211: i2cHighSda();
 10987                           
 10988                           ;incstack = 0
 10989  0037C6  EC13  F01D         	call	_i2cHighSda	;wreg free
 10990                           
 10991                           ;CapteurI2C.c: 213: for(i= 0; i < 3200; ++i)
 10992  0037CA  0E00               	movlw	0
 10993  0037CC  0100               	movlb	0	; () banked
 10994  0037CE  6F64               	movwf	(waitForResultSHT@i+1)& (0+255),b
 10995  0037D0  0E00               	movlw	0
 10996  0037D2  6F63               	movwf	waitForResultSHT@i& (0+255),b
 10997  0037D4                     l18287:
 10998                           
 10999                           ; BSR set to: 0
 11000  0037D4  BF64               	btfsc	(waitForResultSHT@i+1)& (0+255),7,b
 11001  0037D6  D006               	goto	l1827
 11002  0037D8  0E80               	movlw	128
 11003  0037DA  5D63               	subwf	waitForResultSHT@i& (0+255),w,b
 11004  0037DC  0E0C               	movlw	12
 11005  0037DE  5964               	subwfb	(waitForResultSHT@i+1)& (0+255),w,b
 11006  0037E0  B0D8               	btfsc	status,0,c
 11007  0037E2  0012               	return	
 11008  0037E4                     l1827:
 11009                           
 11010                           ; BSR set to: 0
 11011                           ;CapteurI2C.c: 214: {
 11012                           ;CapteurI2C.c: 215: _delay((unsigned long)((100)*(16000000/4000000.0)));
 11013                           
 11014                           ; BSR set to: 0
 11015  0037E4  0E85               	movlw	133
 11016  0037E6                     u26377:
 11017  0037E6  2EE8               	decfsz	wreg,f,c
 11018  0037E8  D7FE               	bra	u26377
 11019  0037EA  F000               	nop	
 11020                           
 11021                           ;CapteurI2C.c: 216: ack = PORTAbits.RA2;
 11022  0037EC  A480               	btfss	3968,2,c	;volatile
 11023  0037EE  D004               	goto	u21640
 11024  0037F0  0100               	movlb	0	; () banked
 11025  0037F2  6B60               	clrf	??_waitForResultSHT& (0+255),b
 11026  0037F4  2B60               	incf	??_waitForResultSHT& (0+255),f,b
 11027  0037F6  D002               	goto	u21648
 11028  0037F8                     u21640:
 11029  0037F8  0100               	movlb	0	; () banked
 11030  0037FA  6B60               	clrf	??_waitForResultSHT& (0+255),b
 11031  0037FC                     u21648:
 11032  0037FC  5160               	movf	??_waitForResultSHT& (0+255),w,b
 11033  0037FE  6F61               	movwf	waitForResultSHT@ack& (0+255),b
 11034  003800  6B62               	clrf	(waitForResultSHT@ack+1)& (0+255),b
 11035                           
 11036                           ; BSR set to: 0
 11037                           ;CapteurI2C.c: 218: if (ack == 0) {
 11038  003802  5161               	movf	waitForResultSHT@ack& (0+255),w,b
 11039  003804  1162               	iorwf	(waitForResultSHT@ack+1)& (0+255),w,b
 11040  003806  B4D8               	btfsc	status,2,c
 11041  003808  0012               	return	
 11042                           
 11043                           ; BSR set to: 0
 11044                           
 11045                           ; BSR set to: 0
 11046                           
 11047                           ; BSR set to: 0
 11048                           ;CapteurI2C.c: 219: break;
 11049  00380A  4B63               	infsnz	waitForResultSHT@i& (0+255),f,b
 11050  00380C  2B64               	incf	(waitForResultSHT@i+1)& (0+255),f,b
 11051  00380E  D7E2               	goto	l18287
 11052  003810                     __end_of_waitForResultSHT:
 11053                           	opt stack 0
 11054                           tblptru	equ	0xFF8
 11055                           tblptrh	equ	0xFF7
 11056                           tblptrl	equ	0xFF6
 11057                           tablat	equ	0xFF5
 11058                           prodh	equ	0xFF4
 11059                           prodl	equ	0xFF3
 11060                           postinc0	equ	0xFEE
 11061                           wreg	equ	0xFE8
 11062                           indf1	equ	0xFE7
 11063                           postdec1	equ	0xFE5
 11064                           fsr1h	equ	0xFE2
 11065                           fsr1l	equ	0xFE1
 11066                           indf2	equ	0xFDF
 11067                           postinc2	equ	0xFDE
 11068                           postdec2	equ	0xFDD
 11069                           fsr2h	equ	0xFDA
 11070                           fsr2l	equ	0xFD9
 11071                           status	equ	0xFD8
 11072                           
 11073 ;; *************** function _sendCommandSHT *****************
 11074 ;; Defined at:
 11075 ;;		line 175 in file "../src/CapteurI2C.c"
 11076 ;; Parameters:    Size  Location     Type
 11077 ;;  _command        2    2[BANK0 ] int 
 11078 ;; Auto vars:     Size  Location     Type
 11079 ;;  ack             2    5[BANK0 ] int 
 11080 ;; Return value:  Size  Location     Type
 11081 ;;                  1    wreg      void 
 11082 ;; Registers used:
 11083 ;;		wreg, status,2, status,0, cstack
 11084 ;; Tracked objects:
 11085 ;;		On entry : 0/0
 11086 ;;		On exit  : 0/0
 11087 ;;		Unchanged: 0/0
 11088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11089 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11090 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11091 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11092 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11093 ;;Total ram usage:        5 bytes
 11094 ;; Hardware stack levels used:    1
 11095 ;; Hardware stack levels required when called:    6
 11096 ;; This function calls:
 11097 ;;		_i2cHighScl
 11098 ;;		_i2cHighSda
 11099 ;;		_i2cLowScl
 11100 ;;		_i2cLowSda
 11101 ;;		_i2cWriteByte
 11102 ;; This function is called by:
 11103 ;;		_readHumidity
 11104 ;;		_readTemperatureRaw
 11105 ;; This function uses a non-reentrant model
 11106 ;;
 11107                           
 11108                           	psect	text20
 11109  003668                     __ptext20:
 11110                           	opt stack 0
 11111  003668                     _sendCommandSHT:
 11112                           	opt stack 22
 11113                           
 11114                           ;CapteurI2C.c: 177: int ack;
 11115                           ;CapteurI2C.c: 180: i2cHighSda();
 11116                           
 11117                           ; BSR set to: 0
 11118                           ;incstack = 0
 11119  003668  EC13  F01D         	call	_i2cHighSda	;wreg free
 11120                           
 11121                           ;CapteurI2C.c: 181: i2cHighScl();
 11122  00366C  EC19  F01D         	call	_i2cHighScl	;wreg free
 11123                           
 11124                           ;CapteurI2C.c: 182: i2cLowSda();
 11125  003670  EC05  F01D         	call	_i2cLowSda	;wreg free
 11126                           
 11127                           ;CapteurI2C.c: 183: i2cLowScl();
 11128  003674  EC0C  F01D         	call	_i2cLowScl	;wreg free
 11129                           
 11130                           ;CapteurI2C.c: 184: i2cHighScl();
 11131  003678  EC19  F01D         	call	_i2cHighScl	;wreg free
 11132                           
 11133                           ;CapteurI2C.c: 185: i2cHighSda();
 11134  00367C  EC13  F01D         	call	_i2cHighSda	;wreg free
 11135                           
 11136                           ;CapteurI2C.c: 186: i2cLowScl();
 11137  003680  EC0C  F01D         	call	_i2cLowScl	;wreg free
 11138                           
 11139                           ;CapteurI2C.c: 189: i2cWriteByte(_command);
 11140  003684  0100               	movlb	0	; () banked
 11141  003686  5162               	movf	sendCommandSHT@_command& (0+255),w,b
 11142  003688  EC29  F01C         	call	_i2cWriteByte
 11143                           
 11144                           ;CapteurI2C.c: 192: i2cHighScl();
 11145  00368C  EC19  F01D         	call	_i2cHighScl	;wreg free
 11146                           
 11147                           ;CapteurI2C.c: 193: i2cHighSda();
 11148  003690  EC13  F01D         	call	_i2cHighSda	;wreg free
 11149                           
 11150                           ;CapteurI2C.c: 194: ack = PORTAbits.RA2;
 11151  003694  A480               	btfss	3968,2,c	;volatile
 11152  003696  D004               	goto	u21610
 11153  003698  0100               	movlb	0	; () banked
 11154  00369A  6B64               	clrf	??_sendCommandSHT& (0+255),b
 11155  00369C  2B64               	incf	??_sendCommandSHT& (0+255),f,b
 11156  00369E  D002               	goto	u21618
 11157  0036A0                     u21610:
 11158  0036A0  0100               	movlb	0	; () banked
 11159  0036A2  6B64               	clrf	??_sendCommandSHT& (0+255),b
 11160  0036A4                     u21618:
 11161  0036A4  5164               	movf	??_sendCommandSHT& (0+255),w,b
 11162  0036A6  6F65               	movwf	sendCommandSHT@ack& (0+255),b
 11163  0036A8  6B66               	clrf	(sendCommandSHT@ack+1)& (0+255),b
 11164                           
 11165                           ; BSR set to: 0
 11166                           ;CapteurI2C.c: 197: }
 11167                           ;CapteurI2C.c: 198: i2cLowScl();
 11168                           
 11169                           ; BSR set to: 0
 11170                           
 11171                           ; BSR set to: 0
 11172  0036AA  EC0C  F01D         	call	_i2cLowScl	;wreg free
 11173                           
 11174                           ;CapteurI2C.c: 199: ack = PORTAbits.RA2;
 11175  0036AE  A480               	btfss	3968,2,c	;volatile
 11176  0036B0  D004               	goto	u21620
 11177  0036B2  0100               	movlb	0	; () banked
 11178  0036B4  6B64               	clrf	??_sendCommandSHT& (0+255),b
 11179  0036B6  2B64               	incf	??_sendCommandSHT& (0+255),f,b
 11180  0036B8  D002               	goto	u21628
 11181  0036BA                     u21620:
 11182  0036BA  0100               	movlb	0	; () banked
 11183  0036BC  6B64               	clrf	??_sendCommandSHT& (0+255),b
 11184  0036BE                     u21628:
 11185  0036BE  5164               	movf	??_sendCommandSHT& (0+255),w,b
 11186  0036C0  6F65               	movwf	sendCommandSHT@ack& (0+255),b
 11187  0036C2  6B66               	clrf	(sendCommandSHT@ack+1)& (0+255),b
 11188                           
 11189                           ; BSR set to: 0
 11190  0036C4  0012               	return	
 11191  0036C6                     __end_of_sendCommandSHT:
 11192                           	opt stack 0
 11193                           tblptru	equ	0xFF8
 11194                           tblptrh	equ	0xFF7
 11195                           tblptrl	equ	0xFF6
 11196                           tablat	equ	0xFF5
 11197                           prodh	equ	0xFF4
 11198                           prodl	equ	0xFF3
 11199                           postinc0	equ	0xFEE
 11200                           wreg	equ	0xFE8
 11201                           indf1	equ	0xFE7
 11202                           postdec1	equ	0xFE5
 11203                           fsr1h	equ	0xFE2
 11204                           fsr1l	equ	0xFE1
 11205                           indf2	equ	0xFDF
 11206                           postinc2	equ	0xFDE
 11207                           postdec2	equ	0xFDD
 11208                           fsr2h	equ	0xFDA
 11209                           fsr2l	equ	0xFD9
 11210                           status	equ	0xFD8
 11211                           
 11212 ;; *************** function _i2cWriteByte *****************
 11213 ;; Defined at:
 11214 ;;		line 28 in file "../src/soft_i2c.c"
 11215 ;; Parameters:    Size  Location     Type
 11216 ;;  outByte         1    wreg     unsigned char 
 11217 ;; Auto vars:     Size  Location     Type
 11218 ;;  outByte         1    0[BANK0 ] unsigned char 
 11219 ;;  n               1    1[BANK0 ] unsigned char 
 11220 ;; Return value:  Size  Location     Type
 11221 ;;                  1    wreg      void 
 11222 ;; Registers used:
 11223 ;;		wreg, status,2, status,0, cstack
 11224 ;; Tracked objects:
 11225 ;;		On entry : 0/0
 11226 ;;		On exit  : 0/0
 11227 ;;		Unchanged: 0/0
 11228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11230 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11232 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11233 ;;Total ram usage:        2 bytes
 11234 ;; Hardware stack levels used:    1
 11235 ;; Hardware stack levels required when called:    5
 11236 ;; This function calls:
 11237 ;;		_i2cHighScl
 11238 ;;		_i2cHighSda
 11239 ;;		_i2cLowScl
 11240 ;;		_i2cLowSda
 11241 ;; This function is called by:
 11242 ;;		_sendCommandSHT
 11243 ;; This function uses a non-reentrant model
 11244 ;;
 11245                           
 11246                           	psect	text21
 11247  003852                     __ptext21:
 11248                           	opt stack 0
 11249  003852                     _i2cWriteByte:
 11250                           	opt stack 22
 11251                           
 11252                           ; BSR set to: 0
 11253                           ;incstack = 0
 11254                           ;i2cWriteByte@outByte stored from wreg
 11255  003852  0100               	movlb	0	; () banked
 11256  003854  6F60               	movwf	i2cWriteByte@outByte& (0+255),b
 11257                           
 11258                           ;soft_i2c.c: 30: unsigned char n;
 11259                           ;soft_i2c.c: 31: for(n=0; n<8; n++)
 11260  003856  0E00               	movlw	0
 11261  003858  0100               	movlb	0	; () banked
 11262  00385A  6F61               	movwf	i2cWriteByte@n& (0+255),b
 11263  00385C                     l18181:
 11264                           
 11265                           ; BSR set to: 0
 11266  00385C  0E07               	movlw	7
 11267  00385E  6561               	cpfsgt	i2cWriteByte@n& (0+255),b
 11268  003860  D001               	goto	l1736
 11269  003862  D011               	goto	u21470
 11270  003864                     l1736:
 11271                           
 11272                           ; BSR set to: 0
 11273                           ;soft_i2c.c: 32: {
 11274                           ;soft_i2c.c: 33: if(outByte&0x80)
 11275  003864  AF60               	btfss	i2cWriteByte@outByte& (0+255),7,b
 11276  003866  D003               	goto	l1738
 11277                           
 11278                           ; BSR set to: 0
 11279                           ;soft_i2c.c: 34: i2cHighSda();
 11280  003868  EC13  F01D         	call	_i2cHighSda	;wreg free
 11281  00386C  D002               	goto	l1739
 11282  00386E                     l1738:
 11283                           
 11284                           ;soft_i2c.c: 35: else
 11285                           ;soft_i2c.c: 36: i2cLowSda();
 11286  00386E  EC05  F01D         	call	_i2cLowSda	;wreg free
 11287  003872                     l1739:
 11288                           
 11289                           ;soft_i2c.c: 37: i2cHighScl();
 11290  003872  EC19  F01D         	call	_i2cHighScl	;wreg free
 11291                           
 11292                           ;soft_i2c.c: 38: i2cLowScl();
 11293  003876  EC0C  F01D         	call	_i2cLowScl	;wreg free
 11294                           
 11295                           ;soft_i2c.c: 39: outByte = outByte << 1;
 11296  00387A  0100               	movlb	0	; () banked
 11297  00387C  5160               	movf	i2cWriteByte@outByte& (0+255),w,b
 11298  00387E  2560               	addwf	i2cWriteByte@outByte& (0+255),w,b
 11299  003880  6F60               	movwf	i2cWriteByte@outByte& (0+255),b
 11300                           
 11301                           ; BSR set to: 0
 11302  003882  2B61               	incf	i2cWriteByte@n& (0+255),f,b
 11303  003884  D7EB               	goto	l18181
 11304  003886                     u21470:
 11305                           
 11306                           ; BSR set to: 0
 11307                           ;soft_i2c.c: 40: }
 11308                           ;soft_i2c.c: 41: i2cHighSda();
 11309                           
 11310                           ; BSR set to: 0
 11311  003886  EC13  F01D         	call	_i2cHighSda	;wreg free
 11312  00388A  0012               	return		;funcret
 11313  00388C                     __end_of_i2cWriteByte:
 11314                           	opt stack 0
 11315                           tblptru	equ	0xFF8
 11316                           tblptrh	equ	0xFF7
 11317                           tblptrl	equ	0xFF6
 11318                           tablat	equ	0xFF5
 11319                           prodh	equ	0xFF4
 11320                           prodl	equ	0xFF3
 11321                           postinc0	equ	0xFEE
 11322                           wreg	equ	0xFE8
 11323                           indf1	equ	0xFE7
 11324                           postdec1	equ	0xFE5
 11325                           fsr1h	equ	0xFE2
 11326                           fsr1l	equ	0xFE1
 11327                           indf2	equ	0xFDF
 11328                           postinc2	equ	0xFDE
 11329                           postdec2	equ	0xFDD
 11330                           fsr2h	equ	0xFDA
 11331                           fsr2l	equ	0xFD9
 11332                           status	equ	0xFD8
 11333                           
 11334 ;; *************** function _getData16SHT *****************
 11335 ;; Defined at:
 11336 ;;		line 231 in file "../src/CapteurI2C.c"
 11337 ;; Parameters:    Size  Location     Type
 11338 ;;  val             2   21[BANK0 ] PTR int 
 11339 ;;		 -> readTemperatureRaw@_val(2), readHumidity@_val(2), 
 11340 ;;  CRC             2   23[BANK0 ] PTR unsigned char 
 11341 ;;		 -> readTemperatureRaw@crc(1), readHumidity@crc(1), 
 11342 ;; Auto vars:     Size  Location     Type
 11343 ;;		None
 11344 ;; Return value:  Size  Location     Type
 11345 ;;                  2   21[BANK0 ] int 
 11346 ;; Registers used:
 11347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11348 ;; Tracked objects:
 11349 ;;		On entry : 0/0
 11350 ;;		On exit  : 0/0
 11351 ;;		Unchanged: 0/0
 11352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11353 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11356 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11357 ;;Total ram usage:        4 bytes
 11358 ;; Hardware stack levels used:    1
 11359 ;; Hardware stack levels required when called:    6
 11360 ;; This function calls:
 11361 ;;		_i2cAck
 11362 ;;		_i2cHighSda
 11363 ;;		_i2cStop
 11364 ;;		_shiftIn
 11365 ;;		_shiftInCRC
 11366 ;; This function is called by:
 11367 ;;		_readHumidity
 11368 ;;		_readTemperatureRaw
 11369 ;; This function uses a non-reentrant model
 11370 ;;
 11371                           
 11372                           	psect	text22
 11373  0033E0                     __ptext22:
 11374                           	opt stack 0
 11375  0033E0                     _getData16SHT:
 11376                           	opt stack 22
 11377                           
 11378                           ;CapteurI2C.c: 235: i2cHighSda();
 11379                           
 11380                           ;incstack = 0
 11381  0033E0  EC13  F01D         	call	_i2cHighSda	;wreg free
 11382                           
 11383                           ;CapteurI2C.c: 237: *val = shiftIn(8);
 11384  0033E4  0E00               	movlw	0
 11385  0033E6  0100               	movlb	0	; () banked
 11386  0033E8  6F61               	movwf	(shiftIn@_numBits+1)& (0+255),b
 11387  0033EA  0E08               	movlw	8
 11388  0033EC  6F60               	movwf	shiftIn@_numBits& (0+255),b
 11389  0033EE  EC68  F01A         	call	_shiftIn	;wreg free
 11390  0033F2  C075  FFD9         	movff	getData16SHT@val,fsr2l
 11391  0033F6  C076  FFDA         	movff	getData16SHT@val+1,fsr2h
 11392  0033FA  0100               	movlb	0	; () banked
 11393  0033FC  C060  FFDE         	movff	?_shiftIn,postinc2
 11394  003400  C061  FFDD         	movff	?_shiftIn+1,postdec2
 11395                           
 11396                           ; BSR set to: 0
 11397                           ;CapteurI2C.c: 238: *val *= 256;
 11398  003404  C075  FFD9         	movff	getData16SHT@val,fsr2l
 11399  003408  C076  FFDA         	movff	getData16SHT@val+1,fsr2h
 11400  00340C  50DE               	movf	postinc2,w,c
 11401  00340E  6EDD               	movwf	postdec2,c
 11402  003410  6ADF               	clrf	indf2,c
 11403                           
 11404                           ; BSR set to: 0
 11405                           ;CapteurI2C.c: 241: i2cAck();
 11406  003412  ECFC  F01C         	call	_i2cAck	;wreg free
 11407                           
 11408                           ;CapteurI2C.c: 244: i2cHighSda();
 11409  003416  EC13  F01D         	call	_i2cHighSda	;wreg free
 11410                           
 11411                           ;CapteurI2C.c: 245: *val |= shiftIn(8);
 11412  00341A  0E00               	movlw	0
 11413  00341C  0100               	movlb	0	; () banked
 11414  00341E  6F61               	movwf	(shiftIn@_numBits+1)& (0+255),b
 11415  003420  0E08               	movlw	8
 11416  003422  6F60               	movwf	shiftIn@_numBits& (0+255),b
 11417  003424  EC68  F01A         	call	_shiftIn	;wreg free
 11418  003428  C075  FFD9         	movff	getData16SHT@val,fsr2l
 11419  00342C  C076  FFDA         	movff	getData16SHT@val+1,fsr2h
 11420  003430  0100               	movlb	0	; () banked
 11421  003432  5160               	movf	?_shiftIn& (0+255),w,b
 11422  003434  12DE               	iorwf	postinc2,f,c
 11423  003436  5161               	movf	(?_shiftIn+1)& (0+255),w,b
 11424  003438  12DD               	iorwf	postdec2,f,c
 11425                           
 11426                           ; BSR set to: 0
 11427                           ;CapteurI2C.c: 249: i2cAck();
 11428  00343A  ECFC  F01C         	call	_i2cAck	;wreg free
 11429                           
 11430                           ;CapteurI2C.c: 251: i2cHighSda();
 11431  00343E  EC13  F01D         	call	_i2cHighSda	;wreg free
 11432                           
 11433                           ;CapteurI2C.c: 253: *CRC = shiftInCRC();
 11434  003442  ECD1  F01A         	call	_shiftInCRC	;wreg free
 11435  003446  0100               	movlb	0	; () banked
 11436  003448  516E               	movf	?_shiftInCRC& (0+255),w,b
 11437  00344A  C077  FFD9         	movff	getData16SHT@CRC,fsr2l
 11438  00344E  C078  FFDA         	movff	getData16SHT@CRC+1,fsr2h
 11439  003452  6EDF               	movwf	indf2,c
 11440                           
 11441                           ; BSR set to: 0
 11442                           ;CapteurI2C.c: 255: i2cAck();
 11443  003454  ECFC  F01C         	call	_i2cAck	;wreg free
 11444                           
 11445                           ;CapteurI2C.c: 264: i2cStop();
 11446  003458  ECF3  F01C         	call	_i2cStop	;wreg free
 11447  00345C  0012               	return	
 11448  00345E                     __end_of_getData16SHT:
 11449                           	opt stack 0
 11450                           tblptru	equ	0xFF8
 11451                           tblptrh	equ	0xFF7
 11452                           tblptrl	equ	0xFF6
 11453                           tablat	equ	0xFF5
 11454                           prodh	equ	0xFF4
 11455                           prodl	equ	0xFF3
 11456                           postinc0	equ	0xFEE
 11457                           wreg	equ	0xFE8
 11458                           indf1	equ	0xFE7
 11459                           postdec1	equ	0xFE5
 11460                           fsr1h	equ	0xFE2
 11461                           fsr1l	equ	0xFE1
 11462                           indf2	equ	0xFDF
 11463                           postinc2	equ	0xFDE
 11464                           postdec2	equ	0xFDD
 11465                           fsr2h	equ	0xFDA
 11466                           fsr2l	equ	0xFD9
 11467                           status	equ	0xFD8
 11468                           
 11469 ;; *************** function _shiftInCRC *****************
 11470 ;; Defined at:
 11471 ;;		line 157 in file "../src/CapteurI2C.c"
 11472 ;; Parameters:    Size  Location     Type
 11473 ;;		None
 11474 ;; Auto vars:     Size  Location     Type
 11475 ;;  i               2   19[BANK0 ] int 
 11476 ;;  ret             2   17[BANK0 ] int 
 11477 ;; Return value:  Size  Location     Type
 11478 ;;                  2   14[BANK0 ] int 
 11479 ;; Registers used:
 11480 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11481 ;; Tracked objects:
 11482 ;;		On entry : 0/0
 11483 ;;		On exit  : 0/0
 11484 ;;		Unchanged: 0/0
 11485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11486 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11487 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11488 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11489 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11490 ;;Total ram usage:        7 bytes
 11491 ;; Hardware stack levels used:    1
 11492 ;; Hardware stack levels required when called:    5
 11493 ;; This function calls:
 11494 ;;		___awdiv
 11495 ;;		_i2cHighScl
 11496 ;;		_i2cLowScl
 11497 ;; This function is called by:
 11498 ;;		_getData16SHT
 11499 ;; This function uses a non-reentrant model
 11500 ;;
 11501                           
 11502                           	psect	text23
 11503  0035A2                     __ptext23:
 11504                           	opt stack 0
 11505  0035A2                     _shiftInCRC:
 11506                           	opt stack 22
 11507                           
 11508                           ;CapteurI2C.c: 159: int ret = 0;
 11509                           
 11510                           ;incstack = 0
 11511  0035A2  0E00               	movlw	0
 11512  0035A4  0100               	movlb	0	; () banked
 11513  0035A6  6F72               	movwf	(shiftInCRC@ret+1)& (0+255),b
 11514  0035A8  0E00               	movlw	0
 11515  0035AA  6F71               	movwf	shiftInCRC@ret& (0+255),b
 11516                           
 11517                           ;CapteurI2C.c: 160: int i;
 11518                           ;CapteurI2C.c: 162: for (i=7; i>=0; i--)
 11519  0035AC  0E00               	movlw	0
 11520  0035AE  6F74               	movwf	(shiftInCRC@i+1)& (0+255),b
 11521  0035B0  0E07               	movlw	7
 11522  0035B2  6F73               	movwf	shiftInCRC@i& (0+255),b
 11523  0035B4                     l18215:
 11524                           
 11525                           ; BSR set to: 0
 11526  0035B4  BF74               	btfsc	(shiftInCRC@i+1)& (0+255),7,b
 11527  0035B6  D024               	goto	u21520
 11528                           
 11529                           ; BSR set to: 0
 11530                           ;CapteurI2C.c: 163: {
 11531                           ;CapteurI2C.c: 164: i2cHighScl();
 11532                           
 11533                           ; BSR set to: 0
 11534                           
 11535                           ; BSR set to: 0
 11536  0035B8  EC19  F01D         	call	_i2cHighScl	;wreg free
 11537                           
 11538                           ;CapteurI2C.c: 166: ret = ret/2 + (PORTAbits.RA2*128);
 11539  0035BC  A480               	btfss	3968,2,c	;volatile
 11540  0035BE  D004               	goto	u21510
 11541  0035C0  0100               	movlb	0	; () banked
 11542  0035C2  6B70               	clrf	??_shiftInCRC& (0+255),b
 11543  0035C4  2B70               	incf	??_shiftInCRC& (0+255),f,b
 11544  0035C6  D002               	goto	u21518
 11545  0035C8                     u21510:
 11546  0035C8  0100               	movlb	0	; () banked
 11547  0035CA  6B70               	clrf	??_shiftInCRC& (0+255),b
 11548  0035CC                     u21518:
 11549  0035CC  5170               	movf	??_shiftInCRC& (0+255),w,b
 11550  0035CE  0D80               	mullw	128
 11551  0035D0  C071  F066         	movff	shiftInCRC@ret,___awdiv@dividend
 11552  0035D4  C072  F067         	movff	shiftInCRC@ret+1,___awdiv@dividend+1
 11553  0035D8  0E00               	movlw	0
 11554  0035DA  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 11555  0035DC  0E02               	movlw	2
 11556  0035DE  6F68               	movwf	___awdiv@divisor& (0+255),b
 11557  0035E0  EC2A  F019         	call	___awdiv	;wreg free
 11558  0035E4  50F3               	movf	prodl,w,c
 11559  0035E6  0100               	movlb	0	; () banked
 11560  0035E8  2566               	addwf	?___awdiv& (0+255),w,b
 11561  0035EA  6F71               	movwf	shiftInCRC@ret& (0+255),b
 11562  0035EC  50F4               	movf	prodh,w,c
 11563  0035EE  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 11564  0035F0  6F72               	movwf	(shiftInCRC@ret+1)& (0+255),b
 11565                           
 11566                           ; BSR set to: 0
 11567                           ;CapteurI2C.c: 167: i2cLowScl();
 11568  0035F2  EC0C  F01D         	call	_i2cLowScl	;wreg free
 11569  0035F6  0100               	movlb	0	; () banked
 11570  0035F8  0773               	decf	shiftInCRC@i& (0+255),f,b
 11571  0035FA  A0D8               	btfss	status,0,c
 11572  0035FC  0774               	decf	(shiftInCRC@i+1)& (0+255),f,b
 11573  0035FE  D7DA               	goto	l18215
 11574  003600                     u21520:
 11575                           
 11576                           ; BSR set to: 0
 11577                           ;CapteurI2C.c: 168: }
 11578                           ;CapteurI2C.c: 170: return(ret);
 11579  003600  C071  F06E         	movff	shiftInCRC@ret,?_shiftInCRC
 11580  003604  C072  F06F         	movff	shiftInCRC@ret+1,?_shiftInCRC+1
 11581                           
 11582                           ; BSR set to: 0
 11583  003608  0012               	return		;funcret
 11584  00360A                     __end_of_shiftInCRC:
 11585                           	opt stack 0
 11586                           tblptru	equ	0xFF8
 11587                           tblptrh	equ	0xFF7
 11588                           tblptrl	equ	0xFF6
 11589                           tablat	equ	0xFF5
 11590                           prodh	equ	0xFF4
 11591                           prodl	equ	0xFF3
 11592                           postinc0	equ	0xFEE
 11593                           wreg	equ	0xFE8
 11594                           indf1	equ	0xFE7
 11595                           postdec1	equ	0xFE5
 11596                           fsr1h	equ	0xFE2
 11597                           fsr1l	equ	0xFE1
 11598                           indf2	equ	0xFDF
 11599                           postinc2	equ	0xFDE
 11600                           postdec2	equ	0xFDD
 11601                           fsr2h	equ	0xFDA
 11602                           fsr2l	equ	0xFD9
 11603                           status	equ	0xFD8
 11604                           
 11605 ;; *************** function ___awdiv *****************
 11606 ;; Defined at:
 11607 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 11608 ;; Parameters:    Size  Location     Type
 11609 ;;  dividend        2    6[BANK0 ] int 
 11610 ;;  divisor         2    8[BANK0 ] int 
 11611 ;; Auto vars:     Size  Location     Type
 11612 ;;  quotient        2   12[BANK0 ] int 
 11613 ;;  sign            1   11[BANK0 ] unsigned char 
 11614 ;;  counter         1   10[BANK0 ] unsigned char 
 11615 ;; Return value:  Size  Location     Type
 11616 ;;                  2    6[BANK0 ] int 
 11617 ;; Registers used:
 11618 ;;		wreg, status,2, status,0
 11619 ;; Tracked objects:
 11620 ;;		On entry : 0/0
 11621 ;;		On exit  : 0/0
 11622 ;;		Unchanged: 0/0
 11623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11624 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11625 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11627 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11628 ;;Total ram usage:        8 bytes
 11629 ;; Hardware stack levels used:    1
 11630 ;; Hardware stack levels required when called:    4
 11631 ;; This function calls:
 11632 ;;		Nothing
 11633 ;; This function is called by:
 11634 ;;		_readTemperatureRaw
 11635 ;;		_shiftInCRC
 11636 ;;		_fround
 11637 ;;		_scale
 11638 ;;		_sprintf
 11639 ;;		_PrintTempLCD
 11640 ;;		_MiMAC_SetPower
 11641 ;;		_MiApp_NoiseDetection
 11642 ;; This function uses a non-reentrant model
 11643 ;;
 11644                           
 11645                           	psect	text24
 11646  003254                     __ptext24:
 11647                           	opt stack 0
 11648  003254                     ___awdiv:
 11649                           	opt stack 24
 11650                           
 11651                           ; BSR set to: 0
 11652                           ;incstack = 0
 11653  003254  0E00               	movlw	0
 11654  003256  0100               	movlb	0	; () banked
 11655  003258  6F6B               	movwf	___awdiv@sign& (0+255),b
 11656                           
 11657                           ; BSR set to: 0
 11658  00325A  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11659  00325C  D006               	goto	l2764
 11660                           
 11661                           ; BSR set to: 0
 11662  00325E  6D68               	negf	___awdiv@divisor& (0+255),b
 11663  003260  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11664  003262  B0D8               	btfsc	status,0,c
 11665  003264  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11666                           
 11667                           ; BSR set to: 0
 11668  003266  0E01               	movlw	1
 11669  003268  6F6B               	movwf	___awdiv@sign& (0+255),b
 11670  00326A                     l2764:
 11671                           
 11672                           ; BSR set to: 0
 11673                           
 11674                           ; BSR set to: 0
 11675  00326A  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11676  00326C  D006               	goto	l2765
 11677                           
 11678                           ; BSR set to: 0
 11679  00326E  6D66               	negf	___awdiv@dividend& (0+255),b
 11680  003270  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11681  003272  B0D8               	btfsc	status,0,c
 11682  003274  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11683                           
 11684                           ; BSR set to: 0
 11685  003276  0E01               	movlw	1
 11686  003278  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
 11687  00327A                     l2765:
 11688                           
 11689                           ; BSR set to: 0
 11690                           
 11691                           ; BSR set to: 0
 11692  00327A  0E00               	movlw	0
 11693  00327C  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
 11694  00327E  0E00               	movlw	0
 11695  003280  6F6C               	movwf	___awdiv@quotient& (0+255),b
 11696                           
 11697                           ; BSR set to: 0
 11698  003282  5168               	movf	___awdiv@divisor& (0+255),w,b
 11699  003284  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 11700  003286  B4D8               	btfsc	status,2,c
 11701  003288  D01C               	goto	l2772
 11702                           
 11703                           ; BSR set to: 0
 11704  00328A  0E01               	movlw	1
 11705  00328C  6F6A               	movwf	___awdiv@counter& (0+255),b
 11706  00328E  D004               	goto	l2767
 11707  003290                     
 11708                           ; BSR set to: 0
 11709                           
 11710                           ; BSR set to: 0
 11711  003290  90D8               	bcf	status,0,c
 11712  003292  3768               	rlcf	___awdiv@divisor& (0+255),f,b
 11713  003294  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 11714  003296  2B6A               	incf	___awdiv@counter& (0+255),f,b
 11715  003298                     l2767:
 11716                           
 11717                           ; BSR set to: 0
 11718                           
 11719                           ; BSR set to: 0
 11720  003298  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11721  00329A  D7FA               	goto	l2768
 11722  00329C                     u21420:
 11723                           
 11724                           ; BSR set to: 0
 11725                           
 11726                           ; BSR set to: 0
 11727                           
 11728                           ; BSR set to: 0
 11729  00329C  90D8               	bcf	status,0,c
 11730  00329E  376C               	rlcf	___awdiv@quotient& (0+255),f,b
 11731  0032A0  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 11732                           
 11733                           ; BSR set to: 0
 11734  0032A2  5168               	movf	___awdiv@divisor& (0+255),w,b
 11735  0032A4  5D66               	subwf	___awdiv@dividend& (0+255),w,b
 11736  0032A6  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11737  0032A8  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 11738  0032AA  A0D8               	btfss	status,0,c
 11739  0032AC  D005               	goto	l2771
 11740                           
 11741                           ; BSR set to: 0
 11742  0032AE  5168               	movf	___awdiv@divisor& (0+255),w,b
 11743  0032B0  5F66               	subwf	___awdiv@dividend& (0+255),f,b
 11744  0032B2  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11745  0032B4  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 11746                           
 11747                           ; BSR set to: 0
 11748  0032B6  816C               	bsf	___awdiv@quotient& (0+255),0,b
 11749  0032B8                     l2771:
 11750                           
 11751                           ; BSR set to: 0
 11752                           
 11753                           ; BSR set to: 0
 11754  0032B8  90D8               	bcf	status,0,c
 11755  0032BA  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 11756  0032BC  3368               	rrcf	___awdiv@divisor& (0+255),f,b
 11757                           
 11758                           ; BSR set to: 0
 11759  0032BE  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
 11760  0032C0  D7ED               	goto	u21420
 11761  0032C2                     l2772:
 11762                           
 11763                           ; BSR set to: 0
 11764                           
 11765                           ; BSR set to: 0
 11766                           
 11767                           ; BSR set to: 0
 11768  0032C2  516B               	movf	___awdiv@sign& (0+255),w,b
 11769  0032C4  B4D8               	btfsc	status,2,c
 11770  0032C6  D004               	goto	l2773
 11771                           
 11772                           ; BSR set to: 0
 11773  0032C8  6D6C               	negf	___awdiv@quotient& (0+255),b
 11774  0032CA  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 11775  0032CC  B0D8               	btfsc	status,0,c
 11776  0032CE  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 11777  0032D0                     l2773:
 11778                           
 11779                           ; BSR set to: 0
 11780                           
 11781                           ; BSR set to: 0
 11782  0032D0  C06C  F066         	movff	___awdiv@quotient,?___awdiv
 11783  0032D4  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
 11784  0032D8  0012               	return	
 11785  0032DA                     __end_of___awdiv:
 11786                           	opt stack 0
 11787                           tblptru	equ	0xFF8
 11788                           tblptrh	equ	0xFF7
 11789                           tblptrl	equ	0xFF6
 11790                           tablat	equ	0xFF5
 11791                           prodh	equ	0xFF4
 11792                           prodl	equ	0xFF3
 11793                           postinc0	equ	0xFEE
 11794                           wreg	equ	0xFE8
 11795                           indf1	equ	0xFE7
 11796                           postdec1	equ	0xFE5
 11797                           fsr1h	equ	0xFE2
 11798                           fsr1l	equ	0xFE1
 11799                           indf2	equ	0xFDF
 11800                           postinc2	equ	0xFDE
 11801                           postdec2	equ	0xFDD
 11802                           fsr2h	equ	0xFDA
 11803                           fsr2l	equ	0xFD9
 11804                           status	equ	0xFD8
 11805                           
 11806 ;; *************** function _shiftIn *****************
 11807 ;; Defined at:
 11808 ;;		line 141 in file "../src/CapteurI2C.c"
 11809 ;; Parameters:    Size  Location     Type
 11810 ;;  _numBits        2    0[BANK0 ] int 
 11811 ;; Auto vars:     Size  Location     Type
 11812 ;;  ret             2    7[BANK0 ] int 
 11813 ;;  i               2    5[BANK0 ] int 
 11814 ;; Return value:  Size  Location     Type
 11815 ;;                  2    0[BANK0 ] int 
 11816 ;; Registers used:
 11817 ;;		wreg, status,2, status,0, cstack
 11818 ;; Tracked objects:
 11819 ;;		On entry : 0/0
 11820 ;;		On exit  : 0/0
 11821 ;;		Unchanged: 0/0
 11822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11823 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11824 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11825 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11826 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11827 ;;Total ram usage:        9 bytes
 11828 ;; Hardware stack levels used:    1
 11829 ;; Hardware stack levels required when called:    5
 11830 ;; This function calls:
 11831 ;;		_i2cHighScl
 11832 ;;		_i2cLowScl
 11833 ;; This function is called by:
 11834 ;;		_getData16SHT
 11835 ;; This function uses a non-reentrant model
 11836 ;;
 11837                           
 11838                           	psect	text25
 11839  0034D0                     __ptext25:
 11840                           	opt stack 0
 11841  0034D0                     _shiftIn:
 11842                           	opt stack 22
 11843                           
 11844                           ;CapteurI2C.c: 143: int ret = 0;
 11845                           
 11846                           ; BSR set to: 0
 11847                           ;incstack = 0
 11848  0034D0  0E00               	movlw	0
 11849  0034D2  0100               	movlb	0	; () banked
 11850  0034D4  6F68               	movwf	(shiftIn@ret+1)& (0+255),b
 11851  0034D6  0E00               	movlw	0
 11852  0034D8  6F67               	movwf	shiftIn@ret& (0+255),b
 11853                           
 11854                           ;CapteurI2C.c: 144: int i;
 11855                           ;CapteurI2C.c: 146: for (i=0; i<_numBits; ++i)
 11856  0034DA  0E00               	movlw	0
 11857  0034DC  6F66               	movwf	(shiftIn@i+1)& (0+255),b
 11858  0034DE  0E00               	movlw	0
 11859  0034E0  6F65               	movwf	shiftIn@i& (0+255),b
 11860  0034E2  D01C               	goto	l1811
 11861  0034E4                     
 11862                           ; BSR set to: 0
 11863                           ;CapteurI2C.c: 147: {
 11864                           ;CapteurI2C.c: 148: i2cHighScl();
 11865                           
 11866                           ; BSR set to: 0
 11867  0034E4  EC19  F01D         	call	_i2cHighScl	;wreg free
 11868                           
 11869                           ;CapteurI2C.c: 150: ret = ret*2 + PORTAbits.RA2;
 11870  0034E8  A480               	btfss	3968,2,c	;volatile
 11871  0034EA  D004               	goto	u21480
 11872  0034EC  0100               	movlb	0	; () banked
 11873  0034EE  6B62               	clrf	??_shiftIn& (0+255),b
 11874  0034F0  2B62               	incf	??_shiftIn& (0+255),f,b
 11875  0034F2  D002               	goto	u21488
 11876  0034F4                     u21480:
 11877  0034F4  0100               	movlb	0	; () banked
 11878  0034F6  6B62               	clrf	??_shiftIn& (0+255),b
 11879  0034F8                     u21488:
 11880  0034F8  C067  F063         	movff	shiftIn@ret,??_shiftIn+1
 11881  0034FC  C068  F064         	movff	shiftIn@ret+1,??_shiftIn+2
 11882  003500  90D8               	bcf	status,0,c
 11883  003502  3763               	rlcf	(??_shiftIn+1)& (0+255),f,b
 11884  003504  3764               	rlcf	(??_shiftIn+2)& (0+255),f,b
 11885  003506  5162               	movf	??_shiftIn& (0+255),w,b
 11886  003508  2563               	addwf	(??_shiftIn+1)& (0+255),w,b
 11887  00350A  6F67               	movwf	shiftIn@ret& (0+255),b
 11888  00350C  0E00               	movlw	0
 11889  00350E  2164               	addwfc	(??_shiftIn+2)& (0+255),w,b
 11890  003510  6F68               	movwf	(shiftIn@ret+1)& (0+255),b
 11891                           
 11892                           ; BSR set to: 0
 11893                           ;CapteurI2C.c: 151: i2cLowScl();
 11894  003512  EC0C  F01D         	call	_i2cLowScl	;wreg free
 11895  003516  0100               	movlb	0	; () banked
 11896  003518  4B65               	infsnz	shiftIn@i& (0+255),f,b
 11897  00351A  2B66               	incf	(shiftIn@i+1)& (0+255),f,b
 11898  00351C                     l1811:
 11899                           
 11900                           ; BSR set to: 0
 11901                           
 11902                           ; BSR set to: 0
 11903  00351C  5160               	movf	shiftIn@_numBits& (0+255),w,b
 11904  00351E  5D65               	subwf	shiftIn@i& (0+255),w,b
 11905  003520  5166               	movf	(shiftIn@i+1)& (0+255),w,b
 11906  003522  0A80               	xorlw	128
 11907  003524  6F62               	movwf	??_shiftIn& (0+255),b
 11908  003526  5161               	movf	(shiftIn@_numBits+1)& (0+255),w,b
 11909  003528  0A80               	xorlw	128
 11910  00352A  5962               	subwfb	??_shiftIn& (0+255),w,b
 11911  00352C  A0D8               	btfss	status,0,c
 11912  00352E  D7DA               	goto	l1812
 11913                           
 11914                           ; BSR set to: 0
 11915                           ;CapteurI2C.c: 152: }
 11916                           ;CapteurI2C.c: 154: return(ret);
 11917  003530  C067  F060         	movff	shiftIn@ret,?_shiftIn
 11918  003534  C068  F061         	movff	shiftIn@ret+1,?_shiftIn+1
 11919                           
 11920                           ; BSR set to: 0
 11921  003538  0012               	return		;funcret
 11922  00353A                     __end_of_shiftIn:
 11923                           	opt stack 0
 11924                           tblptru	equ	0xFF8
 11925                           tblptrh	equ	0xFF7
 11926                           tblptrl	equ	0xFF6
 11927                           tablat	equ	0xFF5
 11928                           prodh	equ	0xFF4
 11929                           prodl	equ	0xFF3
 11930                           postinc0	equ	0xFEE
 11931                           wreg	equ	0xFE8
 11932                           indf1	equ	0xFE7
 11933                           postdec1	equ	0xFE5
 11934                           fsr1h	equ	0xFE2
 11935                           fsr1l	equ	0xFE1
 11936                           indf2	equ	0xFDF
 11937                           postinc2	equ	0xFDE
 11938                           postdec2	equ	0xFDD
 11939                           fsr2h	equ	0xFDA
 11940                           fsr2l	equ	0xFD9
 11941                           status	equ	0xFD8
 11942                           
 11943 ;; *************** function _i2cStop *****************
 11944 ;; Defined at:
 11945 ;;		line 68 in file "../src/soft_i2c.c"
 11946 ;; Parameters:    Size  Location     Type
 11947 ;;		None
 11948 ;; Auto vars:     Size  Location     Type
 11949 ;;		None
 11950 ;; Return value:  Size  Location     Type
 11951 ;;                  1    wreg      void 
 11952 ;; Registers used:
 11953 ;;		wreg, cstack
 11954 ;; Tracked objects:
 11955 ;;		On entry : 0/0
 11956 ;;		On exit  : 0/0
 11957 ;;		Unchanged: 0/0
 11958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11963 ;;Total ram usage:        0 bytes
 11964 ;; Hardware stack levels used:    1
 11965 ;; Hardware stack levels required when called:    5
 11966 ;; This function calls:
 11967 ;;		_i2cHighScl
 11968 ;;		_i2cHighSda
 11969 ;;		_i2cLowScl
 11970 ;;		_i2cLowSda
 11971 ;; This function is called by:
 11972 ;;		_getData16SHT
 11973 ;; This function uses a non-reentrant model
 11974 ;;
 11975                           
 11976                           	psect	text26
 11977  0039E6                     __ptext26:
 11978                           	opt stack 0
 11979  0039E6                     _i2cStop:
 11980                           	opt stack 22
 11981                           
 11982                           ;soft_i2c.c: 70: i2cLowScl();
 11983                           
 11984                           ; BSR set to: 0
 11985                           ;incstack = 0
 11986  0039E6  EC0C  F01D         	call	_i2cLowScl	;wreg free
 11987                           
 11988                           ;soft_i2c.c: 71: i2cLowSda();
 11989  0039EA  EC05  F01D         	call	_i2cLowSda	;wreg free
 11990                           
 11991                           ;soft_i2c.c: 72: i2cHighScl();
 11992  0039EE  EC19  F01D         	call	_i2cHighScl	;wreg free
 11993                           
 11994                           ;soft_i2c.c: 73: i2cHighSda();
 11995  0039F2  EC13  F01D         	call	_i2cHighSda	;wreg free
 11996  0039F6  0012               	return		;funcret
 11997  0039F8                     __end_of_i2cStop:
 11998                           	opt stack 0
 11999                           tblptru	equ	0xFF8
 12000                           tblptrh	equ	0xFF7
 12001                           tblptrl	equ	0xFF6
 12002                           tablat	equ	0xFF5
 12003                           prodh	equ	0xFF4
 12004                           prodl	equ	0xFF3
 12005                           postinc0	equ	0xFEE
 12006                           wreg	equ	0xFE8
 12007                           indf1	equ	0xFE7
 12008                           postdec1	equ	0xFE5
 12009                           fsr1h	equ	0xFE2
 12010                           fsr1l	equ	0xFE1
 12011                           indf2	equ	0xFDF
 12012                           postinc2	equ	0xFDE
 12013                           postdec2	equ	0xFDD
 12014                           fsr2h	equ	0xFDA
 12015                           fsr2l	equ	0xFD9
 12016                           status	equ	0xFD8
 12017                           
 12018 ;; *************** function _i2cAck *****************
 12019 ;; Defined at:
 12020 ;;		line 50 in file "../src/soft_i2c.c"
 12021 ;; Parameters:    Size  Location     Type
 12022 ;;		None
 12023 ;; Auto vars:     Size  Location     Type
 12024 ;;		None
 12025 ;; Return value:  Size  Location     Type
 12026 ;;                  1    wreg      void 
 12027 ;; Registers used:
 12028 ;;		wreg, cstack
 12029 ;; Tracked objects:
 12030 ;;		On entry : 0/0
 12031 ;;		On exit  : 0/0
 12032 ;;		Unchanged: 0/0
 12033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12038 ;;Total ram usage:        0 bytes
 12039 ;; Hardware stack levels used:    1
 12040 ;; Hardware stack levels required when called:    5
 12041 ;; This function calls:
 12042 ;;		_i2cHighScl
 12043 ;;		_i2cHighSda
 12044 ;;		_i2cLowScl
 12045 ;;		_i2cLowSda
 12046 ;; This function is called by:
 12047 ;;		_getData16SHT
 12048 ;; This function uses a non-reentrant model
 12049 ;;
 12050                           
 12051                           	psect	text27
 12052  0039F8                     __ptext27:
 12053                           	opt stack 0
 12054  0039F8                     _i2cAck:
 12055                           	opt stack 22
 12056                           
 12057                           ;soft_i2c.c: 52: i2cLowSda();
 12058                           
 12059                           ;incstack = 0
 12060  0039F8  EC05  F01D         	call	_i2cLowSda	;wreg free
 12061                           
 12062                           ;soft_i2c.c: 53: i2cHighScl();
 12063  0039FC  EC19  F01D         	call	_i2cHighScl	;wreg free
 12064                           
 12065                           ;soft_i2c.c: 54: i2cLowScl();
 12066  003A00  EC0C  F01D         	call	_i2cLowScl	;wreg free
 12067                           
 12068                           ;soft_i2c.c: 55: i2cHighSda();
 12069  003A04  EC13  F01D         	call	_i2cHighSda	;wreg free
 12070  003A08  0012               	return		;funcret
 12071  003A0A                     __end_of_i2cAck:
 12072                           	opt stack 0
 12073                           tblptru	equ	0xFF8
 12074                           tblptrh	equ	0xFF7
 12075                           tblptrl	equ	0xFF6
 12076                           tablat	equ	0xFF5
 12077                           prodh	equ	0xFF4
 12078                           prodl	equ	0xFF3
 12079                           postinc0	equ	0xFEE
 12080                           wreg	equ	0xFE8
 12081                           indf1	equ	0xFE7
 12082                           postdec1	equ	0xFE5
 12083                           fsr1h	equ	0xFE2
 12084                           fsr1l	equ	0xFE1
 12085                           indf2	equ	0xFDF
 12086                           postinc2	equ	0xFDE
 12087                           postdec2	equ	0xFDD
 12088                           fsr2h	equ	0xFDA
 12089                           fsr2l	equ	0xFD9
 12090                           status	equ	0xFD8
 12091                           
 12092 ;; *************** function _i2cLowSda *****************
 12093 ;; Defined at:
 12094 ;;		line 82 in file "../src/soft_i2c.c"
 12095 ;; Parameters:    Size  Location     Type
 12096 ;;		None
 12097 ;; Auto vars:     Size  Location     Type
 12098 ;;		None
 12099 ;; Return value:  Size  Location     Type
 12100 ;;                  1    wreg      void 
 12101 ;; Registers used:
 12102 ;;		wreg
 12103 ;; Tracked objects:
 12104 ;;		On entry : 0/0
 12105 ;;		On exit  : 0/0
 12106 ;;		Unchanged: 0/0
 12107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12112 ;;Total ram usage:        0 bytes
 12113 ;; Hardware stack levels used:    1
 12114 ;; Hardware stack levels required when called:    4
 12115 ;; This function calls:
 12116 ;;		Nothing
 12117 ;; This function is called by:
 12118 ;;		_i2cWriteByte
 12119 ;;		_i2cAck
 12120 ;;		_i2cStop
 12121 ;;		_sendCommandSHT
 12122 ;;		_i2cStart
 12123 ;; This function uses a non-reentrant model
 12124 ;;
 12125                           
 12126                           	psect	text28
 12127  003A0A                     __ptext28:
 12128                           	opt stack 0
 12129  003A0A                     _i2cLowSda:
 12130                           	opt stack 22
 12131                           
 12132                           ;soft_i2c.c: 84: PORTAbits.RA2 = 0;
 12133                           
 12134                           ;incstack = 0
 12135  003A0A  9480               	bcf	3968,2,c	;volatile
 12136                           
 12137                           ;soft_i2c.c: 85: TRISAbits.TRISA2 = 0;
 12138  003A0C  9492               	bcf	3986,2,c	;volatile
 12139                           
 12140                           ;soft_i2c.c: 86: _delay((unsigned long)((5)*(16000000/4000000.0)));
 12141  003A0E  0E06               	movlw	6
 12142  003A10                     u26387:
 12143  003A10  2EE8               	decfsz	wreg,f,c
 12144  003A12  D7FE               	bra	u26387
 12145  003A14  D000               	nop2	
 12146  003A16  0012               	return		;funcret
 12147  003A18                     __end_of_i2cLowSda:
 12148                           	opt stack 0
 12149                           tblptru	equ	0xFF8
 12150                           tblptrh	equ	0xFF7
 12151                           tblptrl	equ	0xFF6
 12152                           tablat	equ	0xFF5
 12153                           prodh	equ	0xFF4
 12154                           prodl	equ	0xFF3
 12155                           postinc0	equ	0xFEE
 12156                           wreg	equ	0xFE8
 12157                           indf1	equ	0xFE7
 12158                           postdec1	equ	0xFE5
 12159                           fsr1h	equ	0xFE2
 12160                           fsr1l	equ	0xFE1
 12161                           indf2	equ	0xFDF
 12162                           postinc2	equ	0xFDE
 12163                           postdec2	equ	0xFDD
 12164                           fsr2h	equ	0xFDA
 12165                           fsr2l	equ	0xFD9
 12166                           status	equ	0xFD8
 12167                           
 12168 ;; *************** function _i2cLowScl *****************
 12169 ;; Defined at:
 12170 ;;		line 95 in file "../src/soft_i2c.c"
 12171 ;; Parameters:    Size  Location     Type
 12172 ;;		None
 12173 ;; Auto vars:     Size  Location     Type
 12174 ;;		None
 12175 ;; Return value:  Size  Location     Type
 12176 ;;                  1    wreg      void 
 12177 ;; Registers used:
 12178 ;;		wreg
 12179 ;; Tracked objects:
 12180 ;;		On entry : 0/0
 12181 ;;		On exit  : 0/0
 12182 ;;		Unchanged: 0/0
 12183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12188 ;;Total ram usage:        0 bytes
 12189 ;; Hardware stack levels used:    1
 12190 ;; Hardware stack levels required when called:    4
 12191 ;; This function calls:
 12192 ;;		Nothing
 12193 ;; This function is called by:
 12194 ;;		_i2cWriteByte
 12195 ;;		_i2cAck
 12196 ;;		_i2cStop
 12197 ;;		_shiftIn
 12198 ;;		_shiftInCRC
 12199 ;;		_sendCommandSHT
 12200 ;;		_i2cReadByte
 12201 ;;		_i2cNack
 12202 ;;		_i2cStart
 12203 ;;		_skipCrcSHT
 12204 ;; This function uses a non-reentrant model
 12205 ;;
 12206                           
 12207                           	psect	text29
 12208  003A18                     __ptext29:
 12209                           	opt stack 0
 12210  003A18                     _i2cLowScl:
 12211                           	opt stack 22
 12212                           
 12213                           ;soft_i2c.c: 97: PORTAbits.RA3 = 0;
 12214                           
 12215                           ;incstack = 0
 12216  003A18  9680               	bcf	3968,3,c	;volatile
 12217                           
 12218                           ;soft_i2c.c: 98: TRISAbits.TRISA3 = 0;
 12219  003A1A  9692               	bcf	3986,3,c	;volatile
 12220                           
 12221                           ;soft_i2c.c: 99: _delay((unsigned long)((5)*(16000000/4000000.0)));
 12222  003A1C  0E06               	movlw	6
 12223  003A1E                     u26397:
 12224  003A1E  2EE8               	decfsz	wreg,f,c
 12225  003A20  D7FE               	bra	u26397
 12226  003A22  D000               	nop2	
 12227  003A24  0012               	return		;funcret
 12228  003A26                     __end_of_i2cLowScl:
 12229                           	opt stack 0
 12230                           tblptru	equ	0xFF8
 12231                           tblptrh	equ	0xFF7
 12232                           tblptrl	equ	0xFF6
 12233                           tablat	equ	0xFF5
 12234                           prodh	equ	0xFF4
 12235                           prodl	equ	0xFF3
 12236                           postinc0	equ	0xFEE
 12237                           wreg	equ	0xFE8
 12238                           indf1	equ	0xFE7
 12239                           postdec1	equ	0xFE5
 12240                           fsr1h	equ	0xFE2
 12241                           fsr1l	equ	0xFE1
 12242                           indf2	equ	0xFDF
 12243                           postinc2	equ	0xFDE
 12244                           postdec2	equ	0xFDD
 12245                           fsr2h	equ	0xFDA
 12246                           fsr2l	equ	0xFD9
 12247                           status	equ	0xFD8
 12248                           
 12249 ;; *************** function _i2cHighSda *****************
 12250 ;; Defined at:
 12251 ;;		line 76 in file "../src/soft_i2c.c"
 12252 ;; Parameters:    Size  Location     Type
 12253 ;;		None
 12254 ;; Auto vars:     Size  Location     Type
 12255 ;;		None
 12256 ;; Return value:  Size  Location     Type
 12257 ;;                  1    wreg      void 
 12258 ;; Registers used:
 12259 ;;		wreg
 12260 ;; Tracked objects:
 12261 ;;		On entry : 0/0
 12262 ;;		On exit  : 0/0
 12263 ;;		Unchanged: 0/0
 12264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12269 ;;Total ram usage:        0 bytes
 12270 ;; Hardware stack levels used:    1
 12271 ;; Hardware stack levels required when called:    4
 12272 ;; This function calls:
 12273 ;;		Nothing
 12274 ;; This function is called by:
 12275 ;;		_i2cWriteByte
 12276 ;;		_i2cAck
 12277 ;;		_i2cStop
 12278 ;;		_sendCommandSHT
 12279 ;;		_waitForResultSHT
 12280 ;;		_getData16SHT
 12281 ;;		_i2cReadByte
 12282 ;;		_i2cStart
 12283 ;;		_skipCrcSHT
 12284 ;; This function uses a non-reentrant model
 12285 ;;
 12286                           
 12287                           	psect	text30
 12288  003A26                     __ptext30:
 12289                           	opt stack 0
 12290  003A26                     _i2cHighSda:
 12291                           	opt stack 23
 12292                           
 12293                           ;soft_i2c.c: 78: TRISAbits.TRISA2 = 1;
 12294                           
 12295                           ;incstack = 0
 12296  003A26  8492               	bsf	3986,2,c	;volatile
 12297                           
 12298                           ;soft_i2c.c: 79: _delay((unsigned long)((5)*(16000000/4000000.0)));
 12299  003A28  0E06               	movlw	6
 12300  003A2A                     u26407:
 12301  003A2A  2EE8               	decfsz	wreg,f,c
 12302  003A2C  D7FE               	bra	u26407
 12303  003A2E  D000               	nop2	
 12304  003A30  0012               	return		;funcret
 12305  003A32                     __end_of_i2cHighSda:
 12306                           	opt stack 0
 12307                           tblptru	equ	0xFF8
 12308                           tblptrh	equ	0xFF7
 12309                           tblptrl	equ	0xFF6
 12310                           tablat	equ	0xFF5
 12311                           prodh	equ	0xFF4
 12312                           prodl	equ	0xFF3
 12313                           postinc0	equ	0xFEE
 12314                           wreg	equ	0xFE8
 12315                           indf1	equ	0xFE7
 12316                           postdec1	equ	0xFE5
 12317                           fsr1h	equ	0xFE2
 12318                           fsr1l	equ	0xFE1
 12319                           indf2	equ	0xFDF
 12320                           postinc2	equ	0xFDE
 12321                           postdec2	equ	0xFDD
 12322                           fsr2h	equ	0xFDA
 12323                           fsr2l	equ	0xFD9
 12324                           status	equ	0xFD8
 12325                           
 12326 ;; *************** function _i2cHighScl *****************
 12327 ;; Defined at:
 12328 ;;		line 89 in file "../src/soft_i2c.c"
 12329 ;; Parameters:    Size  Location     Type
 12330 ;;		None
 12331 ;; Auto vars:     Size  Location     Type
 12332 ;;		None
 12333 ;; Return value:  Size  Location     Type
 12334 ;;                  1    wreg      void 
 12335 ;; Registers used:
 12336 ;;		wreg
 12337 ;; Tracked objects:
 12338 ;;		On entry : 0/0
 12339 ;;		On exit  : 0/0
 12340 ;;		Unchanged: 0/0
 12341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12346 ;;Total ram usage:        0 bytes
 12347 ;; Hardware stack levels used:    1
 12348 ;; Hardware stack levels required when called:    4
 12349 ;; This function calls:
 12350 ;;		Nothing
 12351 ;; This function is called by:
 12352 ;;		_i2cWriteByte
 12353 ;;		_i2cAck
 12354 ;;		_i2cStop
 12355 ;;		_shiftIn
 12356 ;;		_shiftInCRC
 12357 ;;		_sendCommandSHT
 12358 ;;		_i2cReadByte
 12359 ;;		_i2cNack
 12360 ;;		_i2cStart
 12361 ;;		_skipCrcSHT
 12362 ;; This function uses a non-reentrant model
 12363 ;;
 12364                           
 12365                           	psect	text31
 12366  003A32                     __ptext31:
 12367                           	opt stack 0
 12368  003A32                     _i2cHighScl:
 12369                           	opt stack 22
 12370                           
 12371                           ;soft_i2c.c: 91: TRISAbits.TRISA3 = 1;
 12372                           
 12373                           ;incstack = 0
 12374  003A32  8692               	bsf	3986,3,c	;volatile
 12375                           
 12376                           ;soft_i2c.c: 92: _delay((unsigned long)((5)*(16000000/4000000.0)));
 12377  003A34  0E06               	movlw	6
 12378  003A36                     u26417:
 12379  003A36  2EE8               	decfsz	wreg,f,c
 12380  003A38  D7FE               	bra	u26417
 12381  003A3A  D000               	nop2	
 12382  003A3C  0012               	return		;funcret
 12383  003A3E                     __end_of_i2cHighScl:
 12384                           	opt stack 0
 12385                           tblptru	equ	0xFF8
 12386                           tblptrh	equ	0xFF7
 12387                           tblptrl	equ	0xFF6
 12388                           tablat	equ	0xFF5
 12389                           prodh	equ	0xFF4
 12390                           prodl	equ	0xFF3
 12391                           postinc0	equ	0xFEE
 12392                           wreg	equ	0xFE8
 12393                           indf1	equ	0xFE7
 12394                           postdec1	equ	0xFE5
 12395                           fsr1h	equ	0xFE2
 12396                           fsr1l	equ	0xFE1
 12397                           indf2	equ	0xFDF
 12398                           postinc2	equ	0xFDE
 12399                           postdec2	equ	0xFDD
 12400                           fsr2h	equ	0xFDA
 12401                           fsr2l	equ	0xFD9
 12402                           status	equ	0xFD8
 12403                           
 12404 ;; *************** function ___awtoft *****************
 12405 ;; Defined at:
 12406 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 12407 ;; Parameters:    Size  Location     Type
 12408 ;;  c               2    8[BANK0 ] int 
 12409 ;; Auto vars:     Size  Location     Type
 12410 ;;  sign            1   11[BANK0 ] unsigned char 
 12411 ;; Return value:  Size  Location     Type
 12412 ;;                  3    8[BANK0 ] float 
 12413 ;; Registers used:
 12414 ;;		wreg, status,2, status,0, cstack
 12415 ;; Tracked objects:
 12416 ;;		On entry : 0/0
 12417 ;;		On exit  : 0/0
 12418 ;;		Unchanged: 0/0
 12419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12420 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12423 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12424 ;;Total ram usage:        4 bytes
 12425 ;; Hardware stack levels used:    1
 12426 ;; Hardware stack levels required when called:    5
 12427 ;; This function calls:
 12428 ;;		___ftpack
 12429 ;; This function is called by:
 12430 ;;		_readTemperatureC
 12431 ;;		_readHumidity
 12432 ;;		_readTemperatureRaw
 12433 ;;		_readTemperatureF
 12434 ;; This function uses a non-reentrant model
 12435 ;;
 12436                           
 12437                           	psect	text32
 12438  00388C                     __ptext32:
 12439                           	opt stack 0
 12440  00388C                     ___awtoft:
 12441                           	opt stack 23
 12442                           
 12443                           ;incstack = 0
 12444  00388C  0E00               	movlw	0
 12445  00388E  0100               	movlb	0	; () banked
 12446  003890  6F6B               	movwf	___awtoft@sign& (0+255),b
 12447                           
 12448                           ; BSR set to: 0
 12449  003892  AF69               	btfss	(___awtoft@c+1)& (0+255),7,b
 12450  003894  D006               	goto	l2792
 12451                           
 12452                           ; BSR set to: 0
 12453  003896  6D68               	negf	___awtoft@c& (0+255),b
 12454  003898  1F69               	comf	(___awtoft@c+1)& (0+255),f,b
 12455  00389A  B0D8               	btfsc	status,0,c
 12456  00389C  2B69               	incf	(___awtoft@c+1)& (0+255),f,b
 12457                           
 12458                           ; BSR set to: 0
 12459  00389E  0E01               	movlw	1
 12460  0038A0  6F6B               	movwf	___awtoft@sign& (0+255),b
 12461  0038A2                     l2792:
 12462                           
 12463                           ; BSR set to: 0
 12464                           
 12465                           ; BSR set to: 0
 12466  0038A2  C068  F060         	movff	___awtoft@c,___ftpack@arg
 12467  0038A6  C069  F061         	movff	___awtoft@c+1,___ftpack@arg+1
 12468  0038AA  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
 12469  0038AC  0E8E               	movlw	142
 12470  0038AE  6F63               	movwf	___ftpack@exp& (0+255),b
 12471  0038B0  C06B  F064         	movff	___awtoft@sign,___ftpack@sign
 12472  0038B4  ECFF  F016         	call	___ftpack	;wreg free
 12473  0038B8  C060  F068         	movff	?___ftpack,?___awtoft
 12474  0038BC  C061  F069         	movff	?___ftpack+1,?___awtoft+1
 12475  0038C0  C062  F06A         	movff	?___ftpack+2,?___awtoft+2
 12476  0038C4  0012               	return	
 12477  0038C6                     __end_of___awtoft:
 12478                           	opt stack 0
 12479                           tblptru	equ	0xFF8
 12480                           tblptrh	equ	0xFF7
 12481                           tblptrl	equ	0xFF6
 12482                           tablat	equ	0xFF5
 12483                           prodh	equ	0xFF4
 12484                           prodl	equ	0xFF3
 12485                           postinc0	equ	0xFEE
 12486                           wreg	equ	0xFE8
 12487                           indf1	equ	0xFE7
 12488                           postdec1	equ	0xFE5
 12489                           fsr1h	equ	0xFE2
 12490                           fsr1l	equ	0xFE1
 12491                           indf2	equ	0xFDF
 12492                           postinc2	equ	0xFDE
 12493                           postdec2	equ	0xFDD
 12494                           fsr2h	equ	0xFDA
 12495                           fsr2l	equ	0xFD9
 12496                           status	equ	0xFD8
 12497                           
 12498 ;; *************** function ___fttol *****************
 12499 ;; Defined at:
 12500 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 12501 ;; Parameters:    Size  Location     Type
 12502 ;;  f1              3   34[BANK0 ] float 
 12503 ;; Auto vars:     Size  Location     Type
 12504 ;;  lval            4   44[BANK0 ] unsigned long 
 12505 ;;  exp1            1   48[BANK0 ] unsigned char 
 12506 ;;  sign1           1   43[BANK0 ] unsigned char 
 12507 ;; Return value:  Size  Location     Type
 12508 ;;                  4   34[BANK0 ] long 
 12509 ;; Registers used:
 12510 ;;		wreg, status,2, status,0
 12511 ;; Tracked objects:
 12512 ;;		On entry : 0/0
 12513 ;;		On exit  : 0/0
 12514 ;;		Unchanged: 0/0
 12515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12516 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12517 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12518 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12519 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12520 ;;Total ram usage:       15 bytes
 12521 ;; Hardware stack levels used:    1
 12522 ;; Hardware stack levels required when called:    4
 12523 ;; This function calls:
 12524 ;;		Nothing
 12525 ;; This function is called by:
 12526 ;;		_readTemperatureC
 12527 ;;		_sprintf
 12528 ;;		_TempDemo
 12529 ;;		_ReadTempSensor
 12530 ;;		_readTemperatureF
 12531 ;; This function uses a non-reentrant model
 12532 ;;
 12533                           
 12534                           	psect	text33
 12535  002A76                     __ptext33:
 12536                           	opt stack 0
 12537  002A76                     ___fttol:
 12538                           	opt stack 25
 12539                           
 12540                           ;incstack = 0
 12541  002A76  C084  F086         	movff	___fttol@f1+2,??___fttol
 12542  002A7A  0100               	movlb	0	; () banked
 12543  002A7C  6B87               	clrf	(??___fttol+1)& (0+255),b
 12544  002A7E  6B88               	clrf	(??___fttol+2)& (0+255),b
 12545  002A80  3583               	rlcf	(___fttol@f1+1)& (0+255),w,b
 12546  002A82  3786               	rlcf	??___fttol& (0+255),f,b
 12547  002A84  E301               	bnc	u15061
 12548  002A86  8187               	bsf	(??___fttol+1)& (0+255),0,b
 12549  002A88                     u15061:
 12550  002A88  5186               	movf	??___fttol& (0+255),w,b
 12551  002A8A  6F90               	movwf	___fttol@exp1& (0+255),b
 12552  002A8C  5190               	movf	___fttol@exp1& (0+255),w,b
 12553  002A8E  A4D8               	btfss	status,2,c
 12554  002A90  D009               	goto	l2945
 12555                           
 12556                           ; BSR set to: 0
 12557  002A92  0E00               	movlw	0
 12558  002A94  6F82               	movwf	?___fttol& (0+255),b
 12559  002A96  0E00               	movlw	0
 12560  002A98  6F83               	movwf	(?___fttol+1)& (0+255),b
 12561  002A9A  0E00               	movlw	0
 12562  002A9C  6F84               	movwf	(?___fttol+2)& (0+255),b
 12563  002A9E  0E00               	movlw	0
 12564  002AA0  6F85               	movwf	(?___fttol+3)& (0+255),b
 12565                           
 12566                           ; BSR set to: 0
 12567  002AA2  0012               	return	
 12568  002AA4                     l2945:
 12569                           
 12570                           ; BSR set to: 0
 12571                           
 12572                           ; BSR set to: 0
 12573  002AA4  0E17               	movlw	23
 12574  002AA6  6F86               	movwf	??___fttol& (0+255),b
 12575  002AA8  C082  F087         	movff	___fttol@f1,??___fttol+1
 12576  002AAC  C083  F088         	movff	___fttol@f1+1,??___fttol+2
 12577  002AB0  C084  F089         	movff	___fttol@f1+2,??___fttol+3
 12578  002AB4  2986               	incf	??___fttol& (0+255),w,b
 12579  002AB6  6F8A               	movwf	(??___fttol+4)& (0+255),b
 12580  002AB8  D004               	goto	u15080
 12581  002ABA                     u15085:
 12582  002ABA  90D8               	bcf	status,0,c
 12583  002ABC  3389               	rrcf	(??___fttol+3)& (0+255),f,b
 12584  002ABE  3388               	rrcf	(??___fttol+2)& (0+255),f,b
 12585  002AC0  3387               	rrcf	(??___fttol+1)& (0+255),f,b
 12586  002AC2                     u15080:
 12587  002AC2  2F8A               	decfsz	(??___fttol+4)& (0+255),f,b
 12588  002AC4  D7FA               	goto	u15085
 12589  002AC6  0100               	movlb	0	; () banked
 12590  002AC8  5187               	movf	(??___fttol+1)& (0+255),w,b
 12591  002ACA  6F8B               	movwf	___fttol@sign1& (0+255),b
 12592                           
 12593                           ; BSR set to: 0
 12594  002ACC  8F83               	bsf	(___fttol@f1+1)& (0+255),7,b
 12595                           
 12596                           ; BSR set to: 0
 12597  002ACE  0EFF               	movlw	255
 12598  002AD0  1782               	andwf	___fttol@f1& (0+255),f,b
 12599  002AD2  0EFF               	movlw	255
 12600  002AD4  1783               	andwf	(___fttol@f1+1)& (0+255),f,b
 12601  002AD6  0E00               	movlw	0
 12602  002AD8  1784               	andwf	(___fttol@f1+2)& (0+255),f,b
 12603                           
 12604                           ; BSR set to: 0
 12605  002ADA  5182               	movf	___fttol@f1& (0+255),w,b
 12606  002ADC  6F8C               	movwf	___fttol@lval& (0+255),b
 12607  002ADE  5183               	movf	(___fttol@f1+1)& (0+255),w,b
 12608  002AE0  6F8D               	movwf	(___fttol@lval+1)& (0+255),b
 12609  002AE2  5184               	movf	(___fttol@f1+2)& (0+255),w,b
 12610  002AE4  6F8E               	movwf	(___fttol@lval+2)& (0+255),b
 12611  002AE6  6B8F               	clrf	(___fttol@lval+3)& (0+255),b
 12612                           
 12613                           ; BSR set to: 0
 12614  002AE8  0E8E               	movlw	142
 12615  002AEA  5F90               	subwf	___fttol@exp1& (0+255),f,b
 12616                           
 12617                           ; BSR set to: 0
 12618  002AEC  AF90               	btfss	___fttol@exp1& (0+255),7,b
 12619  002AEE  D016               	goto	l2947
 12620                           
 12621                           ; BSR set to: 0
 12622  002AF0  5190               	movf	___fttol@exp1& (0+255),w,b
 12623  002AF2  0A80               	xorlw	128
 12624  002AF4  0F8F               	addlw	143
 12625  002AF6  B0D8               	btfsc	status,0,c
 12626  002AF8  D009               	goto	l2948
 12627                           
 12628                           ; BSR set to: 0
 12629  002AFA  0E00               	movlw	0
 12630  002AFC  6F82               	movwf	?___fttol& (0+255),b
 12631  002AFE  0E00               	movlw	0
 12632  002B00  6F83               	movwf	(?___fttol+1)& (0+255),b
 12633  002B02  0E00               	movlw	0
 12634  002B04  6F84               	movwf	(?___fttol+2)& (0+255),b
 12635  002B06  0E00               	movlw	0
 12636  002B08  6F85               	movwf	(?___fttol+3)& (0+255),b
 12637                           
 12638                           ; BSR set to: 0
 12639  002B0A  0012               	return	
 12640  002B0C                     l2948:
 12641                           
 12642                           ; BSR set to: 0
 12643                           
 12644                           ; BSR set to: 0
 12645                           
 12646                           ; BSR set to: 0
 12647  002B0C  90D8               	bcf	status,0,c
 12648  002B0E  338F               	rrcf	(___fttol@lval+3)& (0+255),f,b
 12649  002B10  338E               	rrcf	(___fttol@lval+2)& (0+255),f,b
 12650  002B12  338D               	rrcf	(___fttol@lval+1)& (0+255),f,b
 12651  002B14  338C               	rrcf	___fttol@lval& (0+255),f,b
 12652                           
 12653                           ; BSR set to: 0
 12654  002B16  3F90               	incfsz	___fttol@exp1& (0+255),f,b
 12655  002B18  D7F9               	goto	l2948
 12656                           
 12657                           ; BSR set to: 0
 12658  002B1A  D015               	goto	u15120
 12659  002B1C                     l2947:
 12660                           
 12661                           ; BSR set to: 0
 12662                           
 12663                           ; BSR set to: 0
 12664  002B1C  0E17               	movlw	23
 12665  002B1E  6590               	cpfsgt	___fttol@exp1& (0+255),b
 12666  002B20  D00F               	goto	l2953
 12667                           
 12668                           ; BSR set to: 0
 12669  002B22  0E00               	movlw	0
 12670  002B24  6F82               	movwf	?___fttol& (0+255),b
 12671  002B26  0E00               	movlw	0
 12672  002B28  6F83               	movwf	(?___fttol+1)& (0+255),b
 12673  002B2A  0E00               	movlw	0
 12674  002B2C  6F84               	movwf	(?___fttol+2)& (0+255),b
 12675  002B2E  0E00               	movlw	0
 12676  002B30  6F85               	movwf	(?___fttol+3)& (0+255),b
 12677                           
 12678                           ; BSR set to: 0
 12679  002B32  0012               	return	
 12680  002B34                     
 12681                           ; BSR set to: 0
 12682                           
 12683                           ; BSR set to: 0
 12684  002B34  90D8               	bcf	status,0,c
 12685  002B36  378C               	rlcf	___fttol@lval& (0+255),f,b
 12686  002B38  378D               	rlcf	(___fttol@lval+1)& (0+255),f,b
 12687  002B3A  378E               	rlcf	(___fttol@lval+2)& (0+255),f,b
 12688  002B3C  378F               	rlcf	(___fttol@lval+3)& (0+255),f,b
 12689  002B3E  0790               	decf	___fttol@exp1& (0+255),f,b
 12690  002B40                     l2953:
 12691                           
 12692                           ; BSR set to: 0
 12693                           
 12694                           ; BSR set to: 0
 12695  002B40  5190               	movf	___fttol@exp1& (0+255),w,b
 12696  002B42  A4D8               	btfss	status,2,c
 12697  002B44  D7F7               	goto	l2954
 12698  002B46                     u15120:
 12699                           
 12700                           ; BSR set to: 0
 12701                           
 12702                           ; BSR set to: 0
 12703                           
 12704                           ; BSR set to: 0
 12705  002B46  518B               	movf	___fttol@sign1& (0+255),w,b
 12706  002B48  B4D8               	btfsc	status,2,c
 12707  002B4A  D008               	goto	l2956
 12708                           
 12709                           ; BSR set to: 0
 12710  002B4C  1F8F               	comf	(___fttol@lval+3)& (0+255),f,b
 12711  002B4E  1F8E               	comf	(___fttol@lval+2)& (0+255),f,b
 12712  002B50  1F8D               	comf	(___fttol@lval+1)& (0+255),f,b
 12713  002B52  6D8C               	negf	___fttol@lval& (0+255),b
 12714  002B54  0E00               	movlw	0
 12715  002B56  238D               	addwfc	(___fttol@lval+1)& (0+255),f,b
 12716  002B58  238E               	addwfc	(___fttol@lval+2)& (0+255),f,b
 12717  002B5A  238F               	addwfc	(___fttol@lval+3)& (0+255),f,b
 12718  002B5C                     l2956:
 12719                           
 12720                           ; BSR set to: 0
 12721                           
 12722                           ; BSR set to: 0
 12723  002B5C  C08C  F082         	movff	___fttol@lval,?___fttol
 12724  002B60  C08D  F083         	movff	___fttol@lval+1,?___fttol+1
 12725  002B64  C08E  F084         	movff	___fttol@lval+2,?___fttol+2
 12726  002B68  C08F  F085         	movff	___fttol@lval+3,?___fttol+3
 12727  002B6C  0012               	return	
 12728  002B6E                     __end_of___fttol:
 12729                           	opt stack 0
 12730                           tblptru	equ	0xFF8
 12731                           tblptrh	equ	0xFF7
 12732                           tblptrl	equ	0xFF6
 12733                           tablat	equ	0xFF5
 12734                           prodh	equ	0xFF4
 12735                           prodl	equ	0xFF3
 12736                           postinc0	equ	0xFEE
 12737                           wreg	equ	0xFE8
 12738                           indf1	equ	0xFE7
 12739                           postdec1	equ	0xFE5
 12740                           fsr1h	equ	0xFE2
 12741                           fsr1l	equ	0xFE1
 12742                           indf2	equ	0xFDF
 12743                           postinc2	equ	0xFDE
 12744                           postdec2	equ	0xFDD
 12745                           fsr2h	equ	0xFDA
 12746                           fsr2l	equ	0xFD9
 12747                           status	equ	0xFD8
 12748                           
 12749 ;; *************** function ___ftmul *****************
 12750 ;; Defined at:
 12751 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 12752 ;; Parameters:    Size  Location     Type
 12753 ;;  f1              3   61[BANK0 ] float 
 12754 ;;  f2              3   64[BANK0 ] float 
 12755 ;; Auto vars:     Size  Location     Type
 12756 ;;  f3_as_produc    3   71[BANK0 ] unsigned um
 12757 ;;  sign            1   75[BANK0 ] unsigned char 
 12758 ;;  cntr            1   74[BANK0 ] unsigned char 
 12759 ;;  exp             1   70[BANK0 ] unsigned char 
 12760 ;; Return value:  Size  Location     Type
 12761 ;;                  3   61[BANK0 ] float 
 12762 ;; Registers used:
 12763 ;;		wreg, status,2, status,0, cstack
 12764 ;; Tracked objects:
 12765 ;;		On entry : 0/0
 12766 ;;		On exit  : 0/0
 12767 ;;		Unchanged: 0/0
 12768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12769 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12770 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12771 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12772 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12773 ;;Total ram usage:       15 bytes
 12774 ;; Hardware stack levels used:    1
 12775 ;; Hardware stack levels required when called:    5
 12776 ;; This function calls:
 12777 ;;		___ftpack
 12778 ;; This function is called by:
 12779 ;;		_readTemperatureC
 12780 ;;		_readHumidity
 12781 ;;		_fround
 12782 ;;		_scale
 12783 ;;		_sprintf
 12784 ;;		_ReadTempSensor
 12785 ;;		_readTemperatureF
 12786 ;; This function uses a non-reentrant model
 12787 ;;
 12788                           
 12789                           	psect	text34
 12790  002B6E                     __ptext34:
 12791                           	opt stack 0
 12792  002B6E                     ___ftmul:
 12793                           	opt stack 23
 12794                           
 12795                           ; BSR set to: 0
 12796                           ;incstack = 0
 12797  002B6E  C09F  F0A3         	movff	___ftmul@f1+2,??___ftmul
 12798  002B72  0100               	movlb	0	; () banked
 12799  002B74  6BA4               	clrf	(??___ftmul+1)& (0+255),b
 12800  002B76  6BA5               	clrf	(??___ftmul+2)& (0+255),b
 12801  002B78  359E               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 12802  002B7A  37A3               	rlcf	??___ftmul& (0+255),f,b
 12803  002B7C  E301               	bnc	u21951
 12804  002B7E  81A4               	bsf	(??___ftmul+1)& (0+255),0,b
 12805  002B80                     u21951:
 12806  002B80  51A3               	movf	??___ftmul& (0+255),w,b
 12807  002B82  6FA6               	movwf	___ftmul@exp& (0+255),b
 12808  002B84  51A6               	movf	___ftmul@exp& (0+255),w,b
 12809  002B86  A4D8               	btfss	status,2,c
 12810  002B88  D007               	goto	l2924
 12811                           
 12812                           ; BSR set to: 0
 12813  002B8A  0E00               	movlw	0
 12814  002B8C  6F9D               	movwf	?___ftmul& (0+255),b
 12815  002B8E  0E00               	movlw	0
 12816  002B90  6F9E               	movwf	(?___ftmul+1)& (0+255),b
 12817  002B92  0E00               	movlw	0
 12818  002B94  6F9F               	movwf	(?___ftmul+2)& (0+255),b
 12819                           
 12820                           ; BSR set to: 0
 12821  002B96  0012               	return	
 12822  002B98                     l2924:
 12823                           
 12824                           ; BSR set to: 0
 12825                           
 12826                           ; BSR set to: 0
 12827  002B98  C0A2  F0A3         	movff	___ftmul@f2+2,??___ftmul
 12828  002B9C  6BA4               	clrf	(??___ftmul+1)& (0+255),b
 12829  002B9E  6BA5               	clrf	(??___ftmul+2)& (0+255),b
 12830  002BA0  35A1               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 12831  002BA2  37A3               	rlcf	??___ftmul& (0+255),f,b
 12832  002BA4  E301               	bnc	u21971
 12833  002BA6  81A4               	bsf	(??___ftmul+1)& (0+255),0,b
 12834  002BA8                     u21971:
 12835  002BA8  51A3               	movf	??___ftmul& (0+255),w,b
 12836  002BAA  6FAB               	movwf	___ftmul@sign& (0+255),b
 12837  002BAC  51AB               	movf	___ftmul@sign& (0+255),w,b
 12838  002BAE  A4D8               	btfss	status,2,c
 12839  002BB0  D007               	goto	l2926
 12840                           
 12841                           ; BSR set to: 0
 12842  002BB2  0E00               	movlw	0
 12843  002BB4  6F9D               	movwf	?___ftmul& (0+255),b
 12844  002BB6  0E00               	movlw	0
 12845  002BB8  6F9E               	movwf	(?___ftmul+1)& (0+255),b
 12846  002BBA  0E00               	movlw	0
 12847  002BBC  6F9F               	movwf	(?___ftmul+2)& (0+255),b
 12848                           
 12849                           ; BSR set to: 0
 12850  002BBE  0012               	return	
 12851  002BC0                     l2926:
 12852                           
 12853                           ; BSR set to: 0
 12854                           
 12855                           ; BSR set to: 0
 12856  002BC0  51AB               	movf	___ftmul@sign& (0+255),w,b
 12857  002BC2  0F7B               	addlw	123
 12858  002BC4  27A6               	addwf	___ftmul@exp& (0+255),f,b
 12859                           
 12860                           ; BSR set to: 0
 12861  002BC6  C09F  F0AB         	movff	___ftmul@f1+2,___ftmul@sign
 12862  002BCA  51A2               	movf	(___ftmul@f2+2)& (0+255),w,b
 12863  002BCC  1BAB               	xorwf	___ftmul@sign& (0+255),f,b
 12864  002BCE  0E80               	movlw	128
 12865  002BD0  17AB               	andwf	___ftmul@sign& (0+255),f,b
 12866                           
 12867                           ; BSR set to: 0
 12868  002BD2  8F9E               	bsf	(___ftmul@f1+1)& (0+255),7,b
 12869                           
 12870                           ; BSR set to: 0
 12871  002BD4  8FA1               	bsf	(___ftmul@f2+1)& (0+255),7,b
 12872                           
 12873                           ; BSR set to: 0
 12874  002BD6  0EFF               	movlw	255
 12875  002BD8  17A0               	andwf	___ftmul@f2& (0+255),f,b
 12876  002BDA  0EFF               	movlw	255
 12877  002BDC  17A1               	andwf	(___ftmul@f2+1)& (0+255),f,b
 12878  002BDE  0E00               	movlw	0
 12879  002BE0  17A2               	andwf	(___ftmul@f2+2)& (0+255),f,b
 12880                           
 12881                           ; BSR set to: 0
 12882  002BE2  0E00               	movlw	0
 12883  002BE4  6FA7               	movwf	___ftmul@f3_as_product& (0+255),b
 12884  002BE6  0E00               	movlw	0
 12885  002BE8  6FA8               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 12886  002BEA  0E00               	movlw	0
 12887  002BEC  6FA9               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 12888                           
 12889                           ; BSR set to: 0
 12890  002BEE  0E07               	movlw	7
 12891  002BF0  6FAA               	movwf	___ftmul@cntr& (0+255),b
 12892  002BF2                     
 12893                           ; BSR set to: 0
 12894                           
 12895                           ; BSR set to: 0
 12896  002BF2  A19D               	btfss	___ftmul@f1& (0+255),0,b
 12897  002BF4  D006               	goto	l2928
 12898                           
 12899                           ; BSR set to: 0
 12900  002BF6  51A0               	movf	___ftmul@f2& (0+255),w,b
 12901  002BF8  27A7               	addwf	___ftmul@f3_as_product& (0+255),f,b
 12902  002BFA  51A1               	movf	(___ftmul@f2+1)& (0+255),w,b
 12903  002BFC  23A8               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 12904  002BFE  51A2               	movf	(___ftmul@f2+2)& (0+255),w,b
 12905  002C00  23A9               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 12906  002C02                     l2928:
 12907                           
 12908                           ; BSR set to: 0
 12909                           
 12910                           ; BSR set to: 0
 12911  002C02  90D8               	bcf	status,0,c
 12912  002C04  339F               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 12913  002C06  339E               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 12914  002C08  339D               	rrcf	___ftmul@f1& (0+255),f,b
 12915  002C0A  90D8               	bcf	status,0,c
 12916  002C0C  37A0               	rlcf	___ftmul@f2& (0+255),f,b
 12917  002C0E  37A1               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 12918  002C10  37A2               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 12919                           
 12920                           ; BSR set to: 0
 12921  002C12  2FAA               	decfsz	___ftmul@cntr& (0+255),f,b
 12922  002C14  D7EE               	goto	l2927
 12923                           
 12924                           ; BSR set to: 0
 12925                           
 12926                           ; BSR set to: 0
 12927  002C16  0E09               	movlw	9
 12928  002C18  6FAA               	movwf	___ftmul@cntr& (0+255),b
 12929  002C1A                     
 12930                           ; BSR set to: 0
 12931                           
 12932                           ; BSR set to: 0
 12933  002C1A  A19D               	btfss	___ftmul@f1& (0+255),0,b
 12934  002C1C  D006               	goto	l2931
 12935                           
 12936                           ; BSR set to: 0
 12937  002C1E  51A0               	movf	___ftmul@f2& (0+255),w,b
 12938  002C20  27A7               	addwf	___ftmul@f3_as_product& (0+255),f,b
 12939  002C22  51A1               	movf	(___ftmul@f2+1)& (0+255),w,b
 12940  002C24  23A8               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 12941  002C26  51A2               	movf	(___ftmul@f2+2)& (0+255),w,b
 12942  002C28  23A9               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 12943  002C2A                     l2931:
 12944                           
 12945                           ; BSR set to: 0
 12946                           
 12947                           ; BSR set to: 0
 12948  002C2A  90D8               	bcf	status,0,c
 12949  002C2C  339F               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 12950  002C2E  339E               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 12951  002C30  339D               	rrcf	___ftmul@f1& (0+255),f,b
 12952  002C32  90D8               	bcf	status,0,c
 12953  002C34  33A9               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 12954  002C36  33A8               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 12955  002C38  33A7               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 12956                           
 12957                           ; BSR set to: 0
 12958  002C3A  2FAA               	decfsz	___ftmul@cntr& (0+255),f,b
 12959  002C3C  D7EE               	goto	l2930
 12960                           
 12961                           ; BSR set to: 0
 12962                           
 12963                           ; BSR set to: 0
 12964  002C3E  C0A7  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
 12965  002C42  C0A8  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 12966  002C46  C0A9  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 12967  002C4A  C0A6  F063         	movff	___ftmul@exp,___ftpack@exp
 12968  002C4E  C0AB  F064         	movff	___ftmul@sign,___ftpack@sign
 12969  002C52  ECFF  F016         	call	___ftpack	;wreg free
 12970  002C56  C060  F09D         	movff	?___ftpack,?___ftmul
 12971  002C5A  C061  F09E         	movff	?___ftpack+1,?___ftmul+1
 12972  002C5E  C062  F09F         	movff	?___ftpack+2,?___ftmul+2
 12973  002C62  0012               	return	
 12974  002C64                     __end_of___ftmul:
 12975                           	opt stack 0
 12976                           tblptru	equ	0xFF8
 12977                           tblptrh	equ	0xFF7
 12978                           tblptrl	equ	0xFF6
 12979                           tablat	equ	0xFF5
 12980                           prodh	equ	0xFF4
 12981                           prodl	equ	0xFF3
 12982                           postinc0	equ	0xFEE
 12983                           wreg	equ	0xFE8
 12984                           indf1	equ	0xFE7
 12985                           postdec1	equ	0xFE5
 12986                           fsr1h	equ	0xFE2
 12987                           fsr1l	equ	0xFE1
 12988                           indf2	equ	0xFDF
 12989                           postinc2	equ	0xFDE
 12990                           postdec2	equ	0xFDD
 12991                           fsr2h	equ	0xFDA
 12992                           fsr2l	equ	0xFD9
 12993                           status	equ	0xFD8
 12994                           
 12995 ;; *************** function ___ftadd *****************
 12996 ;; Defined at:
 12997 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 12998 ;; Parameters:    Size  Location     Type
 12999 ;;  f1              3   86[BANK0 ] float 
 13000 ;;  f2              3   89[BANK0 ] float 
 13001 ;; Auto vars:     Size  Location     Type
 13002 ;;  exp1            1   97[BANK0 ] unsigned char 
 13003 ;;  exp2            1   96[BANK0 ] unsigned char 
 13004 ;;  sign            1   95[BANK0 ] unsigned char 
 13005 ;; Return value:  Size  Location     Type
 13006 ;;                  3   86[BANK0 ] float 
 13007 ;; Registers used:
 13008 ;;		wreg, status,2, status,0, cstack
 13009 ;; Tracked objects:
 13010 ;;		On entry : 0/0
 13011 ;;		On exit  : 0/0
 13012 ;;		Unchanged: 0/0
 13013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13014 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13015 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13016 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13017 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13018 ;;Total ram usage:       12 bytes
 13019 ;; Hardware stack levels used:    1
 13020 ;; Hardware stack levels required when called:    5
 13021 ;; This function calls:
 13022 ;;		___ftpack
 13023 ;; This function is called by:
 13024 ;;		_readTemperatureC
 13025 ;;		_readHumidity
 13026 ;;		_sprintf
 13027 ;;		___ftsub
 13028 ;;		_ReadTempSensor
 13029 ;;		_readTemperatureF
 13030 ;; This function uses a non-reentrant model
 13031 ;;
 13032                           
 13033                           	psect	text35
 13034  00256A                     __ptext35:
 13035                           	opt stack 0
 13036  00256A                     ___ftadd:
 13037                           	opt stack 23
 13038                           
 13039                           ;incstack = 0
 13040  00256A  C0B8  F0BC         	movff	___ftadd@f1+2,??___ftadd
 13041  00256E  0100               	movlb	0	; () banked
 13042  002570  6BBD               	clrf	(??___ftadd+1)& (0+255),b
 13043  002572  6BBE               	clrf	(??___ftadd+2)& (0+255),b
 13044  002574  35B7               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 13045  002576  37BC               	rlcf	??___ftadd& (0+255),f,b
 13046  002578  E301               	bnc	u21741
 13047  00257A  81BD               	bsf	(??___ftadd+1)& (0+255),0,b
 13048  00257C                     u21741:
 13049  00257C  51BC               	movf	??___ftadd& (0+255),w,b
 13050  00257E  6FC1               	movwf	___ftadd@exp1& (0+255),b
 13051  002580  C0BB  F0BC         	movff	___ftadd@f2+2,??___ftadd
 13052  002584  6BBD               	clrf	(??___ftadd+1)& (0+255),b
 13053  002586  6BBE               	clrf	(??___ftadd+2)& (0+255),b
 13054  002588  35BA               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 13055  00258A  37BC               	rlcf	??___ftadd& (0+255),f,b
 13056  00258C  E301               	bnc	u21751
 13057  00258E  81BD               	bsf	(??___ftadd+1)& (0+255),0,b
 13058  002590                     u21751:
 13059  002590  51BC               	movf	??___ftadd& (0+255),w,b
 13060  002592  6FC0               	movwf	___ftadd@exp2& (0+255),b
 13061                           
 13062                           ; BSR set to: 0
 13063  002594  51C1               	movf	___ftadd@exp1& (0+255),w,b
 13064  002596  B4D8               	btfsc	status,2,c
 13065  002598  D00B               	goto	u21780
 13066                           
 13067                           ; BSR set to: 0
 13068  00259A  51C0               	movf	___ftadd@exp2& (0+255),w,b
 13069  00259C  5DC1               	subwf	___ftadd@exp1& (0+255),w,b
 13070  00259E  B0D8               	btfsc	status,0,c
 13071  0025A0  D00E               	goto	l2859
 13072                           
 13073                           ; BSR set to: 0
 13074  0025A2  51C1               	movf	___ftadd@exp1& (0+255),w,b
 13075  0025A4  0800               	sublw	0
 13076  0025A6  25C0               	addwf	___ftadd@exp2& (0+255),w,b
 13077  0025A8  6FBC               	movwf	??___ftadd& (0+255),b
 13078  0025AA  0E18               	movlw	24
 13079  0025AC  65BC               	cpfsgt	??___ftadd& (0+255),b
 13080  0025AE  D007               	goto	l2859
 13081  0025B0                     u21780:
 13082                           
 13083                           ; BSR set to: 0
 13084  0025B0  C0B9  F0B6         	movff	___ftadd@f2,?___ftadd
 13085  0025B4  C0BA  F0B7         	movff	___ftadd@f2+1,?___ftadd+1
 13086  0025B8  C0BB  F0B8         	movff	___ftadd@f2+2,?___ftadd+2
 13087  0025BC  0012               	return	
 13088  0025BE                     l2859:
 13089                           
 13090                           ; BSR set to: 0
 13091                           
 13092                           ; BSR set to: 0
 13093  0025BE  51C0               	movf	___ftadd@exp2& (0+255),w,b
 13094  0025C0  B4D8               	btfsc	status,2,c
 13095  0025C2  D00B               	goto	u21810
 13096                           
 13097                           ; BSR set to: 0
 13098  0025C4  51C1               	movf	___ftadd@exp1& (0+255),w,b
 13099  0025C6  5DC0               	subwf	___ftadd@exp2& (0+255),w,b
 13100  0025C8  B0D8               	btfsc	status,0,c
 13101  0025CA  D00E               	goto	l2863
 13102                           
 13103                           ; BSR set to: 0
 13104  0025CC  51C0               	movf	___ftadd@exp2& (0+255),w,b
 13105  0025CE  0800               	sublw	0
 13106  0025D0  25C1               	addwf	___ftadd@exp1& (0+255),w,b
 13107  0025D2  6FBC               	movwf	??___ftadd& (0+255),b
 13108  0025D4  0E18               	movlw	24
 13109  0025D6  65BC               	cpfsgt	??___ftadd& (0+255),b
 13110  0025D8  D007               	goto	l2863
 13111  0025DA                     u21810:
 13112                           
 13113                           ; BSR set to: 0
 13114  0025DA  C0B6  F0B6         	movff	___ftadd@f1,?___ftadd
 13115  0025DE  C0B7  F0B7         	movff	___ftadd@f1+1,?___ftadd+1
 13116  0025E2  C0B8  F0B8         	movff	___ftadd@f1+2,?___ftadd+2
 13117  0025E6  0012               	return	
 13118  0025E8                     l2863:
 13119                           
 13120                           ; BSR set to: 0
 13121                           
 13122                           ; BSR set to: 0
 13123  0025E8  0E06               	movlw	6
 13124  0025EA  6FBF               	movwf	___ftadd@sign& (0+255),b
 13125                           
 13126                           ; BSR set to: 0
 13127  0025EC  BFB8               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 13128                           
 13129                           ; BSR set to: 0
 13130  0025EE  8FBF               	bsf	___ftadd@sign& (0+255),7,b
 13131                           
 13132                           ; BSR set to: 0
 13133                           
 13134                           ; BSR set to: 0
 13135  0025F0  BFBB               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 13136                           
 13137                           ; BSR set to: 0
 13138  0025F2  8DBF               	bsf	___ftadd@sign& (0+255),6,b
 13139                           
 13140                           ; BSR set to: 0
 13141  0025F4  8FB7               	bsf	(___ftadd@f1+1)& (0+255),7,b
 13142                           
 13143                           ; BSR set to: 0
 13144  0025F6  0EFF               	movlw	255
 13145  0025F8  17B6               	andwf	___ftadd@f1& (0+255),f,b
 13146  0025FA  0EFF               	movlw	255
 13147  0025FC  17B7               	andwf	(___ftadd@f1+1)& (0+255),f,b
 13148  0025FE  0E00               	movlw	0
 13149  002600  17B8               	andwf	(___ftadd@f1+2)& (0+255),f,b
 13150  002602  8FBA               	bsf	(___ftadd@f2+1)& (0+255),7,b
 13151                           
 13152                           ; BSR set to: 0
 13153  002604  0EFF               	movlw	255
 13154  002606  17B9               	andwf	___ftadd@f2& (0+255),f,b
 13155  002608  0EFF               	movlw	255
 13156  00260A  17BA               	andwf	(___ftadd@f2+1)& (0+255),f,b
 13157  00260C  0E00               	movlw	0
 13158  00260E  17BB               	andwf	(___ftadd@f2+2)& (0+255),f,b
 13159                           
 13160                           ; BSR set to: 0
 13161  002610  51C0               	movf	___ftadd@exp2& (0+255),w,b
 13162  002612  5DC1               	subwf	___ftadd@exp1& (0+255),w,b
 13163  002614  B0D8               	btfsc	status,0,c
 13164  002616  D01B               	goto	l2868
 13165  002618                     u21840:
 13166                           
 13167                           ; BSR set to: 0
 13168                           
 13169                           ; BSR set to: 0
 13170  002618  90D8               	bcf	status,0,c
 13171  00261A  37B9               	rlcf	___ftadd@f2& (0+255),f,b
 13172  00261C  37BA               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 13173  00261E  37BB               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 13174  002620  07C0               	decf	___ftadd@exp2& (0+255),f,b
 13175                           
 13176                           ; BSR set to: 0
 13177  002622  51C1               	movf	___ftadd@exp1& (0+255),w,b
 13178  002624  19C0               	xorwf	___ftadd@exp2& (0+255),w,b
 13179  002626  B4D8               	btfsc	status,2,c
 13180  002628  D00D               	goto	l2873
 13181                           
 13182                           ; BSR set to: 0
 13183  00262A  07BF               	decf	___ftadd@sign& (0+255),f,b
 13184  00262C  C0BF  F0BC         	movff	___ftadd@sign,??___ftadd
 13185  002630  0E07               	movlw	7
 13186  002632  17BC               	andwf	??___ftadd& (0+255),f,b
 13187  002634  B4D8               	btfsc	status,2,c
 13188  002636  D006               	goto	l2873
 13189  002638  D7EF               	goto	u21840
 13190  00263A                     
 13191                           ; BSR set to: 0
 13192                           
 13193                           ; BSR set to: 0
 13194  00263A  90D8               	bcf	status,0,c
 13195  00263C  33B8               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 13196  00263E  33B7               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 13197  002640  33B6               	rrcf	___ftadd@f1& (0+255),f,b
 13198  002642  2BC1               	incf	___ftadd@exp1& (0+255),f,b
 13199  002644                     l2873:
 13200                           
 13201                           ; BSR set to: 0
 13202                           
 13203                           ; BSR set to: 0
 13204  002644  51C0               	movf	___ftadd@exp2& (0+255),w,b
 13205  002646  19C1               	xorwf	___ftadd@exp1& (0+255),w,b
 13206  002648  B4D8               	btfsc	status,2,c
 13207  00264A  D01F               	goto	u21910
 13208  00264C  D7F6               	goto	l2874
 13209  00264E                     l2868:
 13210                           
 13211                           ; BSR set to: 0
 13212                           
 13213                           ; BSR set to: 0
 13214  00264E  51C1               	movf	___ftadd@exp1& (0+255),w,b
 13215  002650  5DC0               	subwf	___ftadd@exp2& (0+255),w,b
 13216  002652  B0D8               	btfsc	status,0,c
 13217  002654  D01A               	goto	u21910
 13218  002656                     u21880:
 13219                           
 13220                           ; BSR set to: 0
 13221                           
 13222                           ; BSR set to: 0
 13223  002656  90D8               	bcf	status,0,c
 13224  002658  37B6               	rlcf	___ftadd@f1& (0+255),f,b
 13225  00265A  37B7               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 13226  00265C  37B8               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 13227  00265E  07C1               	decf	___ftadd@exp1& (0+255),f,b
 13228                           
 13229                           ; BSR set to: 0
 13230  002660  51C1               	movf	___ftadd@exp1& (0+255),w,b
 13231  002662  19C0               	xorwf	___ftadd@exp2& (0+255),w,b
 13232  002664  B4D8               	btfsc	status,2,c
 13233  002666  D00D               	goto	l2882
 13234                           
 13235                           ; BSR set to: 0
 13236  002668  07BF               	decf	___ftadd@sign& (0+255),f,b
 13237  00266A  C0BF  F0BC         	movff	___ftadd@sign,??___ftadd
 13238  00266E  0E07               	movlw	7
 13239  002670  17BC               	andwf	??___ftadd& (0+255),f,b
 13240  002672  B4D8               	btfsc	status,2,c
 13241  002674  D006               	goto	l2882
 13242  002676  D7EF               	goto	u21880
 13243  002678                     
 13244                           ; BSR set to: 0
 13245                           
 13246                           ; BSR set to: 0
 13247  002678  90D8               	bcf	status,0,c
 13248  00267A  33BB               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 13249  00267C  33BA               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 13250  00267E  33B9               	rrcf	___ftadd@f2& (0+255),f,b
 13251  002680  2BC0               	incf	___ftadd@exp2& (0+255),f,b
 13252  002682                     l2882:
 13253                           
 13254                           ; BSR set to: 0
 13255                           
 13256                           ; BSR set to: 0
 13257  002682  51C0               	movf	___ftadd@exp2& (0+255),w,b
 13258  002684  19C1               	xorwf	___ftadd@exp1& (0+255),w,b
 13259  002686  A4D8               	btfss	status,2,c
 13260  002688  D7F7               	goto	l2883
 13261  00268A                     u21910:
 13262                           
 13263                           ; BSR set to: 0
 13264                           
 13265                           ; BSR set to: 0
 13266                           
 13267                           ; BSR set to: 0
 13268  00268A  AFBF               	btfss	___ftadd@sign& (0+255),7,b
 13269  00268C  D00C               	goto	l2885
 13270                           
 13271                           ; BSR set to: 0
 13272  00268E  0EFF               	movlw	255
 13273  002690  1BB6               	xorwf	___ftadd@f1& (0+255),f,b
 13274  002692  0EFF               	movlw	255
 13275  002694  1BB7               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 13276  002696  0EFF               	movlw	255
 13277  002698  1BB8               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 13278  00269A  0E01               	movlw	1
 13279  00269C  27B6               	addwf	___ftadd@f1& (0+255),f,b
 13280  00269E  0E00               	movlw	0
 13281  0026A0  23B7               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 13282  0026A2  0E00               	movlw	0
 13283  0026A4  23B8               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 13284  0026A6                     l2885:
 13285                           
 13286                           ; BSR set to: 0
 13287  0026A6  ADBF               	btfss	___ftadd@sign& (0+255),6,b
 13288  0026A8  D00C               	goto	l2886
 13289                           
 13290                           ; BSR set to: 0
 13291  0026AA  0EFF               	movlw	255
 13292  0026AC  1BB9               	xorwf	___ftadd@f2& (0+255),f,b
 13293  0026AE  0EFF               	movlw	255
 13294  0026B0  1BBA               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13295  0026B2  0EFF               	movlw	255
 13296  0026B4  1BBB               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13297  0026B6  0E01               	movlw	1
 13298  0026B8  27B9               	addwf	___ftadd@f2& (0+255),f,b
 13299  0026BA  0E00               	movlw	0
 13300  0026BC  23BA               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13301  0026BE  0E00               	movlw	0
 13302  0026C0  23BB               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13303  0026C2                     l2886:
 13304                           
 13305                           ; BSR set to: 0
 13306                           
 13307                           ; BSR set to: 0
 13308  0026C2  0E00               	movlw	0
 13309  0026C4  6FBF               	movwf	___ftadd@sign& (0+255),b
 13310                           
 13311                           ; BSR set to: 0
 13312  0026C6  51B6               	movf	___ftadd@f1& (0+255),w,b
 13313  0026C8  27B9               	addwf	___ftadd@f2& (0+255),f,b
 13314  0026CA  51B7               	movf	(___ftadd@f1+1)& (0+255),w,b
 13315  0026CC  23BA               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13316  0026CE  51B8               	movf	(___ftadd@f1+2)& (0+255),w,b
 13317  0026D0  23BB               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13318                           
 13319                           ; BSR set to: 0
 13320  0026D2  AFBB               	btfss	(___ftadd@f2+2)& (0+255),7,b
 13321  0026D4  D00E               	goto	l2887
 13322                           
 13323                           ; BSR set to: 0
 13324  0026D6  0EFF               	movlw	255
 13325  0026D8  1BB9               	xorwf	___ftadd@f2& (0+255),f,b
 13326  0026DA  0EFF               	movlw	255
 13327  0026DC  1BBA               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 13328  0026DE  0EFF               	movlw	255
 13329  0026E0  1BBB               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 13330  0026E2  0E01               	movlw	1
 13331  0026E4  27B9               	addwf	___ftadd@f2& (0+255),f,b
 13332  0026E6  0E00               	movlw	0
 13333  0026E8  23BA               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 13334  0026EA  0E00               	movlw	0
 13335  0026EC  23BB               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 13336                           
 13337                           ; BSR set to: 0
 13338  0026EE  0E01               	movlw	1
 13339  0026F0  6FBF               	movwf	___ftadd@sign& (0+255),b
 13340  0026F2                     l2887:
 13341                           
 13342                           ; BSR set to: 0
 13343                           
 13344                           ; BSR set to: 0
 13345  0026F2  C0B9  F060         	movff	___ftadd@f2,___ftpack@arg
 13346  0026F6  C0BA  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
 13347  0026FA  C0BB  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
 13348  0026FE  C0C1  F063         	movff	___ftadd@exp1,___ftpack@exp
 13349  002702  C0BF  F064         	movff	___ftadd@sign,___ftpack@sign
 13350  002706  ECFF  F016         	call	___ftpack	;wreg free
 13351  00270A  C060  F0B6         	movff	?___ftpack,?___ftadd
 13352  00270E  C061  F0B7         	movff	?___ftpack+1,?___ftadd+1
 13353  002712  C062  F0B8         	movff	?___ftpack+2,?___ftadd+2
 13354  002716  0012               	return	
 13355  002718                     __end_of___ftadd:
 13356                           	opt stack 0
 13357                           tblptru	equ	0xFF8
 13358                           tblptrh	equ	0xFF7
 13359                           tblptrl	equ	0xFF6
 13360                           tablat	equ	0xFF5
 13361                           prodh	equ	0xFF4
 13362                           prodl	equ	0xFF3
 13363                           postinc0	equ	0xFEE
 13364                           wreg	equ	0xFE8
 13365                           indf1	equ	0xFE7
 13366                           postdec1	equ	0xFE5
 13367                           fsr1h	equ	0xFE2
 13368                           fsr1l	equ	0xFE1
 13369                           indf2	equ	0xFDF
 13370                           postinc2	equ	0xFDE
 13371                           postdec2	equ	0xFDD
 13372                           fsr2h	equ	0xFDA
 13373                           fsr2l	equ	0xFD9
 13374                           status	equ	0xFD8
 13375                           
 13376 ;; *************** function ___ftpack *****************
 13377 ;; Defined at:
 13378 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 13379 ;; Parameters:    Size  Location     Type
 13380 ;;  arg             3    0[BANK0 ] unsigned um
 13381 ;;  exp             1    3[BANK0 ] unsigned char 
 13382 ;;  sign            1    4[BANK0 ] unsigned char 
 13383 ;; Auto vars:     Size  Location     Type
 13384 ;;		None
 13385 ;; Return value:  Size  Location     Type
 13386 ;;                  3    0[BANK0 ] float 
 13387 ;; Registers used:
 13388 ;;		wreg, status,2, status,0
 13389 ;; Tracked objects:
 13390 ;;		On entry : 0/0
 13391 ;;		On exit  : 0/0
 13392 ;;		Unchanged: 0/0
 13393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13394 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13396 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13397 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13398 ;;Total ram usage:        8 bytes
 13399 ;; Hardware stack levels used:    1
 13400 ;; Hardware stack levels required when called:    4
 13401 ;; This function calls:
 13402 ;;		Nothing
 13403 ;; This function is called by:
 13404 ;;		___awtoft
 13405 ;;		___ftadd
 13406 ;;		___ftdiv
 13407 ;;		___ftmul
 13408 ;;		___lltoft
 13409 ;;		___lwtoft
 13410 ;;		___lbtoft
 13411 ;; This function uses a non-reentrant model
 13412 ;;
 13413                           
 13414                           	psect	text36
 13415  002DFE                     __ptext36:
 13416                           	opt stack 0
 13417  002DFE                     ___ftpack:
 13418                           	opt stack 23
 13419                           
 13420                           ;incstack = 0
 13421  002DFE  0100               	movlb	0	; () banked
 13422  002E00  5163               	movf	___ftpack@exp& (0+255),w,b
 13423  002E02  B4D8               	btfsc	status,2,c
 13424  002E04  D005               	goto	u21540
 13425                           
 13426                           ; BSR set to: 0
 13427  002E06  5160               	movf	___ftpack@arg& (0+255),w,b
 13428  002E08  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 13429  002E0A  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 13430  002E0C  A4D8               	btfss	status,2,c
 13431  002E0E  D00C               	goto	l2828
 13432  002E10                     u21540:
 13433                           
 13434                           ; BSR set to: 0
 13435                           
 13436                           ; BSR set to: 0
 13437  002E10  0E00               	movlw	0
 13438  002E12  6F60               	movwf	?___ftpack& (0+255),b
 13439  002E14  0E00               	movlw	0
 13440  002E16  6F61               	movwf	(?___ftpack+1)& (0+255),b
 13441  002E18  0E00               	movlw	0
 13442  002E1A  6F62               	movwf	(?___ftpack+2)& (0+255),b
 13443                           
 13444                           ; BSR set to: 0
 13445  002E1C  0012               	return	
 13446  002E1E                     
 13447                           ; BSR set to: 0
 13448                           
 13449                           ; BSR set to: 0
 13450  002E1E  2B63               	incf	___ftpack@exp& (0+255),f,b
 13451  002E20  90D8               	bcf	status,0,c
 13452  002E22  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 13453  002E24  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 13454  002E26  3360               	rrcf	___ftpack@arg& (0+255),f,b
 13455  002E28                     l2828:
 13456                           
 13457                           ; BSR set to: 0
 13458                           
 13459                           ; BSR set to: 0
 13460  002E28  0E00               	movlw	0
 13461  002E2A  1560               	andwf	___ftpack@arg& (0+255),w,b
 13462  002E2C  6F65               	movwf	??___ftpack& (0+255),b
 13463  002E2E  0E00               	movlw	0
 13464  002E30  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 13465  002E32  6F66               	movwf	(??___ftpack+1)& (0+255),b
 13466  002E34  0EFE               	movlw	254
 13467  002E36  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 13468  002E38  6F67               	movwf	(??___ftpack+2)& (0+255),b
 13469  002E3A  5165               	movf	??___ftpack& (0+255),w,b
 13470  002E3C  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 13471  002E3E  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 13472  002E40  B4D8               	btfsc	status,2,c
 13473  002E42  D00C               	goto	l2831
 13474  002E44  D7EC               	goto	l2829
 13475  002E46                     
 13476                           ; BSR set to: 0
 13477                           
 13478                           ; BSR set to: 0
 13479  002E46  2B63               	incf	___ftpack@exp& (0+255),f,b
 13480                           
 13481                           ; BSR set to: 0
 13482  002E48  0E01               	movlw	1
 13483  002E4A  2760               	addwf	___ftpack@arg& (0+255),f,b
 13484  002E4C  0E00               	movlw	0
 13485  002E4E  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 13486  002E50  0E00               	movlw	0
 13487  002E52  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 13488  002E54  90D8               	bcf	status,0,c
 13489  002E56  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 13490  002E58  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 13491  002E5A  3360               	rrcf	___ftpack@arg& (0+255),f,b
 13492  002E5C                     l2831:
 13493                           
 13494                           ; BSR set to: 0
 13495                           
 13496                           ; BSR set to: 0
 13497  002E5C  0E00               	movlw	0
 13498  002E5E  1560               	andwf	___ftpack@arg& (0+255),w,b
 13499  002E60  6F65               	movwf	??___ftpack& (0+255),b
 13500  002E62  0E00               	movlw	0
 13501  002E64  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 13502  002E66  6F66               	movwf	(??___ftpack+1)& (0+255),b
 13503  002E68  0EFF               	movlw	255
 13504  002E6A  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 13505  002E6C  6F67               	movwf	(??___ftpack+2)& (0+255),b
 13506  002E6E  5165               	movf	??___ftpack& (0+255),w,b
 13507  002E70  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 13508  002E72  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 13509  002E74  B4D8               	btfsc	status,2,c
 13510  002E76  D006               	goto	l2834
 13511  002E78  D7E6               	goto	l2832
 13512  002E7A                     
 13513                           ; BSR set to: 0
 13514                           
 13515                           ; BSR set to: 0
 13516  002E7A  0763               	decf	___ftpack@exp& (0+255),f,b
 13517  002E7C  90D8               	bcf	status,0,c
 13518  002E7E  3760               	rlcf	___ftpack@arg& (0+255),f,b
 13519  002E80  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 13520  002E82  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 13521  002E84                     l2834:
 13522                           
 13523                           ; BSR set to: 0
 13524                           
 13525                           ; BSR set to: 0
 13526  002E84  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 13527  002E86  D003               	goto	u21580
 13528                           
 13529                           ; BSR set to: 0
 13530  002E88  0E02               	movlw	2
 13531  002E8A  6163               	cpfslt	___ftpack@exp& (0+255),b
 13532  002E8C  D7F6               	goto	l2835
 13533  002E8E                     u21580:
 13534                           
 13535                           ; BSR set to: 0
 13536                           
 13537                           ; BSR set to: 0
 13538  002E8E  A163               	btfss	___ftpack@exp& (0+255),0,b
 13539                           
 13540                           ; BSR set to: 0
 13541  002E90  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
 13542                           
 13543                           ; BSR set to: 0
 13544                           
 13545                           ; BSR set to: 0
 13546  002E92  90D8               	bcf	status,0,c
 13547  002E94  3363               	rrcf	___ftpack@exp& (0+255),f,b
 13548  002E96  5163               	movf	___ftpack@exp& (0+255),w,b
 13549  002E98  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 13550                           
 13551                           ; BSR set to: 0
 13552  002E9A  5164               	movf	___ftpack@sign& (0+255),w,b
 13553  002E9C  A4D8               	btfss	status,2,c
 13554                           
 13555                           ; BSR set to: 0
 13556  002E9E  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
 13557                           
 13558                           ; BSR set to: 0
 13559                           
 13560                           ; BSR set to: 0
 13561  002EA0  C060  F060         	movff	___ftpack@arg,?___ftpack
 13562  002EA4  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
 13563  002EA8  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
 13564  002EAC  0012               	return	
 13565  002EAE                     __end_of___ftpack:
 13566                           	opt stack 0
 13567                           tblptru	equ	0xFF8
 13568                           tblptrh	equ	0xFF7
 13569                           tblptrl	equ	0xFF6
 13570                           tablat	equ	0xFF5
 13571                           prodh	equ	0xFF4
 13572                           prodl	equ	0xFF3
 13573                           postinc0	equ	0xFEE
 13574                           wreg	equ	0xFE8
 13575                           indf1	equ	0xFE7
 13576                           postdec1	equ	0xFE5
 13577                           fsr1h	equ	0xFE2
 13578                           fsr1l	equ	0xFE1
 13579                           indf2	equ	0xFDF
 13580                           postinc2	equ	0xFDE
 13581                           postdec2	equ	0xFDD
 13582                           fsr2h	equ	0xFDA
 13583                           fsr2l	equ	0xFD9
 13584                           status	equ	0xFD8
 13585                           
 13586 ;; *************** function _SYSTEM_Initialize *****************
 13587 ;; Defined at:
 13588 ;;		line 47 in file "../src/system_config/miwikit_pic18f46j50_24j40/system.c"
 13589 ;; Parameters:    Size  Location     Type
 13590 ;;		None
 13591 ;; Auto vars:     Size  Location     Type
 13592 ;;		None
 13593 ;; Return value:  Size  Location     Type
 13594 ;;                  1    wreg      void 
 13595 ;; Registers used:
 13596 ;;		wreg, status,2, status,0, cstack
 13597 ;; Tracked objects:
 13598 ;;		On entry : 0/0
 13599 ;;		On exit  : 0/0
 13600 ;;		Unchanged: 0/0
 13601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13606 ;;Total ram usage:        0 bytes
 13607 ;; Hardware stack levels used:    1
 13608 ;; Hardware stack levels required when called:    7
 13609 ;; This function calls:
 13610 ;;		_LCD_Initialize
 13611 ;; This function is called by:
 13612 ;;		_main
 13613 ;;		_Network
 13614 ;; This function uses a non-reentrant model
 13615 ;;
 13616                           
 13617                           	psect	text37
 13618  002F5A                     __ptext37:
 13619                           	opt stack 0
 13620  002F5A                     _SYSTEM_Initialize:
 13621                           	opt stack 23
 13622                           
 13623                           ;system.c: 52: OSCCON = 0x78;
 13624                           
 13625                           ; BSR set to: 0
 13626                           ;incstack = 0
 13627  002F5A  0E78               	movlw	120
 13628  002F5C  6ED3               	movwf	4051,c	;volatile
 13629                           
 13630                           ;system.c: 53: OSCTUNEbits.PLLEN = 1;
 13631  002F5E  8C9B               	bsf	3995,6,c	;volatile
 13632                           
 13633                           ;system.c: 54: WDTCONbits.SWDTEN = 0;
 13634  002F60  90C0               	bcf	4032,0,c	;volatile
 13635                           
 13636                           ;system.c: 60: EECON2 = 0x55;
 13637  002F62  0E55               	movlw	85
 13638  002F64  6EA7               	movwf	4007,c	;volsfr
 13639                           
 13640                           ;system.c: 61: EECON2 = 0xAA;
 13641  002F66  0EAA               	movlw	170
 13642  002F68  6EA7               	movwf	4007,c	;volsfr
 13643                           
 13644                           ;system.c: 62: PPSCONbits.IOLOCK = 0;
 13645  002F6A  010E               	movlb	14	; () banked
 13646  002F6C  91FF               	bcf	255,0,b	;volatile
 13647                           
 13648                           ;system.c: 64: RPINR1 = 17;
 13649  002F6E  0E11               	movlw	17
 13650  002F70  6FE7               	movwf	231,b	;volatile
 13651                           
 13652                           ;system.c: 65: RPINR21 = 23;
 13653  002F72  0E17               	movlw	23
 13654  002F74  6FFB               	movwf	251,b	;volatile
 13655                           
 13656                           ;system.c: 66: RPOR21 = 10;
 13657  002F76  0E0A               	movlw	10
 13658  002F78  6FDB               	movwf	219,b	;volatile
 13659                           
 13660                           ;system.c: 67: RPOR19 = 9;
 13661  002F7A  0E09               	movlw	9
 13662  002F7C  6FD9               	movwf	217,b	;volatile
 13663                           
 13664                           ;system.c: 70: EECON2 = 0x55;
 13665  002F7E  0E55               	movlw	85
 13666  002F80  6EA7               	movwf	4007,c	;volsfr
 13667                           
 13668                           ;system.c: 71: EECON2 = 0xAA;
 13669  002F82  0EAA               	movlw	170
 13670  002F84  6EA7               	movwf	4007,c	;volsfr
 13671                           
 13672                           ; BSR set to: 14
 13673                           ;system.c: 72: PPSCONbits.IOLOCK = 1;
 13674  002F86  81FF               	bsf	255,0,b	;volatile
 13675                           
 13676                           ;system.c: 77: ANCON0 = 0xFC;
 13677  002F88  0EFC               	movlw	252
 13678  002F8A  010F               	movlb	15	; () banked
 13679  002F8C  6F48               	movwf	72,b	;volatile
 13680                           
 13681                           ;system.c: 78: ANCON1 = 0x1F;
 13682  002F8E  0E1F               	movlw	31
 13683  002F90  6F49               	movwf	73,b	;volatile
 13684                           
 13685                           ; BSR set to: 15
 13686                           ;system.c: 83: LATCbits.LATC2 = 0;
 13687  002F92  948B               	bcf	3979,2,c	;volatile
 13688                           
 13689                           ; BSR set to: 15
 13690                           ;system.c: 84: LATAbits.LATA6 = 0;
 13691  002F94  9C89               	bcf	3977,6,c	;volatile
 13692                           
 13693                           ; BSR set to: 15
 13694                           ;system.c: 85: LATAbits.LATA7 = 0;
 13695  002F96  9E89               	bcf	3977,7,c	;volatile
 13696                           
 13697                           ; BSR set to: 15
 13698                           ;system.c: 86: TRISCbits.TRISC2 = 0;
 13699  002F98  9494               	bcf	3988,2,c	;volatile
 13700                           
 13701                           ; BSR set to: 15
 13702                           ;system.c: 87: TRISAbits.TRISA6 = 0;
 13703  002F9A  9C92               	bcf	3986,6,c	;volatile
 13704                           
 13705                           ; BSR set to: 15
 13706                           ;system.c: 88: TRISAbits.TRISA7 = 0;
 13707  002F9C  9E92               	bcf	3986,7,c	;volatile
 13708                           
 13709                           ; BSR set to: 15
 13710                           ;system.c: 90: TRISBbits.TRISB1 = 1;
 13711  002F9E  8293               	bsf	3987,1,c	;volatile
 13712                           
 13713                           ; BSR set to: 15
 13714                           ;system.c: 91: TRISBbits.TRISB2 = 1;
 13715  002FA0  8493               	bsf	3987,2,c	;volatile
 13716                           
 13717                           ; BSR set to: 15
 13718                           ;system.c: 93: INTCON2bits.RBPU = 0;
 13719  002FA2  9EF1               	bcf	intcon2,7,c	;volatile
 13720                           
 13721                           ; BSR set to: 15
 13722                           ;system.c: 98: TRISAbits.TRISA1 = 1;
 13723  002FA4  8292               	bsf	3986,1,c	;volatile
 13724                           
 13725                           ; BSR set to: 15
 13726                           ;system.c: 99: TRISAbits.TRISA0 = 1;
 13727  002FA6  8092               	bsf	3986,0,c	;volatile
 13728                           
 13729                           ; BSR set to: 15
 13730                           ;system.c: 107: LATAbits.LATA5 = 1;
 13731  002FA8  8A89               	bsf	3977,5,c	;volatile
 13732                           
 13733                           ; BSR set to: 15
 13734                           ;system.c: 108: LATDbits.LATD0 = 1;
 13735  002FAA  808C               	bsf	3980,0,c	;volatile
 13736                           
 13737                           ; BSR set to: 15
 13738                           ;system.c: 109: LATDbits.LATD1 = 1;
 13739  002FAC  828C               	bsf	3980,1,c	;volatile
 13740                           
 13741                           ; BSR set to: 15
 13742                           ;system.c: 111: TRISAbits.TRISA5 = 0;
 13743  002FAE  9A92               	bcf	3986,5,c	;volatile
 13744                           
 13745                           ; BSR set to: 15
 13746                           ;system.c: 112: TRISDbits.TRISD0 = 0;
 13747  002FB0  9095               	bcf	3989,0,c	;volatile
 13748                           
 13749                           ; BSR set to: 15
 13750                           ;system.c: 113: TRISDbits.TRISD1 = 0;
 13751  002FB2  9295               	bcf	3989,1,c	;volatile
 13752                           
 13753                           ; BSR set to: 15
 13754                           ;system.c: 114: TRISBbits.TRISB0 = 1;
 13755  002FB4  8093               	bsf	3987,0,c	;volatile
 13756                           
 13757                           ; BSR set to: 15
 13758                           ;system.c: 117: INTCON2bits.INTEDG0 = 0;
 13759  002FB6  9CF1               	bcf	intcon2,6,c	;volatile
 13760                           
 13761                           ; BSR set to: 15
 13762                           ;system.c: 119: INTCONbits.INT0IF = 0;
 13763  002FB8  92F2               	bcf	intcon,1,c	;volatile
 13764                           
 13765                           ; BSR set to: 15
 13766                           ;system.c: 120: INTCONbits.INT0IE = 1;
 13767  002FBA  88F2               	bsf	intcon,4,c	;volatile
 13768                           
 13769                           ; BSR set to: 15
 13770                           ;system.c: 125: TRISBbits.TRISB5 = 1;
 13771  002FBC  8A93               	bsf	3987,5,c	;volatile
 13772                           
 13773                           ; BSR set to: 15
 13774                           ;system.c: 126: TRISCbits.TRISC7 = 0;
 13775  002FBE  9E94               	bcf	3988,7,c	;volatile
 13776                           
 13777                           ; BSR set to: 15
 13778                           ;system.c: 127: TRISBbits.TRISB4 = 0;
 13779  002FC0  9893               	bcf	3987,4,c	;volatile
 13780                           
 13781                           ;system.c: 129: SSP1STAT = 0xC0;
 13782  002FC2  0EC0               	movlw	192
 13783  002FC4  6EC7               	movwf	4039,c	;volatile
 13784                           
 13785                           ;system.c: 130: SSP1CON1 = 0x20;
 13786  002FC6  0E20               	movlw	32
 13787  002FC8  6EC6               	movwf	4038,c	;volatile
 13788                           
 13789                           ; BSR set to: 15
 13790                           ;system.c: 137: LATDbits.LATD5 = 1;
 13791  002FCA  8A8C               	bsf	3980,5,c	;volatile
 13792                           
 13793                           ; BSR set to: 15
 13794                           ;system.c: 138: TRISDbits.TRISD5 = 0;
 13795  002FCC  9A95               	bcf	3989,5,c	;volatile
 13796                           
 13797                           ; BSR set to: 15
 13798                           ;system.c: 139: LATEbits.LATE2 = 1;
 13799  002FCE  848D               	bsf	3981,2,c	;volatile
 13800                           
 13801                           ; BSR set to: 15
 13802                           ;system.c: 140: TRISEbits.TRISE2 = 0;
 13803  002FD0  9496               	bcf	3990,2,c	;volatile
 13804                           
 13805                           ; BSR set to: 15
 13806                           ;system.c: 146: LATEbits.LATE1 = 0;
 13807  002FD2  928D               	bcf	3981,1,c	;volatile
 13808                           
 13809                           ; BSR set to: 15
 13810                           ;system.c: 147: LATDbits.LATD7 = 1;
 13811  002FD4  8E8C               	bsf	3980,7,c	;volatile
 13812                           
 13813                           ; BSR set to: 15
 13814                           ;system.c: 148: LATDbits.LATD3 = 0;
 13815  002FD6  968C               	bcf	3980,3,c	;volatile
 13816                           
 13817                           ; BSR set to: 15
 13818                           ;system.c: 149: LATEbits.LATE0 = 0;
 13819  002FD8  908D               	bcf	3981,0,c	;volatile
 13820                           
 13821                           ; BSR set to: 15
 13822                           ;system.c: 150: TRISEbits.TRISE1 = 0;
 13823  002FDA  9296               	bcf	3990,1,c	;volatile
 13824                           
 13825                           ; BSR set to: 15
 13826                           ;system.c: 151: TRISDbits.TRISD7 = 0;
 13827  002FDC  9E95               	bcf	3989,7,c	;volatile
 13828                           
 13829                           ; BSR set to: 15
 13830                           ;system.c: 152: TRISDbits.TRISD3 = 0;
 13831  002FDE  9695               	bcf	3989,3,c	;volatile
 13832                           
 13833                           ; BSR set to: 15
 13834                           ;system.c: 153: TRISEbits.TRISE0 = 0;
 13835  002FE0  9096               	bcf	3990,0,c	;volatile
 13836                           
 13837                           ; BSR set to: 15
 13838                           ;system.c: 159: TRISDbits.TRISD6 = 1;
 13839  002FE2  8C95               	bsf	3989,6,c	;volatile
 13840                           
 13841                           ; BSR set to: 15
 13842                           ;system.c: 160: TRISDbits.TRISD2 = 0;
 13843  002FE4  9495               	bcf	3989,2,c	;volatile
 13844                           
 13845                           ; BSR set to: 15
 13846                           ;system.c: 161: TRISDbits.TRISD4 = 0;
 13847  002FE6  9895               	bcf	3989,4,c	;volatile
 13848                           
 13849                           ;system.c: 163: SSP2STAT = 0x00;
 13850  002FE8  0E00               	movlw	0
 13851  002FEA  6E73               	movwf	3955,c	;volatile
 13852                           
 13853                           ;system.c: 164: SSP2CON1 = 0x31;
 13854  002FEC  0E31               	movlw	49
 13855  002FEE  6E72               	movwf	3954,c	;volatile
 13856                           
 13857                           ; BSR set to: 15
 13858                           ;system.c: 166: PIR3bits.SSP2IF = 0;
 13859  002FF0  9EA4               	bcf	4004,7,c	;volatile
 13860                           
 13861                           ; BSR set to: 15
 13862                           ;system.c: 168: LCD_Initialize();
 13863  002FF2  ECAF  F019         	call	_LCD_Initialize	;wreg free
 13864                           
 13865                           ;system.c: 173: INTCONbits.GIEH = 1;
 13866  002FF6  8EF2               	bsf	intcon,7,c	;volatile
 13867                           
 13868                           ;system.c: 174: INTCONbits.GIEL = 1;
 13869  002FF8  8CF2               	bsf	intcon,6,c	;volatile
 13870  002FFA  0012               	return		;funcret
 13871  002FFC                     __end_of_SYSTEM_Initialize:
 13872                           	opt stack 0
 13873                           tblptru	equ	0xFF8
 13874                           tblptrh	equ	0xFF7
 13875                           tblptrl	equ	0xFF6
 13876                           tablat	equ	0xFF5
 13877                           prodh	equ	0xFF4
 13878                           prodl	equ	0xFF3
 13879                           intcon	equ	0xFF2
 13880                           intcon2	equ	0xFF1
 13881                           postinc0	equ	0xFEE
 13882                           wreg	equ	0xFE8
 13883                           indf1	equ	0xFE7
 13884                           postdec1	equ	0xFE5
 13885                           fsr1h	equ	0xFE2
 13886                           fsr1l	equ	0xFE1
 13887                           indf2	equ	0xFDF
 13888                           postinc2	equ	0xFDE
 13889                           postdec2	equ	0xFDD
 13890                           fsr2h	equ	0xFDA
 13891                           fsr2l	equ	0xFD9
 13892                           status	equ	0xFD8
 13893                           
 13894 ;; *************** function _LCD_Initialize *****************
 13895 ;; Defined at:
 13896 ;;		line 53 in file "../src/system_config/miwikit_pic18f46j50_24j40/lcd.c"
 13897 ;; Parameters:    Size  Location     Type
 13898 ;;		None
 13899 ;; Auto vars:     Size  Location     Type
 13900 ;;		None
 13901 ;; Return value:  Size  Location     Type
 13902 ;;                  1    wreg      void 
 13903 ;; Registers used:
 13904 ;;		wreg, status,2, status,0, cstack
 13905 ;; Tracked objects:
 13906 ;;		On entry : 0/0
 13907 ;;		On exit  : 0/0
 13908 ;;		Unchanged: 0/0
 13909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13914 ;;Total ram usage:        0 bytes
 13915 ;; Hardware stack levels used:    1
 13916 ;; Hardware stack levels required when called:    6
 13917 ;; This function calls:
 13918 ;;		_DELAY_ms
 13919 ;;		_LCD_WriteCmd
 13920 ;; This function is called by:
 13921 ;;		_SYSTEM_Initialize
 13922 ;; This function uses a non-reentrant model
 13923 ;;
 13924                           
 13925                           	psect	text38
 13926  00335E                     __ptext38:
 13927                           	opt stack 0
 13928  00335E                     _LCD_Initialize:
 13929                           	opt stack 23
 13930                           
 13931                           ;lcd.c: 55: LATDbits.LATD7 = 1;
 13932                           
 13933                           ;incstack = 0
 13934  00335E  8E8C               	bsf	3980,7,c	;volatile
 13935                           
 13936                           ;lcd.c: 56: LATEbits.LATE0 = 0;
 13937  003360  908D               	bcf	3981,0,c	;volatile
 13938                           
 13939                           ;lcd.c: 57: DELAY_ms(8);
 13940  003362  0E00               	movlw	0
 13941  003364  0100               	movlb	0	; () banked
 13942  003366  6F6D               	movwf	(DELAY_ms@ms+1)& (0+255),b
 13943  003368  0E08               	movlw	8
 13944  00336A  6F6C               	movwf	DELAY_ms@ms& (0+255),b
 13945  00336C  ECE1  F018         	call	_DELAY_ms	;wreg free
 13946                           
 13947                           ;lcd.c: 58: LATEbits.LATE0 = 1;
 13948  003370  808D               	bsf	3981,0,c	;volatile
 13949                           
 13950                           ;lcd.c: 59: DELAY_ms(80);
 13951  003372  0E00               	movlw	0
 13952  003374  0100               	movlb	0	; () banked
 13953  003376  6F6D               	movwf	(DELAY_ms@ms+1)& (0+255),b
 13954  003378  0E50               	movlw	80
 13955  00337A  6F6C               	movwf	DELAY_ms@ms& (0+255),b
 13956  00337C  ECE1  F018         	call	_DELAY_ms	;wreg free
 13957                           
 13958                           ;lcd.c: 60: LCD_WriteCmd(0x30);
 13959  003380  0E30               	movlw	48
 13960  003382  ECE9  F01C         	call	_LCD_WriteCmd
 13961                           
 13962                           ;lcd.c: 61: DELAY_ms(8);
 13963  003386  0E00               	movlw	0
 13964  003388  0100               	movlb	0	; () banked
 13965  00338A  6F6D               	movwf	(DELAY_ms@ms+1)& (0+255),b
 13966  00338C  0E08               	movlw	8
 13967  00338E  6F6C               	movwf	DELAY_ms@ms& (0+255),b
 13968  003390  ECE1  F018         	call	_DELAY_ms	;wreg free
 13969                           
 13970                           ;lcd.c: 62: LCD_WriteCmd(0x30);
 13971  003394  0E30               	movlw	48
 13972  003396  ECE9  F01C         	call	_LCD_WriteCmd
 13973                           
 13974                           ;lcd.c: 63: LCD_WriteCmd(0x30);
 13975  00339A  0E30               	movlw	48
 13976  00339C  ECE9  F01C         	call	_LCD_WriteCmd
 13977                           
 13978                           ;lcd.c: 64: LCD_WriteCmd(0x39);
 13979  0033A0  0E39               	movlw	57
 13980  0033A2  ECE9  F01C         	call	_LCD_WriteCmd
 13981                           
 13982                           ;lcd.c: 65: LCD_WriteCmd(0x14);
 13983  0033A6  0E14               	movlw	20
 13984  0033A8  ECE9  F01C         	call	_LCD_WriteCmd
 13985                           
 13986                           ;lcd.c: 66: LCD_WriteCmd(0x56);
 13987  0033AC  0E56               	movlw	86
 13988  0033AE  ECE9  F01C         	call	_LCD_WriteCmd
 13989                           
 13990                           ;lcd.c: 67: LCD_WriteCmd(0x6D);
 13991  0033B2  0E6D               	movlw	109
 13992  0033B4  ECE9  F01C         	call	_LCD_WriteCmd
 13993                           
 13994                           ;lcd.c: 69: LCD_WriteCmd(0x70);
 13995  0033B8  0E70               	movlw	112
 13996  0033BA  ECE9  F01C         	call	_LCD_WriteCmd
 13997                           
 13998                           ;lcd.c: 70: LCD_WriteCmd(0x0E);
 13999  0033BE  0E0E               	movlw	14
 14000  0033C0  ECE9  F01C         	call	_LCD_WriteCmd
 14001                           
 14002                           ;lcd.c: 71: LCD_WriteCmd(0x06);
 14003  0033C4  0E06               	movlw	6
 14004  0033C6  ECE9  F01C         	call	_LCD_WriteCmd
 14005                           
 14006                           ;lcd.c: 72: LCD_WriteCmd(0x01);
 14007  0033CA  0E01               	movlw	1
 14008  0033CC  ECE9  F01C         	call	_LCD_WriteCmd
 14009                           
 14010                           ;lcd.c: 73: DELAY_ms(40);
 14011  0033D0  0E00               	movlw	0
 14012  0033D2  0100               	movlb	0	; () banked
 14013  0033D4  6F6D               	movwf	(DELAY_ms@ms+1)& (0+255),b
 14014  0033D6  0E28               	movlw	40
 14015  0033D8  6F6C               	movwf	DELAY_ms@ms& (0+255),b
 14016  0033DA  ECE1  F018         	call	_DELAY_ms	;wreg free
 14017  0033DE  0012               	return		;funcret
 14018  0033E0                     __end_of_LCD_Initialize:
 14019                           	opt stack 0
 14020                           tblptru	equ	0xFF8
 14021                           tblptrh	equ	0xFF7
 14022                           tblptrl	equ	0xFF6
 14023                           tablat	equ	0xFF5
 14024                           prodh	equ	0xFF4
 14025                           prodl	equ	0xFF3
 14026                           intcon	equ	0xFF2
 14027                           intcon2	equ	0xFF1
 14028                           postinc0	equ	0xFEE
 14029                           wreg	equ	0xFE8
 14030                           indf1	equ	0xFE7
 14031                           postdec1	equ	0xFE5
 14032                           fsr1h	equ	0xFE2
 14033                           fsr1l	equ	0xFE1
 14034                           indf2	equ	0xFDF
 14035                           postinc2	equ	0xFDE
 14036                           postdec2	equ	0xFDD
 14037                           fsr2h	equ	0xFDA
 14038                           fsr2l	equ	0xFD9
 14039                           status	equ	0xFD8
 14040                           
 14041 ;; *************** function _DELAY_ms *****************
 14042 ;; Defined at:
 14043 ;;		line 108 in file "../src/system_config/miwikit_pic18f46j50_24j40/delay.c"
 14044 ;; Parameters:    Size  Location     Type
 14045 ;;  ms              2   12[BANK0 ] unsigned int 
 14046 ;; Auto vars:     Size  Location     Type
 14047 ;;  cyclesRequir    4   14[BANK0 ] long 
 14048 ;; Return value:  Size  Location     Type
 14049 ;;                  1    wreg      void 
 14050 ;; Registers used:
 14051 ;;		wreg, status,2, status,0, cstack
 14052 ;; Tracked objects:
 14053 ;;		On entry : 0/0
 14054 ;;		On exit  : 0/0
 14055 ;;		Unchanged: 0/0
 14056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14057 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14058 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14060 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14061 ;;Total ram usage:        6 bytes
 14062 ;; Hardware stack levels used:    1
 14063 ;; Hardware stack levels required when called:    5
 14064 ;; This function calls:
 14065 ;;		___lmul
 14066 ;; This function is called by:
 14067 ;;		_LCD_Initialize
 14068 ;;		_LCD_Erase
 14069 ;;		_LCD_Display
 14070 ;; This function uses a non-reentrant model
 14071 ;;
 14072                           
 14073                           	psect	text39
 14074  0031C2                     __ptext39:
 14075                           	opt stack 0
 14076  0031C2                     _DELAY_ms:
 14077                           	opt stack 23
 14078                           
 14079                           ;delay.c: 112: int32_t cyclesRequiredForEntireDelay = 0;
 14080                           
 14081                           ;incstack = 0
 14082  0031C2  0E00               	movlw	0
 14083  0031C4  0100               	movlb	0	; () banked
 14084  0031C6  6F6E               	movwf	DELAY_ms@cyclesRequiredForEntireDelay& (0+255),b
 14085  0031C8  0E00               	movlw	0
 14086  0031CA  6F6F               	movwf	(DELAY_ms@cyclesRequiredForEntireDelay+1)& (0+255),b
 14087  0031CC  0E00               	movlw	0
 14088  0031CE  6F70               	movwf	(DELAY_ms@cyclesRequiredForEntireDelay+2)& (0+255),b
 14089  0031D0  0E00               	movlw	0
 14090  0031D2  6F71               	movwf	(DELAY_ms@cyclesRequiredForEntireDelay+3)& (0+255),b
 14091                           
 14092                           ; BSR set to: 0
 14093                           ;delay.c: 115: cyclesRequiredForEntireDelay = (int32_t)(((16000000)/4)/1000) * ms;
 14094  0031D4  C06C  F060         	movff	DELAY_ms@ms,___lmul@multiplier
 14095  0031D8  C06D  F061         	movff	DELAY_ms@ms+1,___lmul@multiplier+1
 14096  0031DC  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
 14097  0031DE  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
 14098  0031E0  0EA0               	movlw	160
 14099  0031E2  6F64               	movwf	___lmul@multiplicand& (0+255),b
 14100  0031E4  0E0F               	movlw	15
 14101  0031E6  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 14102  0031E8  0E00               	movlw	0
 14103  0031EA  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 14104  0031EC  0E00               	movlw	0
 14105  0031EE  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 14106  0031F0  EC63  F01B         	call	___lmul	;wreg free
 14107  0031F4  C060  F06E         	movff	?___lmul,DELAY_ms@cyclesRequiredForEntireDelay
 14108  0031F8  C061  F06F         	movff	?___lmul+1,DELAY_ms@cyclesRequiredForEntireDelay+1
 14109  0031FC  C062  F070         	movff	?___lmul+2,DELAY_ms@cyclesRequiredForEntireDelay+2
 14110  003200  C063  F071         	movff	?___lmul+3,DELAY_ms@cyclesRequiredForEntireDelay+3
 14111                           
 14112                           ;delay.c: 119: cyclesRequiredForEntireDelay -= (148 + 22);
 14113  003204  0E56               	movlw	86
 14114  003206  0100               	movlb	0	; () banked
 14115  003208  276E               	addwf	DELAY_ms@cyclesRequiredForEntireDelay& (0+255),f,b
 14116  00320A  0EFF               	movlw	255
 14117  00320C  236F               	addwfc	(DELAY_ms@cyclesRequiredForEntireDelay+1)& (0+255),f,b
 14118  00320E  0EFF               	movlw	255
 14119  003210  2370               	addwfc	(DELAY_ms@cyclesRequiredForEntireDelay+2)& (0+255),f,b
 14120  003212  0EFF               	movlw	255
 14121  003214  2371               	addwfc	(DELAY_ms@cyclesRequiredForEntireDelay+3)& (0+255),f,b
 14122                           
 14123                           ; BSR set to: 0
 14124                           ;delay.c: 121: if (cyclesRequiredForEntireDelay <= (170+25))
 14125  003216  BF71               	btfsc	(DELAY_ms@cyclesRequiredForEntireDelay+3)& (0+255),7,b
 14126  003218  0012               	return	
 14127  00321A  5171               	movf	(DELAY_ms@cyclesRequiredForEntireDelay+3)& (0+255),w,b
 14128  00321C  1170               	iorwf	(DELAY_ms@cyclesRequiredForEntireDelay+2)& (0+255),w,b
 14129  00321E  116F               	iorwf	(DELAY_ms@cyclesRequiredForEntireDelay+1)& (0+255),w,b
 14130  003220  E10F               	bnz	l1884
 14131  003222  0EC4               	movlw	196
 14132  003224  5D6E               	subwf	DELAY_ms@cyclesRequiredForEntireDelay& (0+255),w,b
 14133  003226  A0D8               	btfss	status,0,c
 14134  003228  0012               	return	
 14135  00322A  D00A               	goto	l1884
 14136  00322C                     l1885:
 14137                           
 14138                           ; BSR set to: 0
 14139                           ;delay.c: 128: {
 14140                           ;delay.c: 129: __nop();
 14141  00322C  F000               	nop	
 14142                           
 14143                           ;delay.c: 130: cyclesRequiredForEntireDelay -= 39;
 14144  00322E  0ED9               	movlw	217
 14145  003230  0100               	movlb	0	; () banked
 14146  003232  276E               	addwf	DELAY_ms@cyclesRequiredForEntireDelay& (0+255),f,b
 14147  003234  0EFF               	movlw	255
 14148  003236  236F               	addwfc	(DELAY_ms@cyclesRequiredForEntireDelay+1)& (0+255),f,b
 14149  003238  0EFF               	movlw	255
 14150  00323A  2370               	addwfc	(DELAY_ms@cyclesRequiredForEntireDelay+2)& (0+255),f,b
 14151  00323C  0EFF               	movlw	255
 14152  00323E  2371               	addwfc	(DELAY_ms@cyclesRequiredForEntireDelay+3)& (0+255),f,b
 14153  003240                     l1884:
 14154                           
 14155                           ; BSR set to: 0
 14156  003240  BF71               	btfsc	(DELAY_ms@cyclesRequiredForEntireDelay+3)& (0+255),7,b
 14157  003242  0012               	return	
 14158  003244  5171               	movf	(DELAY_ms@cyclesRequiredForEntireDelay+3)& (0+255),w,b
 14159  003246  1170               	iorwf	(DELAY_ms@cyclesRequiredForEntireDelay+2)& (0+255),w,b
 14160  003248  116F               	iorwf	(DELAY_ms@cyclesRequiredForEntireDelay+1)& (0+255),w,b
 14161  00324A  E1F0               	bnz	l1885
 14162  00324C  056E               	decf	DELAY_ms@cyclesRequiredForEntireDelay& (0+255),w,b
 14163  00324E  A0D8               	btfss	status,0,c
 14164  003250  0012               	return	
 14165  003252  D7EC               	goto	l1885
 14166  003254                     __end_of_DELAY_ms:
 14167                           	opt stack 0
 14168                           tblptru	equ	0xFF8
 14169                           tblptrh	equ	0xFF7
 14170                           tblptrl	equ	0xFF6
 14171                           tablat	equ	0xFF5
 14172                           prodh	equ	0xFF4
 14173                           prodl	equ	0xFF3
 14174                           intcon	equ	0xFF2
 14175                           intcon2	equ	0xFF1
 14176                           postinc0	equ	0xFEE
 14177                           wreg	equ	0xFE8
 14178                           indf1	equ	0xFE7
 14179                           postdec1	equ	0xFE5
 14180                           fsr1h	equ	0xFE2
 14181                           fsr1l	equ	0xFE1
 14182                           indf2	equ	0xFDF
 14183                           postinc2	equ	0xFDE
 14184                           postdec2	equ	0xFDD
 14185                           fsr2h	equ	0xFDA
 14186                           fsr2l	equ	0xFD9
 14187                           status	equ	0xFD8
 14188                           
 14189 ;; *************** function ___lmul *****************
 14190 ;; Defined at:
 14191 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 14192 ;; Parameters:    Size  Location     Type
 14193 ;;  multiplier      4    0[BANK0 ] unsigned long 
 14194 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 14195 ;; Auto vars:     Size  Location     Type
 14196 ;;  product         4    8[BANK0 ] unsigned long 
 14197 ;; Return value:  Size  Location     Type
 14198 ;;                  4    0[BANK0 ] unsigned long 
 14199 ;; Registers used:
 14200 ;;		wreg, status,2, status,0
 14201 ;; Tracked objects:
 14202 ;;		On entry : 0/0
 14203 ;;		On exit  : 0/0
 14204 ;;		Unchanged: 0/0
 14205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14206 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14207 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14209 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14210 ;;Total ram usage:       12 bytes
 14211 ;; Hardware stack levels used:    1
 14212 ;; Hardware stack levels required when called:    4
 14213 ;; This function calls:
 14214 ;;		Nothing
 14215 ;; This function is called by:
 14216 ;;		_DELAY_ms
 14217 ;;		_DELAY_10us
 14218 ;; This function uses a non-reentrant model
 14219 ;;
 14220                           
 14221                           	psect	text40
 14222  0036C6                     __ptext40:
 14223                           	opt stack 0
 14224  0036C6                     ___lmul:
 14225                           	opt stack 23
 14226                           
 14227                           ; BSR set to: 0
 14228                           ;incstack = 0
 14229  0036C6  0E00               	movlw	0
 14230  0036C8  0100               	movlb	0	; () banked
 14231  0036CA  6F68               	movwf	___lmul@product& (0+255),b
 14232  0036CC  0E00               	movlw	0
 14233  0036CE  6F69               	movwf	(___lmul@product+1)& (0+255),b
 14234  0036D0  0E00               	movlw	0
 14235  0036D2  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 14236  0036D4  0E00               	movlw	0
 14237  0036D6  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 14238  0036D8                     
 14239                           ; BSR set to: 0
 14240                           
 14241                           ; BSR set to: 0
 14242  0036D8  A160               	btfss	___lmul@multiplier& (0+255),0,b
 14243  0036DA  D008               	goto	l2609
 14244                           
 14245                           ; BSR set to: 0
 14246  0036DC  5164               	movf	___lmul@multiplicand& (0+255),w,b
 14247  0036DE  2768               	addwf	___lmul@product& (0+255),f,b
 14248  0036E0  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 14249  0036E2  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 14250  0036E4  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 14251  0036E6  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 14252  0036E8  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 14253  0036EA  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 14254  0036EC                     l2609:
 14255                           
 14256                           ; BSR set to: 0
 14257                           
 14258                           ; BSR set to: 0
 14259  0036EC  90D8               	bcf	status,0,c
 14260  0036EE  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 14261  0036F0  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 14262  0036F2  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 14263  0036F4  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 14264                           
 14265                           ; BSR set to: 0
 14266  0036F6  90D8               	bcf	status,0,c
 14267  0036F8  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 14268  0036FA  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 14269  0036FC  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 14270  0036FE  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 14271  003700  5160               	movf	___lmul@multiplier& (0+255),w,b
 14272  003702  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 14273  003704  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 14274  003706  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 14275  003708  A4D8               	btfss	status,2,c
 14276  00370A  D7E6               	goto	l2608
 14277                           
 14278                           ; BSR set to: 0
 14279  00370C  C068  F060         	movff	___lmul@product,?___lmul
 14280  003710  C069  F061         	movff	___lmul@product+1,?___lmul+1
 14281  003714  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 14282  003718  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 14283                           
 14284                           ; BSR set to: 0
 14285  00371C  0012               	return		;funcret
 14286  00371E                     __end_of___lmul:
 14287                           	opt stack 0
 14288                           tblptru	equ	0xFF8
 14289                           tblptrh	equ	0xFF7
 14290                           tblptrl	equ	0xFF6
 14291                           tablat	equ	0xFF5
 14292                           prodh	equ	0xFF4
 14293                           prodl	equ	0xFF3
 14294                           intcon	equ	0xFF2
 14295                           intcon2	equ	0xFF1
 14296                           postinc0	equ	0xFEE
 14297                           wreg	equ	0xFE8
 14298                           indf1	equ	0xFE7
 14299                           postdec1	equ	0xFE5
 14300                           fsr1h	equ	0xFE2
 14301                           fsr1l	equ	0xFE1
 14302                           indf2	equ	0xFDF
 14303                           postinc2	equ	0xFDE
 14304                           postdec2	equ	0xFDD
 14305                           fsr2h	equ	0xFDA
 14306                           fsr2l	equ	0xFD9
 14307                           status	equ	0xFD8
 14308                           
 14309 ;; *************** function _LCD_Update *****************
 14310 ;; Defined at:
 14311 ;;		line 113 in file "../src/system_config/miwikit_pic18f46j50_24j40/lcd.c"
 14312 ;; Parameters:    Size  Location     Type
 14313 ;;		None
 14314 ;; Auto vars:     Size  Location     Type
 14315 ;;  i               1    3[BANK0 ] unsigned char 
 14316 ;; Return value:  Size  Location     Type
 14317 ;;                  1    wreg      void 
 14318 ;; Registers used:
 14319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14320 ;; Tracked objects:
 14321 ;;		On entry : 0/0
 14322 ;;		On exit  : 0/0
 14323 ;;		Unchanged: 0/0
 14324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14326 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14328 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14329 ;;Total ram usage:        1 bytes
 14330 ;; Hardware stack levels used:    1
 14331 ;; Hardware stack levels required when called:    6
 14332 ;; This function calls:
 14333 ;;		_LCD_WriteCmd
 14334 ;;		_LCD_WriteData
 14335 ;; This function is called by:
 14336 ;;		_main
 14337 ;;		_Teacher
 14338 ;;		_Student
 14339 ;;		_questionnaire_function
 14340 ;;		_PrintTempLCD
 14341 ;;		_RangeDemo
 14342 ;;		_LCD_Display
 14343 ;;		_Network
 14344 ;; This function uses a non-reentrant model
 14345 ;;
 14346                           
 14347                           	psect	text41
 14348  002FFC                     __ptext41:
 14349                           	opt stack 0
 14350  002FFC                     _LCD_Update:
 14351                           	opt stack 24
 14352                           
 14353                           ;lcd.c: 115: uint8_t i;
 14354                           ;lcd.c: 117: LCD_WriteCmd(0x80 | 0x00);
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;incstack = 0
 14358  002FFC  0E80               	movlw	128
 14359  002FFE  ECE9  F01C         	call	_LCD_WriteCmd
 14360                           
 14361                           ;lcd.c: 119: for(i = 0; i < 16; i++)
 14362  003002  0E00               	movlw	0
 14363  003004  0100               	movlb	0	; () banked
 14364  003006  6F63               	movwf	LCD_Update@i& (0+255),b
 14365  003008                     l19811:
 14366                           
 14367                           ; BSR set to: 0
 14368  003008  0E0F               	movlw	15
 14369  00300A  6563               	cpfsgt	LCD_Update@i& (0+255),b
 14370  00300C  D001               	goto	l1955
 14371  00300E  D01E               	goto	u24150
 14372  003010                     l1955:
 14373                           
 14374                           ; BSR set to: 0
 14375                           ;lcd.c: 120: {
 14376                           ;lcd.c: 121: if( LCDText[i] == 0 )
 14377                           
 14378                           ; BSR set to: 0
 14379  003010  5163               	movf	LCD_Update@i& (0+255),w,b
 14380  003012  0D01               	mullw	1
 14381  003014  0E70               	movlw	low _LCDText
 14382  003016  24F3               	addwf	prodl,w,c
 14383  003018  6ED9               	movwf	fsr2l,c
 14384  00301A  0E01               	movlw	high _LCDText
 14385  00301C  20F4               	addwfc	prodh,w,c
 14386  00301E  6EDA               	movwf	fsr2h,c
 14387  003020  50DF               	movf	indf2,w,c
 14388  003022  A4D8               	btfss	status,2,c
 14389  003024  D004               	goto	l1957
 14390                           
 14391                           ; BSR set to: 0
 14392                           ;lcd.c: 122: {
 14393                           ;lcd.c: 123: LCD_WriteData(' ');
 14394  003026  0E20               	movlw	32
 14395  003028  ECDF  F01C         	call	_LCD_WriteData
 14396                           
 14397                           ;lcd.c: 124: }
 14398  00302C  D00C               	goto	l1958
 14399  00302E                     l1957:
 14400                           
 14401                           ;lcd.c: 125: else
 14402                           ;lcd.c: 126: {
 14403                           ;lcd.c: 127: LCD_WriteData(LCDText[i]);
 14404  00302E  0100               	movlb	0	; () banked
 14405  003030  5163               	movf	LCD_Update@i& (0+255),w,b
 14406  003032  0D01               	mullw	1
 14407  003034  0E70               	movlw	low _LCDText
 14408  003036  24F3               	addwf	prodl,w,c
 14409  003038  6ED9               	movwf	fsr2l,c
 14410  00303A  0E01               	movlw	high _LCDText
 14411  00303C  20F4               	addwfc	prodh,w,c
 14412  00303E  6EDA               	movwf	fsr2h,c
 14413  003040  50DF               	movf	indf2,w,c
 14414  003042  ECDF  F01C         	call	_LCD_WriteData
 14415  003046                     l1958:
 14416  003046  0100               	movlb	0	; () banked
 14417  003048  2B63               	incf	LCD_Update@i& (0+255),f,b
 14418  00304A  D7DE               	goto	l19811
 14419  00304C                     u24150:
 14420                           
 14421                           ; BSR set to: 0
 14422                           ;lcd.c: 128: }
 14423                           ;lcd.c: 129: }
 14424                           ;lcd.c: 131: LCD_WriteCmd(0x80 | 0x40);
 14425                           
 14426                           ; BSR set to: 0
 14427  00304C  0EC0               	movlw	192
 14428  00304E  ECE9  F01C         	call	_LCD_WriteCmd
 14429                           
 14430                           ;lcd.c: 133: for(i = 16; i < 32; i++)
 14431  003052  0E10               	movlw	16
 14432  003054  0100               	movlb	0	; () banked
 14433  003056  6F63               	movwf	LCD_Update@i& (0+255),b
 14434  003058                     l19829:
 14435                           
 14436                           ; BSR set to: 0
 14437  003058  0E1F               	movlw	31
 14438  00305A  6563               	cpfsgt	LCD_Update@i& (0+255),b
 14439  00305C  D001               	goto	l1959
 14440  00305E  0012               	return	
 14441  003060                     l1959:
 14442                           
 14443                           ; BSR set to: 0
 14444                           ;lcd.c: 134: {
 14445                           ;lcd.c: 135: if( LCDText[i] == 0 )
 14446                           
 14447                           ; BSR set to: 0
 14448  003060  5163               	movf	LCD_Update@i& (0+255),w,b
 14449  003062  0D01               	mullw	1
 14450  003064  0E70               	movlw	low _LCDText
 14451  003066  24F3               	addwf	prodl,w,c
 14452  003068  6ED9               	movwf	fsr2l,c
 14453  00306A  0E01               	movlw	high _LCDText
 14454  00306C  20F4               	addwfc	prodh,w,c
 14455  00306E  6EDA               	movwf	fsr2h,c
 14456  003070  50DF               	movf	indf2,w,c
 14457  003072  A4D8               	btfss	status,2,c
 14458  003074  D004               	goto	l1961
 14459                           
 14460                           ; BSR set to: 0
 14461                           ;lcd.c: 136: {
 14462                           ;lcd.c: 137: LCD_WriteData(' ');
 14463  003076  0E20               	movlw	32
 14464  003078  ECDF  F01C         	call	_LCD_WriteData
 14465                           
 14466                           ;lcd.c: 138: }
 14467  00307C  D00C               	goto	l1962
 14468  00307E                     l1961:
 14469                           
 14470                           ;lcd.c: 139: else
 14471                           ;lcd.c: 140: {
 14472                           ;lcd.c: 141: LCD_WriteData(LCDText[i]);
 14473  00307E  0100               	movlb	0	; () banked
 14474  003080  5163               	movf	LCD_Update@i& (0+255),w,b
 14475  003082  0D01               	mullw	1
 14476  003084  0E70               	movlw	low _LCDText
 14477  003086  24F3               	addwf	prodl,w,c
 14478  003088  6ED9               	movwf	fsr2l,c
 14479  00308A  0E01               	movlw	high _LCDText
 14480  00308C  20F4               	addwfc	prodh,w,c
 14481  00308E  6EDA               	movwf	fsr2h,c
 14482  003090  50DF               	movf	indf2,w,c
 14483  003092  ECDF  F01C         	call	_LCD_WriteData
 14484  003096                     l1962:
 14485  003096  0100               	movlb	0	; () banked
 14486  003098  2B63               	incf	LCD_Update@i& (0+255),f,b
 14487  00309A  D7DE               	goto	l19829
 14488  00309C                     __end_of_LCD_Update:
 14489                           	opt stack 0
 14490                           tblptru	equ	0xFF8
 14491                           tblptrh	equ	0xFF7
 14492                           tblptrl	equ	0xFF6
 14493                           tablat	equ	0xFF5
 14494                           prodh	equ	0xFF4
 14495                           prodl	equ	0xFF3
 14496                           intcon	equ	0xFF2
 14497                           intcon2	equ	0xFF1
 14498                           postinc0	equ	0xFEE
 14499                           wreg	equ	0xFE8
 14500                           indf1	equ	0xFE7
 14501                           postdec1	equ	0xFE5
 14502                           fsr1h	equ	0xFE2
 14503                           fsr1l	equ	0xFE1
 14504                           indf2	equ	0xFDF
 14505                           postinc2	equ	0xFDE
 14506                           postdec2	equ	0xFDD
 14507                           fsr2h	equ	0xFDA
 14508                           fsr2l	equ	0xFD9
 14509                           status	equ	0xFD8
 14510                           
 14511 ;; *************** function _LCD_WriteData *****************
 14512 ;; Defined at:
 14513 ;;		line 42 in file "../src/system_config/miwikit_pic18f46j50_24j40/lcd.c"
 14514 ;; Parameters:    Size  Location     Type
 14515 ;;  data            1    wreg     unsigned char 
 14516 ;; Auto vars:     Size  Location     Type
 14517 ;;  data            1    2[BANK0 ] unsigned char 
 14518 ;; Return value:  Size  Location     Type
 14519 ;;                  1    wreg      void 
 14520 ;; Registers used:
 14521 ;;		wreg, status,2, cstack
 14522 ;; Tracked objects:
 14523 ;;		On entry : 0/0
 14524 ;;		On exit  : 0/0
 14525 ;;		Unchanged: 0/0
 14526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14528 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14530 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14531 ;;Total ram usage:        1 bytes
 14532 ;; Hardware stack levels used:    1
 14533 ;; Hardware stack levels required when called:    5
 14534 ;; This function calls:
 14535 ;;		_SPIPut2
 14536 ;; This function is called by:
 14537 ;;		_LCD_Update
 14538 ;; This function uses a non-reentrant model
 14539 ;;
 14540                           
 14541                           	psect	text42
 14542  0039BE                     __ptext42:
 14543                           	opt stack 0
 14544  0039BE                     _LCD_WriteData:
 14545                           	opt stack 24
 14546                           
 14547                           ; BSR set to: 0
 14548                           ;incstack = 0
 14549                           ;LCD_WriteData@data stored from wreg
 14550  0039BE  0100               	movlb	0	; () banked
 14551  0039C0  6F62               	movwf	LCD_WriteData@data& (0+255),b
 14552                           
 14553                           ;lcd.c: 44: LATDbits.LATD7 = 0;
 14554  0039C2  9E8C               	bcf	3980,7,c	;volatile
 14555                           
 14556                           ;lcd.c: 45: LATDbits.LATD3 = 1;
 14557  0039C4  868C               	bsf	3980,3,c	;volatile
 14558                           
 14559                           ;lcd.c: 47: SPIPut2(data);
 14560  0039C6  0100               	movlb	0	; () banked
 14561  0039C8  5162               	movf	LCD_WriteData@data& (0+255),w,b
 14562  0039CA  ECC4  F01C         	call	_SPIPut2
 14563                           
 14564                           ;lcd.c: 49: LATDbits.LATD7 = 1;
 14565  0039CE  8E8C               	bsf	3980,7,c	;volatile
 14566  0039D0  0012               	return		;funcret
 14567  0039D2                     __end_of_LCD_WriteData:
 14568                           	opt stack 0
 14569                           tblptru	equ	0xFF8
 14570                           tblptrh	equ	0xFF7
 14571                           tblptrl	equ	0xFF6
 14572                           tablat	equ	0xFF5
 14573                           prodh	equ	0xFF4
 14574                           prodl	equ	0xFF3
 14575                           intcon	equ	0xFF2
 14576                           intcon2	equ	0xFF1
 14577                           postinc0	equ	0xFEE
 14578                           wreg	equ	0xFE8
 14579                           indf1	equ	0xFE7
 14580                           postdec1	equ	0xFE5
 14581                           fsr1h	equ	0xFE2
 14582                           fsr1l	equ	0xFE1
 14583                           indf2	equ	0xFDF
 14584                           postinc2	equ	0xFDE
 14585                           postdec2	equ	0xFDD
 14586                           fsr2h	equ	0xFDA
 14587                           fsr2l	equ	0xFD9
 14588                           status	equ	0xFD8
 14589                           
 14590 ;; *************** function _LCD_WriteCmd *****************
 14591 ;; Defined at:
 14592 ;;		line 31 in file "../src/system_config/miwikit_pic18f46j50_24j40/lcd.c"
 14593 ;; Parameters:    Size  Location     Type
 14594 ;;  data            1    wreg     unsigned char 
 14595 ;; Auto vars:     Size  Location     Type
 14596 ;;  data            1    2[BANK0 ] unsigned char 
 14597 ;; Return value:  Size  Location     Type
 14598 ;;                  1    wreg      void 
 14599 ;; Registers used:
 14600 ;;		wreg, status,2, cstack
 14601 ;; Tracked objects:
 14602 ;;		On entry : 0/0
 14603 ;;		On exit  : 0/0
 14604 ;;		Unchanged: 0/0
 14605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14607 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14609 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14610 ;;Total ram usage:        1 bytes
 14611 ;; Hardware stack levels used:    1
 14612 ;; Hardware stack levels required when called:    5
 14613 ;; This function calls:
 14614 ;;		_SPIPut2
 14615 ;; This function is called by:
 14616 ;;		_LCD_Initialize
 14617 ;;		_LCD_Update
 14618 ;;		_LCD_Erase
 14619 ;; This function uses a non-reentrant model
 14620 ;;
 14621                           
 14622                           	psect	text43
 14623  0039D2                     __ptext43:
 14624                           	opt stack 0
 14625  0039D2                     _LCD_WriteCmd:
 14626                           	opt stack 23
 14627                           
 14628                           ;incstack = 0
 14629                           ;LCD_WriteCmd@data stored from wreg
 14630  0039D2  0100               	movlb	0	; () banked
 14631  0039D4  6F62               	movwf	LCD_WriteCmd@data& (0+255),b
 14632                           
 14633                           ;lcd.c: 33: LATDbits.LATD7 = 0;
 14634  0039D6  9E8C               	bcf	3980,7,c	;volatile
 14635                           
 14636                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 14637  0039D8  968C               	bcf	3980,3,c	;volatile
 14638                           
 14639                           ;lcd.c: 36: SPIPut2(data);
 14640  0039DA  0100               	movlb	0	; () banked
 14641  0039DC  5162               	movf	LCD_WriteCmd@data& (0+255),w,b
 14642  0039DE  ECC4  F01C         	call	_SPIPut2
 14643                           
 14644                           ;lcd.c: 38: LATDbits.LATD7 = 1;
 14645  0039E2  8E8C               	bsf	3980,7,c	;volatile
 14646  0039E4  0012               	return		;funcret
 14647  0039E6                     __end_of_LCD_WriteCmd:
 14648                           	opt stack 0
 14649                           tblptru	equ	0xFF8
 14650                           tblptrh	equ	0xFF7
 14651                           tblptrl	equ	0xFF6
 14652                           tablat	equ	0xFF5
 14653                           prodh	equ	0xFF4
 14654                           prodl	equ	0xFF3
 14655                           intcon	equ	0xFF2
 14656                           intcon2	equ	0xFF1
 14657                           postinc0	equ	0xFEE
 14658                           wreg	equ	0xFE8
 14659                           indf1	equ	0xFE7
 14660                           postdec1	equ	0xFE5
 14661                           fsr1h	equ	0xFE2
 14662                           fsr1l	equ	0xFE1
 14663                           indf2	equ	0xFDF
 14664                           postinc2	equ	0xFDE
 14665                           postdec2	equ	0xFDD
 14666                           fsr2h	equ	0xFDA
 14667                           fsr2l	equ	0xFD9
 14668                           status	equ	0xFD8
 14669                           
 14670 ;; *************** function _SPIPut2 *****************
 14671 ;; Defined at:
 14672 ;;		line 144 in file "../src/system_config/miwikit_pic18f46j50_24j40/spi.c"
 14673 ;; Parameters:    Size  Location     Type
 14674 ;;  v               1    wreg     unsigned char 
 14675 ;; Auto vars:     Size  Location     Type
 14676 ;;  v               1    1[BANK0 ] unsigned char 
 14677 ;;  i               1    0[BANK0 ] unsigned char 
 14678 ;; Return value:  Size  Location     Type
 14679 ;;                  1    wreg      void 
 14680 ;; Registers used:
 14681 ;;		wreg
 14682 ;; Tracked objects:
 14683 ;;		On entry : 0/0
 14684 ;;		On exit  : 0/0
 14685 ;;		Unchanged: 0/0
 14686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14688 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14690 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14691 ;;Total ram usage:        2 bytes
 14692 ;; Hardware stack levels used:    1
 14693 ;; Hardware stack levels required when called:    4
 14694 ;; This function calls:
 14695 ;;		Nothing
 14696 ;; This function is called by:
 14697 ;;		_LCD_WriteCmd
 14698 ;;		_LCD_WriteData
 14699 ;;		_EEPROMRead
 14700 ;;		_SSTRead
 14701 ;;		_SSTWrite
 14702 ;;		_SSTGetID
 14703 ;;		_SPIGet2
 14704 ;; This function uses a non-reentrant model
 14705 ;;
 14706                           
 14707                           	psect	text44
 14708  003988                     __ptext44:
 14709                           	opt stack 0
 14710  003988                     _SPIPut2:
 14711                           	opt stack 23
 14712                           
 14713                           ;incstack = 0
 14714                           ;SPIPut2@v stored from wreg
 14715  003988  0100               	movlb	0	; () banked
 14716  00398A  6F61               	movwf	SPIPut2@v& (0+255),b
 14717                           
 14718                           ;spi.c: 165: uint8_t i;
 14719                           ;spi.c: 166: PIR3bits.SSP2IF = 0;
 14720  00398C  9EA4               	bcf	4004,7,c	;volatile
 14721                           
 14722                           ;spi.c: 168: i = SSP2BUF;
 14723  00398E  CF75 F060          	movff	3957,SPIPut2@i	;volatile
 14724  003992                     l2030:
 14725                           
 14726                           ;spi.c: 170: {
 14727                           ;spi.c: 172: SSP2CON1bits.WCOL = 0;
 14728  003992  9E72               	bcf	3954,7,c	;volatile
 14729                           
 14730                           ;spi.c: 174: SSP2BUF = v;
 14731  003994  C061  FF75         	movff	SPIPut2@v,3957	;volatile
 14732                           
 14733                           ;spi.c: 177: } while( SSP2CON1bits.WCOL );
 14734  003998  BE72               	btfsc	3954,7,c	;volatile
 14735  00399A  D7FB               	goto	l2030
 14736  00399C                     u21670:
 14737                           
 14738                           ;spi.c: 181: while( PIR3bits.SSP2IF == 0 );
 14739  00399C  AEA4               	btfss	4004,7,c	;volatile
 14740  00399E  D7FE               	goto	u21670
 14741                           
 14742                           ;spi.c: 185: PIR3bits.SSP2IF = 0;
 14743  0039A0  9EA4               	bcf	4004,7,c	;volatile
 14744  0039A2  0012               	return		;funcret
 14745  0039A4                     __end_of_SPIPut2:
 14746                           	opt stack 0
 14747                           tblptru	equ	0xFF8
 14748                           tblptrh	equ	0xFF7
 14749                           tblptrl	equ	0xFF6
 14750                           tablat	equ	0xFF5
 14751                           prodh	equ	0xFF4
 14752                           prodl	equ	0xFF3
 14753                           intcon	equ	0xFF2
 14754                           intcon2	equ	0xFF1
 14755                           postinc0	equ	0xFEE
 14756                           wreg	equ	0xFE8
 14757                           indf1	equ	0xFE7
 14758                           postdec1	equ	0xFE5
 14759                           fsr1h	equ	0xFE2
 14760                           fsr1l	equ	0xFE1
 14761                           indf2	equ	0xFDF
 14762                           postinc2	equ	0xFDE
 14763                           postdec2	equ	0xFDD
 14764                           fsr2h	equ	0xFDA
 14765                           fsr2l	equ	0xFD9
 14766                           status	equ	0xFD8
 14767                           
 14768 ;; *************** function _high_isr *****************
 14769 ;; Defined at:
 14770 ;;		line 1856 in file "../../../framework/driver/mrf_miwi/src/drv_mrf_miwi_24j40.c"
 14771 ;; Parameters:    Size  Location     Type
 14772 ;;		None
 14773 ;; Auto vars:     Size  Location     Type
 14774 ;;  results         1   35[COMRAM] struct _DRIVER_UINT8_UNI
 14775 ;;  RxBank          1   40[COMRAM] unsigned char 
 14776 ;;  flags           2   38[COMRAM] struct .
 14777 ;;  temp            2   33[COMRAM] unsigned int 
 14778 ;;  temp            2   31[COMRAM] unsigned int 
 14779 ;;  i               1   41[COMRAM] unsigned char 
 14780 ;;  pwm_value_hi    2   36[COMRAM] unsigned int 
 14781 ;; Return value:  Size  Location     Type
 14782 ;;                  1    wreg      void 
 14783 ;; Registers used:
 14784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14785 ;; Tracked objects:
 14786 ;;		On entry : 0/0
 14787 ;;		On exit  : 0/0
 14788 ;;		Unchanged: 0/0
 14789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14791 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14792 ;;      Temps:         23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14793 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14794 ;;Total ram usage:       34 bytes
 14795 ;; Hardware stack levels used:    1
 14796 ;; Hardware stack levels required when called:    3
 14797 ;; This function calls:
 14798 ;;		_PHYGetLongRAMAddr
 14799 ;;		_PHYGetShortRAMAddr
 14800 ;;		_PHYSetShortRAMAddr
 14801 ;;		_UserInterruptHandler
 14802 ;; This function is called by:
 14803 ;;		Interrupt level 2
 14804 ;; This function uses a non-reentrant model
 14805 ;;
 14806                           
 14807                           	psect	intcode
 14808  000008                     __pintcode:
 14809                           	opt stack 0
 14810  000008                     _high_isr:
 14811                           	opt stack 21
 14812                           
 14813                           ;incstack = 0
 14814  000008  8255               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14815  00000A  CFFA F00E          	movff	pclath,??_high_isr+5
 14816  00000E  CFFB F00F          	movff	pclatu,??_high_isr+6
 14817  000012  CFE9 F010          	movff	fsr0l,??_high_isr+7
 14818  000016  CFEA F011          	movff	fsr0h,??_high_isr+8
 14819  00001A  CFE1 F012          	movff	fsr1l,??_high_isr+9
 14820  00001E  CFE2 F013          	movff	fsr1h,??_high_isr+10
 14821  000022  CFD9 F014          	movff	fsr2l,??_high_isr+11
 14822  000026  CFDA F015          	movff	fsr2h,??_high_isr+12
 14823  00002A  CFF3 F016          	movff	prodl,??_high_isr+13
 14824  00002E  CFF4 F017          	movff	prodh,??_high_isr+14
 14825  000032  CFF6 F018          	movff	tblptrl,??_high_isr+15
 14826  000036  CFF7 F019          	movff	tblptrh,??_high_isr+16
 14827  00003A  CFF8 F01A          	movff	tblptru,??_high_isr+17
 14828  00003E  CFF5 F01B          	movff	tablat,??_high_isr+18
 14829  000042  C055  F01C         	movff	btemp,??_high_isr+19
 14830  000046  C056  F01D         	movff	btemp+1,??_high_isr+20
 14831  00004A  C057  F01E         	movff	btemp+2,??_high_isr+21
 14832  00004E  C058  F01F         	movff	btemp+3,??_high_isr+22
 14833                           
 14834                           ;drv_mrf_miwi_24j40.c: 1873: if (PIR3bits.TMR4IF) {
 14835  000052  A6A4               	btfss	4004,3,c	;volatile
 14836  000054  D00F               	goto	i2l956
 14837                           
 14838                           ;drv_mrf_miwi_24j40.c: 1874: LATBbits.LATB2=BuzzerStatus;
 14839  000056  0101               	movlb	1	; () banked
 14840  000058  B139               	btfsc	_BuzzerStatus& (0+255),0,b
 14841  00005A  D002               	bra	i2u2029_45
 14842  00005C  948A               	bcf	3978,2,c	;volatile
 14843  00005E  D001               	bra	i2u2029_46
 14844  000060                     i2u2029_45:
 14845  000060  848A               	bsf	3978,2,c	;volatile
 14846  000062                     i2u2029_46:
 14847                           
 14848                           ;drv_mrf_miwi_24j40.c: 1875: BuzzerStatus = !BuzzerStatus;
 14849  000062  0101               	movlb	1	; () banked
 14850  000064  5139               	movf	_BuzzerStatus& (0+255),w,b
 14851  000066  A4D8               	btfss	status,2,c
 14852  000068  D002               	goto	i2u2030_40
 14853  00006A  0E01               	movlw	1
 14854  00006C  D001               	goto	i2u2031_40
 14855  00006E                     i2u2030_40:
 14856  00006E  0E00               	movlw	0
 14857  000070                     i2u2031_40:
 14858  000070  6F39               	movwf	_BuzzerStatus& (0+255),b
 14859                           
 14860                           ; BSR set to: 1
 14861                           ;drv_mrf_miwi_24j40.c: 1876: PIR3bits.TMR4IF = 0;
 14862  000072  96A4               	bcf	4004,3,c	;volatile
 14863  000074                     i2l956:
 14864                           
 14865                           ;drv_mrf_miwi_24j40.c: 1877: }
 14866                           ;drv_mrf_miwi_24j40.c: 1879: if(TMR3IF){
 14867                           
 14868                           ; BSR set to: 1
 14869  000074  A2A1               	btfss	4001,1,c	;volatile
 14870  000076  D032               	goto	i2l961
 14871                           
 14872                           ;drv_mrf_miwi_24j40.c: 1880: uint16_t pwm_value_high_time = 800;
 14873  000078  0E03               	movlw	3
 14874  00007A  6E26               	movwf	high_isr@pwm_value_high_time+1,c
 14875  00007C  0E20               	movlw	32
 14876  00007E  6E25               	movwf	high_isr@pwm_value_high_time,c
 14877                           
 14878                           ;drv_mrf_miwi_24j40.c: 1881: static bool u;
 14879                           ;drv_mrf_miwi_24j40.c: 1882: if(u){
 14880  000080  0101               	movlb	1	; () banked
 14881  000082  5136               	movf	high_isr@u& (0+255),w,b
 14882  000084  B4D8               	btfsc	status,2,c
 14883  000086  D01C               	goto	i2l960
 14884                           
 14885                           ; BSR set to: 1
 14886                           ;drv_mrf_miwi_24j40.c: 1884: u = 0;
 14887  000088  0E00               	movlw	0
 14888  00008A  6F36               	movwf	high_isr@u& (0+255),b
 14889                           
 14890                           ; BSR set to: 1
 14891                           ;drv_mrf_miwi_24j40.c: 1885: uint16_t temp = 65536 - (pwm_value_high_time + 2600);
 14892  00008C  0E28               	movlw	40
 14893  00008E  6E09               	movwf	??_high_isr& (0+255),c
 14894  000090  0E0A               	movlw	10
 14895  000092  6E0A               	movwf	(??_high_isr+1)& (0+255),c
 14896  000094  C025  F00B         	movff	high_isr@pwm_value_high_time,??_high_isr+2
 14897  000098  C026  F00C         	movff	high_isr@pwm_value_high_time+1,??_high_isr+3
 14898  00009C  5009               	movf	??_high_isr,w,c
 14899  00009E  260B               	addwf	??_high_isr+2,f,c
 14900  0000A0  500A               	movf	??_high_isr+1,w,c
 14901  0000A2  220C               	addwfc	??_high_isr+3,f,c
 14902  0000A4  1E0B               	comf	??_high_isr+2,f,c
 14903  0000A6  1E0C               	comf	??_high_isr+3,f,c
 14904  0000A8  4A0B               	infsnz	??_high_isr+2,f,c
 14905  0000AA  2A0C               	incf	??_high_isr+3,f,c
 14906  0000AC  C00B  F020         	movff	??_high_isr+2,high_isr@temp
 14907  0000B0  C00C  F021         	movff	??_high_isr+3,high_isr@temp+1
 14908                           
 14909                           ; BSR set to: 1
 14910                           ;drv_mrf_miwi_24j40.c: 1886: LATAbits.LATA7 = 0;
 14911  0000B4  9E89               	bcf	3977,7,c	;volatile
 14912                           
 14913                           ; BSR set to: 1
 14914                           ;drv_mrf_miwi_24j40.c: 1887: TMR3 = temp;
 14915  0000B6  C020  FF7A         	movff	high_isr@temp,3962	;volatile
 14916  0000BA  C021  FF7B         	movff	high_isr@temp+1,3963	;volatile
 14917  0000BE  D00D               	goto	i2l17409
 14918  0000C0                     i2l960:
 14919                           
 14920                           ; BSR set to: 1
 14921                           ;drv_mrf_miwi_24j40.c: 1890: u = 1;
 14922                           
 14923                           ; BSR set to: 1
 14924  0000C0  0E01               	movlw	1
 14925  0000C2  6F36               	movwf	high_isr@u& (0+255),b
 14926                           
 14927                           ; BSR set to: 1
 14928                           ;drv_mrf_miwi_24j40.c: 1891: uint16_t temp = 25536 + (pwm_value_high_time + 2600);
 14929  0000C4  0EE8               	movlw	232
 14930  0000C6  2425               	addwf	high_isr@pwm_value_high_time,w,c
 14931  0000C8  6E22               	movwf	high_isr@temp_2151,c
 14932  0000CA  0E6D               	movlw	109
 14933  0000CC  2026               	addwfc	high_isr@pwm_value_high_time+1,w,c
 14934  0000CE  6E23               	movwf	high_isr@temp_2151+1,c
 14935                           
 14936                           ; BSR set to: 1
 14937                           ;drv_mrf_miwi_24j40.c: 1892: LATAbits.LATA7 = 1;
 14938  0000D0  8E89               	bsf	3977,7,c	;volatile
 14939                           
 14940                           ; BSR set to: 1
 14941                           ;drv_mrf_miwi_24j40.c: 1893: TMR3 = temp;
 14942  0000D2  C022  FF7A         	movff	high_isr@temp_2151,3962	;volatile
 14943  0000D6  C023  FF7B         	movff	high_isr@temp_2151+1,3963	;volatile
 14944  0000DA                     i2l17409:
 14945                           
 14946                           ; BSR set to: 1
 14947                           ;drv_mrf_miwi_24j40.c: 1894: TMR3IF = 0;
 14948  0000DA  92A1               	bcf	4001,1,c	;volatile
 14949  0000DC                     i2l961:
 14950                           
 14951                           ;drv_mrf_miwi_24j40.c: 1897: }
 14952                           ;drv_mrf_miwi_24j40.c: 1899: }
 14953                           ;drv_mrf_miwi_24j40.c: 1902: if (INTCONbits.INT0IE && INTCONbits.INT0IF)
 14954                           
 14955                           ; BSR set to: 1
 14956                           
 14957                           ; BSR set to: 1
 14958  0000DC  B8F2               	btfsc	intcon,4,c	;volatile
 14959  0000DE  A2F2               	btfss	intcon,1,c	;volatile
 14960  0000E0  D0AB               	goto	i2l978
 14961                           
 14962                           ;drv_mrf_miwi_24j40.c: 1903: {
 14963                           ;drv_mrf_miwi_24j40.c: 1904: uint8_t i;
 14964                           ;drv_mrf_miwi_24j40.c: 1908: INTCONbits.INT0IF = 0;
 14965  0000E2  92F2               	bcf	intcon,1,c	;volatile
 14966                           
 14967                           ;drv_mrf_miwi_24j40.c: 1912: {
 14968                           ;drv_mrf_miwi_24j40.c: 1913: MRF24J40_IFREG flags;
 14969                           ;drv_mrf_miwi_24j40.c: 1916: flags.Val = PHYGetShortRAMAddr((0x62));
 14970  0000E4  0E62               	movlw	98
 14971  0000E6  EC63  F01C         	call	_PHYGetShortRAMAddr
 14972  0000EA  6E27               	movwf	high_isr@flags,c
 14973                           
 14974                           ;drv_mrf_miwi_24j40.c: 1918: if (flags.bits.RF_TXIF)
 14975  0000EC  A027               	btfss	high_isr@flags,0,c
 14976  0000EE  D011               	goto	i2l965
 14977                           
 14978                           ;drv_mrf_miwi_24j40.c: 1919: {
 14979                           ;drv_mrf_miwi_24j40.c: 1922: MRF24J40Status.bits.TX_BUSY = 0;
 14980  0000F0  9045               	bcf	_MRF24J40Status,0,c	;volatile
 14981                           
 14982                           ;drv_mrf_miwi_24j40.c: 1924: if (MRF24J40Status.bits.SEC_IF)
 14983  0000F2  BC45               	btfsc	_MRF24J40Status,6,c	;volatile
 14984                           
 14985                           ;drv_mrf_miwi_24j40.c: 1925: {
 14986                           ;drv_mrf_miwi_24j40.c: 1926: MRF24J40Status.bits.SEC_IF = 0;
 14987  0000F4  9C45               	bcf	_MRF24J40Status,6,c	;volatile
 14988                           
 14989                           ;drv_mrf_miwi_24j40.c: 1927: }
 14990                           ;drv_mrf_miwi_24j40.c: 1929: failureCounter = 0;
 14991  0000F6  0E00               	movlw	0
 14992  0000F8  0101               	movlb	1	; () banked
 14993  0000FA  6F30               	movwf	(_failureCounter+1)& (0+255),b	;volatile
 14994  0000FC  0E00               	movlw	0
 14995  0000FE  6F2F               	movwf	_failureCounter& (0+255),b	;volatile
 14996                           
 14997                           ; BSR set to: 1
 14998                           ;drv_mrf_miwi_24j40.c: 1933: if (MRF24J40Status.bits.TX_PENDING_ACK)
 14999  000100  A245               	btfss	_MRF24J40Status,1,c	;volatile
 15000  000102  D007               	goto	i2l965
 15001                           
 15002                           ; BSR set to: 1
 15003                           ;drv_mrf_miwi_24j40.c: 1934: {
 15004                           ;drv_mrf_miwi_24j40.c: 1935: DRIVER_UINT8_UNION results;
 15005                           ;drv_mrf_miwi_24j40.c: 1938: results.Val = PHYGetShortRAMAddr((0x48));
 15006  000104  0E48               	movlw	72
 15007  000106  EC63  F01C         	call	_PHYGetShortRAMAddr
 15008  00010A  6E24               	movwf	high_isr@results,c
 15009                           
 15010                           ;drv_mrf_miwi_24j40.c: 1940: if (results.bits.b0 == 1)
 15011  00010C  B024               	btfsc	high_isr@results,0,c
 15012                           
 15013                           ;drv_mrf_miwi_24j40.c: 1941: {
 15014                           ;drv_mrf_miwi_24j40.c: 1944: MRF24J40Status.bits.TX_FAIL = 1;
 15015  00010E  8445               	bsf	_MRF24J40Status,2,c	;volatile
 15016                           
 15017                           ;drv_mrf_miwi_24j40.c: 1945: }
 15018                           ;drv_mrf_miwi_24j40.c: 1949: MRF24J40Status.bits.TX_PENDING_ACK = 0;
 15019  000110  9245               	bcf	_MRF24J40Status,1,c	;volatile
 15020  000112                     i2l965:
 15021                           
 15022                           ;drv_mrf_miwi_24j40.c: 1951: }
 15023                           ;drv_mrf_miwi_24j40.c: 1953: }
 15024                           ;drv_mrf_miwi_24j40.c: 1955: if (flags.bits.RF_RXIF)
 15025  000112  A627               	btfss	high_isr@flags,3,c
 15026  000114  D08A               	goto	i2l977
 15027                           
 15028                           ;drv_mrf_miwi_24j40.c: 1956: {
 15029                           ;drv_mrf_miwi_24j40.c: 1957: uint8_t RxBank = 0xFF;
 15030  000116  6829               	setf	high_isr@RxBank,c
 15031                           
 15032                           ;drv_mrf_miwi_24j40.c: 1959: for (i = 0; i < 2; i++)
 15033  000118  0E00               	movlw	0
 15034  00011A  6E2A               	movwf	high_isr@i,c
 15035  00011C                     i2l17439:
 15036  00011C  0E01               	movlw	1
 15037  00011E  642A               	cpfsgt	high_isr@i,c
 15038  000120  D001               	goto	i2l968
 15039  000122  D010               	goto	i2u2043_40
 15040  000124                     i2l968:
 15041                           
 15042                           ;drv_mrf_miwi_24j40.c: 1960: {
 15043                           ;drv_mrf_miwi_24j40.c: 1961: if (RxBuffer[i].PayloadLen == 0)
 15044  000124  502A               	movf	high_isr@i,w,c
 15045  000126  0D50               	mullw	80
 15046  000128  0E1E               	movlw	low _RxBuffer
 15047  00012A  24F3               	addwf	prodl,w,c
 15048  00012C  6ED9               	movwf	fsr2l,c
 15049  00012E  0E03               	movlw	high _RxBuffer
 15050  000130  20F4               	addwfc	prodh,w,c
 15051  000132  6EDA               	movwf	fsr2h,c
 15052  000134  50DF               	movf	indf2,w,c
 15053  000136  A4D8               	btfss	status,2,c
 15054  000138  D003               	goto	i2l970
 15055                           
 15056                           ;drv_mrf_miwi_24j40.c: 1962: {
 15057                           ;drv_mrf_miwi_24j40.c: 1963: RxBank = i;
 15058  00013A  C02A  F029         	movff	high_isr@i,high_isr@RxBank
 15059                           
 15060                           ;drv_mrf_miwi_24j40.c: 1964: break;
 15061  00013E  D002               	goto	i2u2043_40
 15062  000140                     i2l970:
 15063  000140  2A2A               	incf	high_isr@i,f,c
 15064  000142  D7EC               	goto	i2l17439
 15065  000144                     i2u2043_40:
 15066                           
 15067                           ;drv_mrf_miwi_24j40.c: 1965: }
 15068                           ;drv_mrf_miwi_24j40.c: 1966: }
 15069                           ;drv_mrf_miwi_24j40.c: 1969: if (RxBank < 2)
 15070  000144  0E02               	movlw	2
 15071  000146  6029               	cpfslt	high_isr@RxBank,c
 15072  000148  D06B               	goto	i2l971
 15073                           
 15074                           ;drv_mrf_miwi_24j40.c: 1970: {
 15075                           ;drv_mrf_miwi_24j40.c: 1976: PHYSetShortRAMAddr((0x73), 0x04);
 15076  00014A  0E04               	movlw	4
 15077  00014C  6E03               	movwf	PHYSetShortRAMAddr@value,c
 15078  00014E  0E73               	movlw	115
 15079  000150  EC8C  F01C         	call	_PHYSetShortRAMAddr
 15080                           
 15081                           ;drv_mrf_miwi_24j40.c: 1980: RxBuffer[RxBank].PayloadLen = PHYGetLongRAMAddr(0x300) + 2;
 15082  000154  5029               	movf	high_isr@RxBank,w,c
 15083  000156  0D50               	mullw	80
 15084  000158  0E1E               	movlw	low _RxBuffer
 15085  00015A  24F3               	addwf	prodl,w,c
 15086  00015C  6ED9               	movwf	fsr2l,c
 15087  00015E  0E03               	movlw	high _RxBuffer
 15088  000160  20F4               	addwfc	prodh,w,c
 15089  000162  6EDA               	movwf	fsr2h,c
 15090  000164  0E03               	movlw	3
 15091  000166  6E04               	movwf	PHYGetLongRAMAddr@address+1,c
 15092  000168  0E00               	movlw	0
 15093  00016A  6E03               	movwf	PHYGetLongRAMAddr@address,c
 15094  00016C  ECBA  F01B         	call	_PHYGetLongRAMAddr	;wreg free
 15095  000170  0F02               	addlw	2
 15096  000172  6EDF               	movwf	indf2,c
 15097                           
 15098                           ;drv_mrf_miwi_24j40.c: 1981: if (RxBuffer[RxBank].PayloadLen < (40+11+8+8+12))
 15099  000174  5029               	movf	high_isr@RxBank,w,c
 15100  000176  0D50               	mullw	80
 15101  000178  0E1E               	movlw	low _RxBuffer
 15102  00017A  24F3               	addwf	prodl,w,c
 15103  00017C  6ED9               	movwf	fsr2l,c
 15104  00017E  0E03               	movlw	high _RxBuffer
 15105  000180  20F4               	addwfc	prodh,w,c
 15106  000182  6EDA               	movwf	fsr2h,c
 15107  000184  0E4F               	movlw	79
 15108  000186  60DF               	cpfslt	indf2,c
 15109  000188  D040               	goto	i2l972
 15110                           
 15111                           ;drv_mrf_miwi_24j40.c: 1982: {
 15112                           ;drv_mrf_miwi_24j40.c: 1984: MRF24J40Status.bits.RX_BUFFERED = 1;
 15113  00018A  8A45               	bsf	_MRF24J40Status,5,c	;volatile
 15114                           
 15115                           ;drv_mrf_miwi_24j40.c: 1987: for (i = 1; i <= RxBuffer[RxBank].PayloadLen + 2; i++)
 15116  00018C  0E01               	movlw	1
 15117  00018E  6E2A               	movwf	high_isr@i,c
 15118  000190  D01A               	goto	i2l973
 15119  000192                     
 15120                           ;drv_mrf_miwi_24j40.c: 1988: {
 15121                           ;drv_mrf_miwi_24j40.c: 1989: RxBuffer[RxBank].Payload[i - 1] = PHYGetLongRAMAddr(0x300 +
      +                           i);
 15122  000192  5029               	movf	high_isr@RxBank,w,c
 15123  000194  0D50               	mullw	80
 15124  000196  0E1E               	movlw	low _RxBuffer
 15125  000198  6E09               	movwf	??_high_isr& (0+255),c
 15126  00019A  0E03               	movlw	high _RxBuffer
 15127  00019C  6E0A               	movwf	(??_high_isr+1)& (0+255),c
 15128  00019E  50F3               	movf	prodl,w,c
 15129  0001A0  2609               	addwf	??_high_isr,f,c
 15130  0001A2  50F4               	movf	prodh,w,c
 15131  0001A4  220A               	addwfc	??_high_isr+1,f,c
 15132  0001A6  502A               	movf	high_isr@i,w,c
 15133  0001A8  2409               	addwf	??_high_isr,w,c
 15134  0001AA  6ED9               	movwf	fsr2l,c
 15135  0001AC  0E00               	movlw	0
 15136  0001AE  200A               	addwfc	??_high_isr+1,w,c
 15137  0001B0  6EDA               	movwf	fsr2h,c
 15138  0001B2  0E00               	movlw	0
 15139  0001B4  242A               	addwf	high_isr@i,w,c
 15140  0001B6  6E03               	movwf	PHYGetLongRAMAddr@address,c
 15141  0001B8  6A04               	clrf	PHYGetLongRAMAddr@address+1,c
 15142  0001BA  0E03               	movlw	3
 15143  0001BC  2204               	addwfc	PHYGetLongRAMAddr@address+1,f,c
 15144  0001BE  ECBA  F01B         	call	_PHYGetLongRAMAddr	;wreg free
 15145  0001C2  6EDF               	movwf	indf2,c
 15146  0001C4  2A2A               	incf	high_isr@i,f,c
 15147  0001C6                     i2l973:
 15148  0001C6  502A               	movf	high_isr@i,w,c
 15149  0001C8  6E09               	movwf	??_high_isr& (0+255),c
 15150  0001CA  6A0A               	clrf	(??_high_isr+1)& (0+255),c
 15151  0001CC  5029               	movf	high_isr@RxBank,w,c
 15152  0001CE  0D50               	mullw	80
 15153  0001D0  0E1E               	movlw	low _RxBuffer
 15154  0001D2  24F3               	addwf	prodl,w,c
 15155  0001D4  6ED9               	movwf	fsr2l,c
 15156  0001D6  0E03               	movlw	high _RxBuffer
 15157  0001D8  20F4               	addwfc	prodh,w,c
 15158  0001DA  6EDA               	movwf	fsr2h,c
 15159  0001DC  50DF               	movf	indf2,w,c
 15160  0001DE  6E0B               	movwf	(??_high_isr+2)& (0+255),c
 15161  0001E0  6A0C               	clrf	(??_high_isr+3)& (0+255),c
 15162  0001E2  0E02               	movlw	2
 15163  0001E4  260B               	addwf	??_high_isr+2,f,c
 15164  0001E6  0E00               	movlw	0
 15165  0001E8  220C               	addwfc	??_high_isr+3,f,c
 15166  0001EA  5009               	movf	??_high_isr,w,c
 15167  0001EC  5C0B               	subwf	??_high_isr+2,w,c
 15168  0001EE  500C               	movf	??_high_isr+3,w,c
 15169  0001F0  0A80               	xorlw	128
 15170  0001F2  6E0D               	movwf	(??_high_isr+4)& (0+255),c
 15171  0001F4  500A               	movf	??_high_isr+1,w,c
 15172  0001F6  0A80               	xorlw	128
 15173  0001F8  580D               	subwfb	(??_high_isr+4)& (0+255),w,c
 15174  0001FA  B0D8               	btfsc	status,0,c
 15175  0001FC  D7CA               	goto	i2l974
 15176                           
 15177                           ;drv_mrf_miwi_24j40.c: 1990: }
 15178                           ;drv_mrf_miwi_24j40.c: 1991: PHYSetShortRAMAddr((0x1B), 0x01);
 15179  0001FE  0E01               	movlw	1
 15180  000200  6E03               	movwf	PHYSetShortRAMAddr@value,c
 15181  000202  0E1B               	movlw	27
 15182  000204  EC8C  F01C         	call	_PHYSetShortRAMAddr
 15183                           
 15184                           ;drv_mrf_miwi_24j40.c: 1992: } else
 15185  000208  D005               	goto	i2l976
 15186  00020A                     i2l972:
 15187                           
 15188                           ;drv_mrf_miwi_24j40.c: 1993: {
 15189                           ;drv_mrf_miwi_24j40.c: 1996: PHYSetShortRAMAddr((0x1B), 0x01);
 15190  00020A  0E01               	movlw	1
 15191  00020C  6E03               	movwf	PHYSetShortRAMAddr@value,c
 15192  00020E  0E1B               	movlw	27
 15193  000210  EC8C  F01C         	call	_PHYSetShortRAMAddr
 15194  000214                     i2l976:
 15195                           
 15196                           ;drv_mrf_miwi_24j40.c: 1997: }
 15197                           ;drv_mrf_miwi_24j40.c: 2000: PHYSetShortRAMAddr((0x73), 0x00);
 15198  000214  0E00               	movlw	0
 15199  000216  6E03               	movwf	PHYSetShortRAMAddr@value,c
 15200  000218  0E73               	movlw	115
 15201  00021A  EC8C  F01C         	call	_PHYSetShortRAMAddr
 15202                           
 15203                           ;drv_mrf_miwi_24j40.c: 2001: } else
 15204  00021E  D005               	goto	i2l977
 15205  000220                     i2l971:
 15206                           
 15207                           ;drv_mrf_miwi_24j40.c: 2002: {
 15208                           ;drv_mrf_miwi_24j40.c: 2005: PHYSetShortRAMAddr((0x1B), 0x01);
 15209  000220  0E01               	movlw	1
 15210  000222  6E03               	movwf	PHYSetShortRAMAddr@value,c
 15211  000224  0E1B               	movlw	27
 15212  000226  EC8C  F01C         	call	_PHYSetShortRAMAddr
 15213  00022A                     i2l977:
 15214                           
 15215                           ;drv_mrf_miwi_24j40.c: 2012: }
 15216                           ;drv_mrf_miwi_24j40.c: 2014: }
 15217                           ;drv_mrf_miwi_24j40.c: 2017: if (flags.bits.SECIF)
 15218  00022A  A827               	btfss	high_isr@flags,4,c
 15219  00022C  D005               	goto	i2l978
 15220                           
 15221                           ;drv_mrf_miwi_24j40.c: 2018: {
 15222                           ;drv_mrf_miwi_24j40.c: 2019: PHYSetShortRAMAddr((0x59), 0x80);
 15223  00022E  0E80               	movlw	128
 15224  000230  6E03               	movwf	PHYSetShortRAMAddr@value,c
 15225  000232  0E59               	movlw	89
 15226  000234  EC8C  F01C         	call	_PHYSetShortRAMAddr
 15227  000238                     i2l978:
 15228                           
 15229                           ;drv_mrf_miwi_24j40.c: 2020: }
 15230                           ;drv_mrf_miwi_24j40.c: 2021: }
 15231                           ;drv_mrf_miwi_24j40.c: 2022: }
 15232                           ;drv_mrf_miwi_24j40.c: 2027: if (PIR1bits.TMR1IF)
 15233  000238  B09E               	btfsc	3998,0,c	;volatile
 15234                           
 15235                           ;drv_mrf_miwi_24j40.c: 2028: {
 15236                           ;drv_mrf_miwi_24j40.c: 2029: if (PIE1bits.TMR1IE)
 15237  00023A  A09D               	btfss	3997,0,c	;volatile
 15238  00023C  D007               	goto	i2l981
 15239                           
 15240                           ;drv_mrf_miwi_24j40.c: 2030: {
 15241                           ;drv_mrf_miwi_24j40.c: 2032: PIR1bits.TMR1IF = 0;
 15242  00023E  909E               	bcf	3998,0,c	;volatile
 15243                           
 15244                           ;drv_mrf_miwi_24j40.c: 2033: timerExtension1++;
 15245  000240  2A46               	incf	_timerExtension1,f,c	;volatile
 15246                           
 15247                           ;drv_mrf_miwi_24j40.c: 2034: if (timerExtension1 == 0)
 15248  000242  5046               	movf	_timerExtension1,w,c	;volatile
 15249  000244  A4D8               	btfss	status,2,c
 15250  000246  D002               	goto	i2l981
 15251                           
 15252                           ;drv_mrf_miwi_24j40.c: 2035: {
 15253                           ;drv_mrf_miwi_24j40.c: 2036: timerExtension2++;
 15254  000248  0101               	movlb	1	; () banked
 15255  00024A  2B3A               	incf	_timerExtension2& (0+255),f,b	;volatile
 15256  00024C                     i2l981:
 15257                           
 15258                           ;drv_mrf_miwi_24j40.c: 2037: }
 15259                           ;drv_mrf_miwi_24j40.c: 2038: }
 15260                           ;drv_mrf_miwi_24j40.c: 2039: }
 15261                           ;drv_mrf_miwi_24j40.c: 2041: UserInterruptHandler();
 15262                           
 15263                           ; BSR set to: 1
 15264                           
 15265                           ; BSR set to: 1
 15266                           
 15267                           ; BSR set to: 1
 15268  00024C  EC2A  F01D         	call	_UserInterruptHandler	;wreg free
 15269                           
 15270                           ;drv_mrf_miwi_24j40.c: 2044: return;
 15271  000250  C01F  F058         	movff	??_high_isr+22,btemp+3
 15272  000254  C01E  F057         	movff	??_high_isr+21,btemp+2
 15273  000258  C01D  F056         	movff	??_high_isr+20,btemp+1
 15274  00025C  C01C  F055         	movff	??_high_isr+19,btemp
 15275  000260  C01B  FFF5         	movff	??_high_isr+18,tablat
 15276  000264  C01A  FFF8         	movff	??_high_isr+17,tblptru
 15277  000268  C019  FFF7         	movff	??_high_isr+16,tblptrh
 15278  00026C  C018  FFF6         	movff	??_high_isr+15,tblptrl
 15279  000270  C017  FFF4         	movff	??_high_isr+14,prodh
 15280  000274  C016  FFF3         	movff	??_high_isr+13,prodl
 15281  000278  C015  FFDA         	movff	??_high_isr+12,fsr2h
 15282  00027C  C014  FFD9         	movff	??_high_isr+11,fsr2l
 15283  000280  C013  FFE2         	movff	??_high_isr+10,fsr1h
 15284  000284  C012  FFE1         	movff	??_high_isr+9,fsr1l
 15285  000288  C011  FFEA         	movff	??_high_isr+8,fsr0h
 15286  00028C  C010  FFE9         	movff	??_high_isr+7,fsr0l
 15287  000290  C00F  FFFB         	movff	??_high_isr+6,pclatu
 15288  000294  C00E  FFFA         	movff	??_high_isr+5,pclath
 15289  000298  9255               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15290  00029A  0011               	retfie		f
 15291  00029C                     __end_of_high_isr:
 15292                           	opt stack 0
 15293                           pclatu	equ	0xFFB
 15294                           pclath	equ	0xFFA
 15295                           tblptru	equ	0xFF8
 15296                           tblptrh	equ	0xFF7
 15297                           tblptrl	equ	0xFF6
 15298                           tablat	equ	0xFF5
 15299                           prodh	equ	0xFF4
 15300                           prodl	equ	0xFF3
 15301                           intcon	equ	0xFF2
 15302                           intcon2	equ	0xFF1
 15303                           postinc0	equ	0xFEE
 15304                           fsr0h	equ	0xFEA
 15305                           fsr0l	equ	0xFE9
 15306                           wreg	equ	0xFE8
 15307                           indf1	equ	0xFE7
 15308                           postdec1	equ	0xFE5
 15309                           fsr1h	equ	0xFE2
 15310                           fsr1l	equ	0xFE1
 15311                           indf2	equ	0xFDF
 15312                           postinc2	equ	0xFDE
 15313                           postdec2	equ	0xFDD
 15314                           fsr2h	equ	0xFDA
 15315                           fsr2l	equ	0xFD9
 15316                           status	equ	0xFD8
 15317                           
 15318 ;; *************** function _UserInterruptHandler *****************
 15319 ;; Defined at:
 15320 ;;		line 186 in file "../src/system_config/miwikit_pic18f46j50_24j40/lcd.c"
 15321 ;; Parameters:    Size  Location     Type
 15322 ;;		None
 15323 ;; Auto vars:     Size  Location     Type
 15324 ;;		None
 15325 ;; Return value:  Size  Location     Type
 15326 ;;                  1    wreg      void 
 15327 ;; Registers used:
 15328 ;;		None
 15329 ;; Tracked objects:
 15330 ;;		On entry : 0/0
 15331 ;;		On exit  : 0/0
 15332 ;;		Unchanged: 0/0
 15333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15338 ;;Total ram usage:        0 bytes
 15339 ;; Hardware stack levels used:    1
 15340 ;; This function calls:
 15341 ;;		Nothing
 15342 ;; This function is called by:
 15343 ;;		_high_isr
 15344 ;; This function uses a non-reentrant model
 15345 ;;
 15346                           
 15347                           	psect	text46
 15348  003A54                     __ptext46:
 15349                           	opt stack 0
 15350  003A54                     _UserInterruptHandler:
 15351                           	opt stack 23
 15352                           
 15353                           ;incstack = 0
 15354  003A54  0012               	return		;funcret
 15355  003A56                     __end_of_UserInterruptHandler:
 15356                           	opt stack 0
 15357                           pclatu	equ	0xFFB
 15358                           pclath	equ	0xFFA
 15359                           tblptru	equ	0xFF8
 15360                           tblptrh	equ	0xFF7
 15361                           tblptrl	equ	0xFF6
 15362                           tablat	equ	0xFF5
 15363                           prodh	equ	0xFF4
 15364                           prodl	equ	0xFF3
 15365                           intcon	equ	0xFF2
 15366                           intcon2	equ	0xFF1
 15367                           postinc0	equ	0xFEE
 15368                           fsr0h	equ	0xFEA
 15369                           fsr0l	equ	0xFE9
 15370                           wreg	equ	0xFE8
 15371                           indf1	equ	0xFE7
 15372                           postdec1	equ	0xFE5
 15373                           fsr1h	equ	0xFE2
 15374                           fsr1l	equ	0xFE1
 15375                           indf2	equ	0xFDF
 15376                           postinc2	equ	0xFDE
 15377                           postdec2	equ	0xFDD
 15378                           fsr2h	equ	0xFDA
 15379                           fsr2l	equ	0xFD9
 15380                           status	equ	0xFD8
 15381                           
 15382 ;; *************** function _PHYSetShortRAMAddr *****************
 15383 ;; Defined at:
 15384 ;;		line 128 in file "../../../framework/driver/mrf_miwi/src/drv_mrf_miwi_24j40.c"
 15385 ;; Parameters:    Size  Location     Type
 15386 ;;  address         1    wreg     unsigned char 
 15387 ;;  value           1    2[COMRAM] unsigned char 
 15388 ;; Auto vars:     Size  Location     Type
 15389 ;;  address         1    3[COMRAM] unsigned char 
 15390 ;;  tmpRFIE         1    4[COMRAM] volatile unsigned char 
 15391 ;; Return value:  Size  Location     Type
 15392 ;;                  1    wreg      void 
 15393 ;; Registers used:
 15394 ;;		wreg, status,2, cstack
 15395 ;; Tracked objects:
 15396 ;;		On entry : 0/0
 15397 ;;		On exit  : 0/0
 15398 ;;		Unchanged: 0/0
 15399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15400 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15401 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15403 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15404 ;;Total ram usage:        3 bytes
 15405 ;; Hardware stack levels used:    1
 15406 ;; Hardware stack levels required when called:    1
 15407 ;; This function calls:
 15408 ;;		_SPIPut
 15409 ;; This function is called by:
 15410 ;;		_high_isr
 15411 ;;		_InitMRF24J40
 15412 ;;		_MiMAC_SendPacket
 15413 ;;		_MiMAC_ChannelAssessment
 15414 ;;		_MiMAC_SetChannel
 15415 ;;		_MiMAC_SetAltAddress
 15416 ;; This function uses a non-reentrant model
 15417 ;;
 15418                           
 15419                           	psect	text47
 15420  003918                     __ptext47:
 15421                           	opt stack 0
 15422  003918                     _PHYSetShortRAMAddr:
 15423                           	opt stack 22
 15424                           
 15425                           ;incstack = 0
 15426                           ;PHYSetShortRAMAddr@address stored from wreg
 15427  003918  6E04               	movwf	PHYSetShortRAMAddr@address,c
 15428                           
 15429                           ;drv_mrf_miwi_24j40.c: 130: volatile uint8_t tmpRFIE = INTCONbits.INT0IE;
 15430  00391A  0E00               	movlw	0
 15431  00391C  B8F2               	btfsc	intcon,4,c	;volatile
 15432  00391E  0E01               	movlw	1
 15433  003920  6E05               	movwf	PHYSetShortRAMAddr@tmpRFIE,c	;volatile
 15434                           
 15435                           ;drv_mrf_miwi_24j40.c: 132: INTCONbits.INT0IE = 0;
 15436  003922  98F2               	bcf	intcon,4,c	;volatile
 15437                           
 15438                           ;drv_mrf_miwi_24j40.c: 133: LATAbits.LATA5 = 0;
 15439  003924  9A89               	bcf	3977,5,c	;volatile
 15440                           
 15441                           ;drv_mrf_miwi_24j40.c: 134: SPIPut(address);
 15442  003926  5004               	movf	PHYSetShortRAMAddr@address,w,c
 15443  003928  ECD2  F01C         	call	_SPIPut
 15444                           
 15445                           ;drv_mrf_miwi_24j40.c: 135: SPIPut(value);
 15446  00392C  5003               	movf	PHYSetShortRAMAddr@value,w,c
 15447  00392E  ECD2  F01C         	call	_SPIPut
 15448                           
 15449                           ;drv_mrf_miwi_24j40.c: 136: LATAbits.LATA5 = 1;
 15450  003932  8A89               	bsf	3977,5,c	;volatile
 15451                           
 15452                           ;drv_mrf_miwi_24j40.c: 137: INTCONbits.INT0IE = tmpRFIE;
 15453  003934  B005               	btfsc	PHYSetShortRAMAddr@tmpRFIE,0,c	;volatile
 15454  003936  D002               	bra	i2u1778_45
 15455  003938  98F2               	bcf	intcon,4,c	;volatile
 15456  00393A  D001               	bra	i2u1778_46
 15457  00393C                     i2u1778_45:
 15458  00393C  88F2               	bsf	intcon,4,c	;volatile
 15459  00393E                     i2u1778_46:
 15460  00393E  0012               	return		;funcret
 15461  003940                     __end_of_PHYSetShortRAMAddr:
 15462                           	opt stack 0
 15463                           pclatu	equ	0xFFB
 15464                           pclath	equ	0xFFA
 15465                           tblptru	equ	0xFF8
 15466                           tblptrh	equ	0xFF7
 15467                           tblptrl	equ	0xFF6
 15468                           tablat	equ	0xFF5
 15469                           prodh	equ	0xFF4
 15470                           prodl	equ	0xFF3
 15471                           intcon	equ	0xFF2
 15472                           intcon2	equ	0xFF1
 15473                           postinc0	equ	0xFEE
 15474                           fsr0h	equ	0xFEA
 15475                           fsr0l	equ	0xFE9
 15476                           wreg	equ	0xFE8
 15477                           indf1	equ	0xFE7
 15478                           postdec1	equ	0xFE5
 15479                           fsr1h	equ	0xFE2
 15480                           fsr1l	equ	0xFE1
 15481                           indf2	equ	0xFDF
 15482                           postinc2	equ	0xFDE
 15483                           postdec2	equ	0xFDD
 15484                           fsr2h	equ	0xFDA
 15485                           fsr2l	equ	0xFD9
 15486                           status	equ	0xFD8
 15487                           
 15488 ;; *************** function _PHYGetShortRAMAddr *****************
 15489 ;; Defined at:
 15490 ;;		line 158 in file "../../../framework/driver/mrf_miwi/src/drv_mrf_miwi_24j40.c"
 15491 ;; Parameters:    Size  Location     Type
 15492 ;;  address         1    wreg     unsigned char 
 15493 ;; Auto vars:     Size  Location     Type
 15494 ;;  address         1    2[COMRAM] unsigned char 
 15495 ;;  tmpRFIE         1    4[COMRAM] volatile unsigned char 
 15496 ;;  toReturn        1    3[COMRAM] unsigned char 
 15497 ;; Return value:  Size  Location     Type
 15498 ;;                  1    wreg      unsigned char 
 15499 ;; Registers used:
 15500 ;;		wreg, status,2, cstack
 15501 ;; Tracked objects:
 15502 ;;		On entry : 0/0
 15503 ;;		On exit  : 0/0
 15504 ;;		Unchanged: 0/0
 15505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15507 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15509 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15510 ;;Total ram usage:        3 bytes
 15511 ;; Hardware stack levels used:    1
 15512 ;; Hardware stack levels required when called:    2
 15513 ;; This function calls:
 15514 ;;		_SPIGet
 15515 ;;		_SPIPut
 15516 ;; This function is called by:
 15517 ;;		_high_isr
 15518 ;;		_InitMRF24J40
 15519 ;;		_MiMAC_ChannelAssessment
 15520 ;; This function uses a non-reentrant model
 15521 ;;
 15522                           
 15523                           	psect	text48
 15524  0038C6                     __ptext48:
 15525                           	opt stack 0
 15526  0038C6                     _PHYGetShortRAMAddr:
 15527                           	opt stack 21
 15528                           
 15529                           ;incstack = 0
 15530                           ;PHYGetShortRAMAddr@address stored from wreg
 15531  0038C6  6E03               	movwf	PHYGetShortRAMAddr@address,c
 15532                           
 15533                           ;drv_mrf_miwi_24j40.c: 160: uint8_t toReturn;
 15534                           ;drv_mrf_miwi_24j40.c: 161: volatile uint8_t tmpRFIE = INTCONbits.INT0IE;
 15535  0038C8  0E00               	movlw	0
 15536  0038CA  B8F2               	btfsc	intcon,4,c	;volatile
 15537  0038CC  0E01               	movlw	1
 15538  0038CE  6E05               	movwf	PHYGetShortRAMAddr@tmpRFIE,c	;volatile
 15539                           
 15540                           ;drv_mrf_miwi_24j40.c: 163: INTCONbits.INT0IE = 0;
 15541  0038D0  98F2               	bcf	intcon,4,c	;volatile
 15542                           
 15543                           ;drv_mrf_miwi_24j40.c: 164: LATAbits.LATA5 = 0;
 15544  0038D2  9A89               	bcf	3977,5,c	;volatile
 15545                           
 15546                           ;drv_mrf_miwi_24j40.c: 165: SPIPut(address);
 15547  0038D4  5003               	movf	PHYGetShortRAMAddr@address,w,c
 15548  0038D6  ECD2  F01C         	call	_SPIPut
 15549                           
 15550                           ;drv_mrf_miwi_24j40.c: 166: toReturn = SPIGet();
 15551  0038DA  EC24  F01D         	call	_SPIGet	;wreg free
 15552  0038DE  6E04               	movwf	PHYGetShortRAMAddr@toReturn,c
 15553                           
 15554                           ;drv_mrf_miwi_24j40.c: 167: LATAbits.LATA5 = 1;
 15555  0038E0  8A89               	bsf	3977,5,c	;volatile
 15556                           
 15557                           ;drv_mrf_miwi_24j40.c: 168: INTCONbits.INT0IE = tmpRFIE;
 15558  0038E2  B005               	btfsc	PHYGetShortRAMAddr@tmpRFIE,0,c	;volatile
 15559  0038E4  D002               	bra	i2u1779_45
 15560  0038E6  98F2               	bcf	intcon,4,c	;volatile
 15561  0038E8  D001               	bra	i2u1779_46
 15562  0038EA                     i2u1779_45:
 15563  0038EA  88F2               	bsf	intcon,4,c	;volatile
 15564  0038EC                     i2u1779_46:
 15565                           
 15566                           ;drv_mrf_miwi_24j40.c: 170: return toReturn;
 15567  0038EC  5004               	movf	PHYGetShortRAMAddr@toReturn,w,c
 15568  0038EE  0012               	return	
 15569  0038F0                     __end_of_PHYGetShortRAMAddr:
 15570                           	opt stack 0
 15571                           pclatu	equ	0xFFB
 15572                           pclath	equ	0xFFA
 15573                           tblptru	equ	0xFF8
 15574                           tblptrh	equ	0xFF7
 15575                           tblptrl	equ	0xFF6
 15576                           tablat	equ	0xFF5
 15577                           prodh	equ	0xFF4
 15578                           prodl	equ	0xFF3
 15579                           intcon	equ	0xFF2
 15580                           intcon2	equ	0xFF1
 15581                           postinc0	equ	0xFEE
 15582                           fsr0h	equ	0xFEA
 15583                           fsr0l	equ	0xFE9
 15584                           wreg	equ	0xFE8
 15585                           indf1	equ	0xFE7
 15586                           postdec1	equ	0xFE5
 15587                           fsr1h	equ	0xFE2
 15588                           fsr1l	equ	0xFE1
 15589                           indf2	equ	0xFDF
 15590                           postinc2	equ	0xFDE
 15591                           postdec2	equ	0xFDD
 15592                           fsr2h	equ	0xFDA
 15593                           fsr2l	equ	0xFD9
 15594                           status	equ	0xFD8
 15595                           
 15596 ;; *************** function _PHYGetLongRAMAddr *****************
 15597 ;; Defined at:
 15598 ;;		line 189 in file "../../../framework/driver/mrf_miwi/src/drv_mrf_miwi_24j40.c"
 15599 ;; Parameters:    Size  Location     Type
 15600 ;;  address         2    2[COMRAM] unsigned int 
 15601 ;; Auto vars:     Size  Location     Type
 15602 ;;  tmpRFIE         1    7[COMRAM] volatile unsigned char 
 15603 ;;  toReturn        1    6[COMRAM] unsigned char 
 15604 ;; Return value:  Size  Location     Type
 15605 ;;                  1    wreg      unsigned char 
 15606 ;; Registers used:
 15607 ;;		wreg, status,2, status,0, cstack
 15608 ;; Tracked objects:
 15609 ;;		On entry : 0/0
 15610 ;;		On exit  : 0/0
 15611 ;;		Unchanged: 0/0
 15612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15613 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15614 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15615 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15616 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15617 ;;Total ram usage:        6 bytes
 15618 ;; Hardware stack levels used:    1
 15619 ;; Hardware stack levels required when called:    2
 15620 ;; This function calls:
 15621 ;;		_SPIGet
 15622 ;;		_SPIPut
 15623 ;; This function is called by:
 15624 ;;		_high_isr
 15625 ;;		_InitMRF24J40
 15626 ;;		_MiMAC_ChannelAssessment
 15627 ;; This function uses a non-reentrant model
 15628 ;;
 15629                           
 15630                           	psect	text49
 15631  003774                     __ptext49:
 15632                           	opt stack 0
 15633  003774                     _PHYGetLongRAMAddr:
 15634                           	opt stack 21
 15635                           
 15636                           ;drv_mrf_miwi_24j40.c: 191: uint8_t toReturn;
 15637                           ;drv_mrf_miwi_24j40.c: 192: volatile uint8_t tmpRFIE = INTCONbits.INT0IE;
 15638                           
 15639                           ;incstack = 0
 15640  003774  0E00               	movlw	0
 15641  003776  B8F2               	btfsc	intcon,4,c	;volatile
 15642  003778  0E01               	movlw	1
 15643  00377A  6E08               	movwf	PHYGetLongRAMAddr@tmpRFIE,c	;volatile
 15644                           
 15645                           ;drv_mrf_miwi_24j40.c: 194: INTCONbits.INT0IE = 0;
 15646  00377C  98F2               	bcf	intcon,4,c	;volatile
 15647                           
 15648                           ;drv_mrf_miwi_24j40.c: 195: LATAbits.LATA5 = 0;
 15649  00377E  9A89               	bcf	3977,5,c	;volatile
 15650                           
 15651                           ;drv_mrf_miwi_24j40.c: 196: SPIPut(((address >> 3)&0x7F) | 0x80);
 15652  003780  C003  F005         	movff	PHYGetLongRAMAddr@address,??_PHYGetLongRAMAddr
 15653  003784  C004  F006         	movff	PHYGetLongRAMAddr@address+1,??_PHYGetLongRAMAddr+1
 15654  003788  90D8               	bcf	status,0,c
 15655  00378A  3206               	rrcf	??_PHYGetLongRAMAddr+1,f,c
 15656  00378C  3205               	rrcf	??_PHYGetLongRAMAddr,f,c
 15657  00378E  90D8               	bcf	status,0,c
 15658  003790  3206               	rrcf	??_PHYGetLongRAMAddr+1,f,c
 15659  003792  3205               	rrcf	??_PHYGetLongRAMAddr,f,c
 15660  003794  90D8               	bcf	status,0,c
 15661  003796  3206               	rrcf	??_PHYGetLongRAMAddr+1,f,c
 15662  003798  3205               	rrcf	??_PHYGetLongRAMAddr,f,c
 15663  00379A  5005               	movf	??_PHYGetLongRAMAddr,w,c
 15664  00379C  0B7F               	andlw	127
 15665  00379E  0980               	iorlw	128
 15666  0037A0  ECD2  F01C         	call	_SPIPut
 15667                           
 15668                           ;drv_mrf_miwi_24j40.c: 197: SPIPut(((address << 5)&0xE0));
 15669  0037A4  3803               	swapf	PHYGetLongRAMAddr@address,w,c
 15670  0037A6  46E8               	rlncf	wreg,f,c
 15671  0037A8  0BE0               	andlw	224
 15672  0037AA  0BE0               	andlw	224
 15673  0037AC  ECD2  F01C         	call	_SPIPut
 15674                           
 15675                           ;drv_mrf_miwi_24j40.c: 198: toReturn = SPIGet();
 15676  0037B0  EC24  F01D         	call	_SPIGet	;wreg free
 15677  0037B4  6E07               	movwf	PHYGetLongRAMAddr@toReturn,c
 15678                           
 15679                           ;drv_mrf_miwi_24j40.c: 199: LATAbits.LATA5 = 1;
 15680  0037B6  8A89               	bsf	3977,5,c	;volatile
 15681                           
 15682                           ;drv_mrf_miwi_24j40.c: 200: INTCONbits.INT0IE = tmpRFIE;
 15683  0037B8  B008               	btfsc	PHYGetLongRAMAddr@tmpRFIE,0,c	;volatile
 15684  0037BA  D002               	bra	i2u1780_45
 15685  0037BC  98F2               	bcf	intcon,4,c	;volatile
 15686  0037BE  D001               	bra	i2u1780_46
 15687  0037C0                     i2u1780_45:
 15688  0037C0  88F2               	bsf	intcon,4,c	;volatile
 15689  0037C2                     i2u1780_46:
 15690                           
 15691                           ;drv_mrf_miwi_24j40.c: 202: return toReturn;
 15692  0037C2  5007               	movf	PHYGetLongRAMAddr@toReturn,w,c
 15693  0037C4  0012               	return	
 15694  0037C6                     __end_of_PHYGetLongRAMAddr:
 15695                           	opt stack 0
 15696                           pclatu	equ	0xFFB
 15697                           pclath	equ	0xFFA
 15698                           tblptru	equ	0xFF8
 15699                           tblptrh	equ	0xFF7
 15700                           tblptrl	equ	0xFF6
 15701                           tablat	equ	0xFF5
 15702                           prodh	equ	0xFF4
 15703                           prodl	equ	0xFF3
 15704                           intcon	equ	0xFF2
 15705                           intcon2	equ	0xFF1
 15706                           postinc0	equ	0xFEE
 15707                           fsr0h	equ	0xFEA
 15708                           fsr0l	equ	0xFE9
 15709                           wreg	equ	0xFE8
 15710                           indf1	equ	0xFE7
 15711                           postdec1	equ	0xFE5
 15712                           fsr1h	equ	0xFE2
 15713                           fsr1l	equ	0xFE1
 15714                           indf2	equ	0xFDF
 15715                           postinc2	equ	0xFDE
 15716                           postdec2	equ	0xFDD
 15717                           fsr2h	equ	0xFDA
 15718                           fsr2l	equ	0xFD9
 15719                           status	equ	0xFD8
 15720                           
 15721 ;; *************** function _SPIGet *****************
 15722 ;; Defined at:
 15723 ;;		line 102 in file "../src/system_config/miwikit_pic18f46j50_24j40/spi.c"
 15724 ;; Parameters:    Size  Location     Type
 15725 ;;		None
 15726 ;; Auto vars:     Size  Location     Type
 15727 ;;		None
 15728 ;; Return value:  Size  Location     Type
 15729 ;;                  1    wreg      unsigned char 
 15730 ;; Registers used:
 15731 ;;		wreg, status,2, cstack
 15732 ;; Tracked objects:
 15733 ;;		On entry : 0/0
 15734 ;;		On exit  : 0/0
 15735 ;;		Unchanged: 0/0
 15736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15741 ;;Total ram usage:        0 bytes
 15742 ;; Hardware stack levels used:    1
 15743 ;; Hardware stack levels required when called:    1
 15744 ;; This function calls:
 15745 ;;		_SPIPut
 15746 ;; This function is called by:
 15747 ;;		_PHYGetShortRAMAddr
 15748 ;;		_PHYGetLongRAMAddr
 15749 ;; This function uses a non-reentrant model
 15750 ;;
 15751                           
 15752                           	psect	text50
 15753  003A48                     __ptext50:
 15754                           	opt stack 0
 15755  003A48                     _SPIGet:
 15756                           	opt stack 21
 15757                           
 15758                           ;spi.c: 123: SPIPut(0x00);
 15759                           
 15760                           ;incstack = 0
 15761  003A48  0E00               	movlw	0
 15762  003A4A  ECD2  F01C         	call	_SPIPut
 15763                           
 15764                           ;spi.c: 124: return SSP1BUF;
 15765  003A4E  50C9               	movf	4041,w,c	;volatile
 15766  003A50  0012               	return	
 15767  003A52                     __end_of_SPIGet:
 15768                           	opt stack 0
 15769                           pclatu	equ	0xFFB
 15770                           pclath	equ	0xFFA
 15771                           tblptru	equ	0xFF8
 15772                           tblptrh	equ	0xFF7
 15773                           tblptrl	equ	0xFF6
 15774                           tablat	equ	0xFF5
 15775                           prodh	equ	0xFF4
 15776                           prodl	equ	0xFF3
 15777                           intcon	equ	0xFF2
 15778                           intcon2	equ	0xFF1
 15779                           postinc0	equ	0xFEE
 15780                           fsr0h	equ	0xFEA
 15781                           fsr0l	equ	0xFE9
 15782                           wreg	equ	0xFE8
 15783                           indf1	equ	0xFE7
 15784                           postdec1	equ	0xFE5
 15785                           fsr1h	equ	0xFE2
 15786                           fsr1l	equ	0xFE1
 15787                           indf2	equ	0xFDF
 15788                           postinc2	equ	0xFDE
 15789                           postdec2	equ	0xFDD
 15790                           fsr2h	equ	0xFDA
 15791                           fsr2l	equ	0xFD9
 15792                           status	equ	0xFD8
 15793                           
 15794 ;; *************** function _SPIPut *****************
 15795 ;; Defined at:
 15796 ;;		line 45 in file "../src/system_config/miwikit_pic18f46j50_24j40/spi.c"
 15797 ;; Parameters:    Size  Location     Type
 15798 ;;  v               1    wreg     unsigned char 
 15799 ;; Auto vars:     Size  Location     Type
 15800 ;;  v               1    1[COMRAM] unsigned char 
 15801 ;;  i               1    0[COMRAM] unsigned char 
 15802 ;; Return value:  Size  Location     Type
 15803 ;;                  1    wreg      void 
 15804 ;; Registers used:
 15805 ;;		wreg
 15806 ;; Tracked objects:
 15807 ;;		On entry : 0/0
 15808 ;;		On exit  : 0/0
 15809 ;;		Unchanged: 0/0
 15810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15812 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15814 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15815 ;;Total ram usage:        2 bytes
 15816 ;; Hardware stack levels used:    1
 15817 ;; This function calls:
 15818 ;;		Nothing
 15819 ;; This function is called by:
 15820 ;;		_PHYSetShortRAMAddr
 15821 ;;		_PHYGetShortRAMAddr
 15822 ;;		_PHYGetLongRAMAddr
 15823 ;;		_SPIGet
 15824 ;;		_PHYSetLongRAMAddr
 15825 ;;		_SSTWrite
 15826 ;; This function uses a non-reentrant model
 15827 ;;
 15828                           
 15829                           	psect	text51
 15830  0039A4                     __ptext51:
 15831                           	opt stack 0
 15832  0039A4                     _SPIPut:
 15833                           	opt stack 22
 15834                           
 15835                           ;incstack = 0
 15836                           ;SPIPut@v stored from wreg
 15837  0039A4  6E02               	movwf	SPIPut@v,c
 15838                           
 15839                           ;spi.c: 64: {
 15840                           ;spi.c: 66: uint8_t i;
 15841                           ;spi.c: 68: PIR1bits.SSP1IF = 0;
 15842  0039A6  969E               	bcf	3998,3,c	;volatile
 15843                           
 15844                           ;spi.c: 70: i = SSP1BUF;
 15845  0039A8  CFC9 F001          	movff	4041,SPIPut@i	;volatile
 15846  0039AC                     i2l2019:
 15847                           
 15848                           ;spi.c: 73: {
 15849                           ;spi.c: 74: SSP1CON1bits.WCOL = 0;
 15850  0039AC  9EC6               	bcf	4038,7,c	;volatile
 15851                           
 15852                           ;spi.c: 75: SSP1BUF = v;
 15853  0039AE  C002  FFC9         	movff	SPIPut@v,4041	;volatile
 15854                           
 15855                           ;spi.c: 76: } while( SSP1CON1bits.WCOL );
 15856  0039B2  BEC6               	btfsc	4038,7,c	;volatile
 15857  0039B4  D7FB               	goto	i2l2019
 15858  0039B6                     i2u1448_40:
 15859                           
 15860                           ;spi.c: 78: while( PIR1bits.SSP1IF == 0 );
 15861  0039B6  A69E               	btfss	3998,3,c	;volatile
 15862  0039B8  D7FE               	goto	i2u1448_40
 15863                           
 15864                           ;spi.c: 80: PIR1bits.SSP1IF = 0;
 15865  0039BA  969E               	bcf	3998,3,c	;volatile
 15866  0039BC  0012               	return		;funcret
 15867  0039BE                     __end_of_SPIPut:
 15868                           	opt stack 0
 15869                           pclatu	equ	0xFFB
 15870                           pclath	equ	0xFFA
 15871                           tblptru	equ	0xFF8
 15872                           tblptrh	equ	0xFF7
 15873                           tblptrl	equ	0xFF6
 15874                           tablat	equ	0xFF5
 15875                           prodh	equ	0xFF4
 15876                           prodl	equ	0xFF3
 15877                           intcon	equ	0xFF2
 15878                           intcon2	equ	0xFF1
 15879                           postinc0	equ	0xFEE
 15880                           fsr0h	equ	0xFEA
 15881                           fsr0l	equ	0xFE9
 15882                           wreg	equ	0xFE8
 15883                           indf1	equ	0xFE7
 15884                           postdec1	equ	0xFE5
 15885                           fsr1h	equ	0xFE2
 15886                           fsr1l	equ	0xFE1
 15887                           indf2	equ	0xFDF
 15888                           postinc2	equ	0xFDE
 15889                           postdec2	equ	0xFDD
 15890                           fsr2h	equ	0xFDA
 15891                           fsr2l	equ	0xFD9
 15892                           status	equ	0xFD8
 15893                           pclatu	equ	0xFFB
 15894                           pclath	equ	0xFFA
 15895                           tblptru	equ	0xFF8
 15896                           tblptrh	equ	0xFF7
 15897                           tblptrl	equ	0xFF6
 15898                           tablat	equ	0xFF5
 15899                           prodh	equ	0xFF4
 15900                           prodl	equ	0xFF3
 15901                           intcon	equ	0xFF2
 15902                           intcon2	equ	0xFF1
 15903                           postinc0	equ	0xFEE
 15904                           fsr0h	equ	0xFEA
 15905                           fsr0l	equ	0xFE9
 15906                           wreg	equ	0xFE8
 15907                           indf1	equ	0xFE7
 15908                           postdec1	equ	0xFE5
 15909                           fsr1h	equ	0xFE2
 15910                           fsr1l	equ	0xFE1
 15911                           indf2	equ	0xFDF
 15912                           postinc2	equ	0xFDE
 15913                           postdec2	equ	0xFDD
 15914                           fsr2h	equ	0xFDA
 15915                           fsr2l	equ	0xFD9
 15916                           status	equ	0xFD8
 15917                           
 15918                           	psect	rparam
 15919  0000                     pclatu	equ	0xFFB
 15920                           pclath	equ	0xFFA
 15921                           tblptru	equ	0xFF8
 15922                           tblptrh	equ	0xFF7
 15923                           tblptrl	equ	0xFF6
 15924                           tablat	equ	0xFF5
 15925                           prodh	equ	0xFF4
 15926                           prodl	equ	0xFF3
 15927                           intcon	equ	0xFF2
 15928                           intcon2	equ	0xFF1
 15929                           postinc0	equ	0xFEE
 15930                           fsr0h	equ	0xFEA
 15931                           fsr0l	equ	0xFE9
 15932                           wreg	equ	0xFE8
 15933                           indf1	equ	0xFE7
 15934                           postdec1	equ	0xFE5
 15935                           fsr1h	equ	0xFE2
 15936                           fsr1l	equ	0xFE1
 15937                           indf2	equ	0xFDF
 15938                           postinc2	equ	0xFDE
 15939                           postdec2	equ	0xFDD
 15940                           fsr2h	equ	0xFDA
 15941                           fsr2l	equ	0xFD9
 15942                           status	equ	0xFD8
 15943                           
 15944                           	psect	temp
 15945  000055                     btemp:
 15946                           	opt stack 0
 15947  000055                     	ds	1
 15948  0000                     int$flags	set	btemp
 15949  0000                     wtemp6	set	btemp+1
 15950                           pclatu	equ	0xFFB
 15951                           pclath	equ	0xFFA
 15952                           tblptru	equ	0xFF8
 15953                           tblptrh	equ	0xFF7
 15954                           tblptrl	equ	0xFF6
 15955                           tablat	equ	0xFF5
 15956                           prodh	equ	0xFF4
 15957                           prodl	equ	0xFF3
 15958                           intcon	equ	0xFF2
 15959                           intcon2	equ	0xFF1
 15960                           postinc0	equ	0xFEE
 15961                           fsr0h	equ	0xFEA
 15962                           fsr0l	equ	0xFE9
 15963                           wreg	equ	0xFE8
 15964                           indf1	equ	0xFE7
 15965                           postdec1	equ	0xFE5
 15966                           fsr1h	equ	0xFE2
 15967                           fsr1l	equ	0xFE1
 15968                           indf2	equ	0xFDF
 15969                           postinc2	equ	0xFDE
 15970                           postdec2	equ	0xFDD
 15971                           fsr2h	equ	0xFDA
 15972                           fsr2l	equ	0xFD9
 15973                           status	equ	0xFD8


Data Sizes:
    Strings     1010
    Constant    258
    Data        268
    BSS         778
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      84
    BANK0           160    156     158
    BANK1           256     63     253
    BANK2           256      0     232
    BANK3           256      0     190
    BANK4           256      0     134
    BANK5           256      0     256
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    sprintf$4964	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_54(CODE[17]), STR_53(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK1[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_52(CODE[33]), STR_51(CODE[18]), STR_50(CODE[23]), STR_49(CODE[14]), 
		 -> STR_48(CODE[12]), STR_47(CODE[26]), STR_46(CODE[26]), STR_45(CODE[12]), 
		 -> STR_44(CODE[31]), STR_43(CODE[33]), STR_42(CODE[32]), STR_41(CODE[33]), 
		 -> STR_40(CODE[32]), STR_39(CODE[33]), STR_38(CODE[32]), STR_37(CODE[33]), 
		 -> STR_36(CODE[33]), STR_35(CODE[2]), STR_34(CODE[5]), STR_33(CODE[2]), 
		 -> STR_32(CODE[4]), STR_31(CODE[4]), STR_30(CODE[10]), STR_29(CODE[16]), 
		 -> STR_28(CODE[17]), STR_27(CODE[31]), STR_26(CODE[31]), STR_25(CODE[31]), 
		 -> STR_24(CODE[33]), STR_23(CODE[15]), STR_22(CODE[29]), STR_21(CODE[29]), 
		 -> STR_20(CODE[33]), STR_19(CODE[31]), STR_18(CODE[31]), STR_17(CODE[33]), 
		 -> STR_16(CODE[33]), STR_15(CODE[31]), STR_14(CODE[31]), STR_13(CODE[17]), 
		 -> STR_12(CODE[12]), STR_11(CODE[27]), STR_10(CODE[26]), STR_9(CODE[36]), 
		 -> STR_8(CODE[33]), STR_7(CODE[33]), STR_6(CODE[33]), STR_5(CODE[33]), 
		 -> STR_4(CODE[31]), STR_3(CODE[33]), STR_2(CODE[31]), STR_1(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 33
		 -> LCDText(BANK1[33]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    sp__memset	PTR void  size(2) Largest target is 33
		 -> LCDText(BANK1[33]), 

    getData16SHT@CRC	PTR unsigned char  size(2) Largest target is 1
		 -> readTemperatureRaw@crc(BANK0[1]), readHumidity@crc(BANK0[1]), 

    getData16SHT@val	PTR int  size(2) Largest target is 2
		 -> readTemperatureRaw@_val(BANK0[2]), readHumidity@_val(BANK0[2]), 

    MIP.PAddress	PTR unsigned char  size(2) Largest target is 8
		 -> myLongAddress(BANK1[8]), 

    MTP.DestAddress	PTR unsigned char  size(2) Largest target is 160
		 -> ConnectionTable.Address(BANK2[8]), tempShortAddress(COMRAM[2]), openSocketInfo.ShortAddress1(BANK1[2]), openSocketInfo(BANK1[27]), 
		 -> NULL(NULL[0]), MiWiTasks@sourceShortAddress(COMRAM[2]), MiWiTasks@destShortAddress(COMRAM[2]), RxBuffer.Payload(BANK3[79]), 
		 -> RxBuffer(BANK3[160]), ConnectionTable.AltAddress(BANK2[2]), ConnectionTable(BANK2[140]), 

    initValue.PAddress	PTR unsigned char  size(2) Largest target is 8
		 -> myLongAddress(BANK1[8]), 

    S1801$DestAddress	PTR unsigned char  size(2) Largest target is 160
		 -> tempShortAddress(COMRAM[2]), openSocketInfo(BANK1[27]), NULL(NULL[0]), MiWiTasks@sourceShortAddress(COMRAM[2]), 
		 -> MiWiTasks@destShortAddress(COMRAM[2]), RxBuffer(BANK3[160]), ConnectionTable(BANK2[140]), 

    transParam.DestAddress	PTR unsigned char  size(2) Largest target is 160
		 -> tempShortAddress(COMRAM[2]), openSocketInfo(BANK1[27]), NULL(NULL[0]), MiWiTasks@sourceShortAddress(COMRAM[2]), 
		 -> MiWiTasks@destShortAddress(COMRAM[2]), RxBuffer(BANK3[160]), ConnectionTable(BANK2[140]), 

    S1520$PAddress	PTR unsigned char  size(2) Largest target is 8
		 -> myLongAddress(BANK1[8]), 

    MACInitParams.PAddress	PTR unsigned char  size(2) Largest target is 8
		 -> myLongAddress(BANK1[8]), 

    S1757$Payload	PTR unsigned char  size(2) Largest target is 160
		 -> RxBuffer(BANK3[160]), 

    MACRxPacket.Payload	PTR unsigned char  size(2) Largest target is 160
		 -> RxBuffer.Payload(BANK3[79]), RxBuffer(BANK3[160]), 

    S1757$SourceAddress	PTR unsigned char  size(2) Largest target is 160
		 -> RxBuffer(BANK3[160]), 

    MACRxPacket.SourceAddress	PTR unsigned char  size(2) Largest target is 160
		 -> RxBuffer.Payload(BANK3[79]), RxBuffer(BANK3[160]), 

    S128$Payload	PTR unsigned char  size(2) Largest target is 160
		 -> RxBuffer(BANK3[160]), 

    rxMessage.Payload	PTR unsigned char  size(2) Largest target is 160
		 -> RxBuffer.Payload(BANK3[79]), RxBuffer(BANK3[160]), 

    S128$SourceAddress	PTR unsigned char  size(2) Largest target is 160
		 -> RxBuffer(BANK3[160]), 

    rxMessage.SourceAddress	PTR unsigned char  size(2) Largest target is 160
		 -> RxBuffer.Payload(BANK3[79]), RxBuffer(BANK3[160]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_PHYGetLongRAMAddr
    _PHYSetShortRAMAddr->_SPIPut
    _PHYGetShortRAMAddr->_SPIPut
    _PHYGetLongRAMAddr->_SPIPut
    _SPIGet->_SPIPut

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_readHumidity
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___lltoft->___fttol
    ___llmod->___lldiv
    ___ftsub->___ftadd
    ___ftneg->___lltoft
    ___ftge->___ftadd
    ___ftdiv->_scale
    _readHumidity->_readTemperatureC
    _readTemperatureC->___ftadd
    _readTemperatureRaw->_getData16SHT
    _sendCommandSHT->_i2cWriteByte
    _getData16SHT->_shiftInCRC
    _shiftInCRC->___awdiv
    ___awdiv->___awmod
    ___awtoft->___ftpack
    ___fttol->_readTemperatureRaw
    ___ftmul->___ftneg
    ___ftadd->_fround
    _LCD_Initialize->_DELAY_ms
    _DELAY_ms->___lmul
    _LCD_Update->_LCD_WriteCmd
    _LCD_Update->_LCD_WriteData
    _LCD_WriteData->_SPIPut2
    _LCD_WriteCmd->_SPIPut2

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  221473
                         _LCD_Update
                  _SYSTEM_Initialize
                       _readHumidity
                   _readTemperatureC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             70    58     12  116495
                                            150 BANK0      6     6      0
                                              0 BANK1     63    51     12
                            ___awdiv
                            ___awmod
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                       _readHumidity (ARG)
                   _readTemperatureC (ARG)
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   21434
                                             76 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   21155
                                             76 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    4808
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2721
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     662
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     881
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3853
                                             49 BANK0      9     5      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8    1896
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8    2113
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    8632
                                             98 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     481
                                             58 BANK0      3     0      3
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1026
                                             98 BANK0      9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    5067
                                             83 BANK0     15     9      6
                           ___ftpack
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (1) _readHumidity                                        38    35      3   65529
                                            112 BANK0     38    35      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                       _getData16SHT
                   _readTemperatureC
                     _sendCommandSHT
                   _waitForResultSHT
 ---------------------------------------------------------------------------------
 (1) _readTemperatureC                                    14    11      3   37545
                                             98 BANK0     14    11      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                 _readTemperatureRaw
 ---------------------------------------------------------------------------------
 (2) _readTemperatureRaw                                   9     6      3   13859
                                             25 BANK0      9     6      3
                            ___awdiv
                           ___awtoft
                       _getData16SHT
                     _sendCommandSHT
                   _waitForResultSHT
 ---------------------------------------------------------------------------------
 (3) _waitForResultSHT                                     5     5      0     133
                                              0 BANK0      5     5      0
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (3) _sendCommandSHT                                       5     3      2     440
                                              2 BANK0      5     3      2
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _i2cWriteByte                                         2     2      0     133
                                              0 BANK0      2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (3) _getData16SHT                                         4     0      4    4793
                                             21 BANK0      4     0      4
                             _i2cAck
                         _i2cHighSda
                            _i2cStop
                            _shiftIn
                         _shiftInCRC
 ---------------------------------------------------------------------------------
 (4) _shiftInCRC                                           7     5      2    3909
                                             14 BANK0      7     5      2
                            ___awdiv
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    3773
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) _shiftIn                                              9     7      2     344
                                              0 BANK0      9     7      2
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (4) _i2cStop                                              0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    4300
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1587
                                             34 BANK0     15    11      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack (ARG)
                             ___wmul (ARG)
                 _readTemperatureRaw (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    9503
                                             61 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    8160
                                             86 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                           ___lltoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3439
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1514
                     _LCD_Initialize
 ---------------------------------------------------------------------------------
 (2) _LCD_Initialize                                       0     0      0    1514
                           _DELAY_ms
                       _LCD_WriteCmd
 ---------------------------------------------------------------------------------
 (3) _DELAY_ms                                             6     4      2    1449
                                             12 BANK0      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     720
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _LCD_Update                                           1     1      0     390
                                              3 BANK0      1     1      0
                       _LCD_WriteCmd
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteData                                        1     1      0      65
                                              2 BANK0      1     1      0
                            _SPIPut2
 ---------------------------------------------------------------------------------
 (3) _LCD_WriteCmd                                         1     1      0      65
                                              2 BANK0      1     1      0
                            _SPIPut2
 ---------------------------------------------------------------------------------
 (4) _SPIPut2                                              2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _high_isr                                            34    34      0    3728
                                              8 COMRAM    34    34      0
                  _PHYGetLongRAMAddr
                 _PHYGetShortRAMAddr
                 _PHYSetShortRAMAddr
               _UserInterruptHandler
 ---------------------------------------------------------------------------------
 (8) _UserInterruptHandler                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _PHYSetShortRAMAddr                                   3     2      1    2671
                                              2 COMRAM     3     2      1
                             _SPIPut
 ---------------------------------------------------------------------------------
 (8) _PHYGetShortRAMAddr                                   3     3      0     114
                                              2 COMRAM     3     3      0
                             _SPIGet
                             _SPIPut
 ---------------------------------------------------------------------------------
 (8) _PHYGetLongRAMAddr                                    6     4      2     492
                                              2 COMRAM     6     4      2
                             _SPIGet
                             _SPIPut
 ---------------------------------------------------------------------------------
 (9) _SPIGet                                               0     0      0      23
                             _SPIPut
 ---------------------------------------------------------------------------------
 (9) _SPIPut                                               2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Update
     _LCD_WriteCmd
       _SPIPut2
     _LCD_WriteData
       _SPIPut2
   _SYSTEM_Initialize
     _LCD_Initialize
       _DELAY_ms
         ___lmul
       _LCD_WriteCmd
         _SPIPut2
   _readHumidity
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _readTemperatureRaw (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awtoft
             ___ftpack
           _getData16SHT
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighSda
             _i2cStop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _shiftIn
               _i2cHighScl
               _i2cLowScl
             _shiftInCRC
               ___awdiv
                 ___awmod (ARG)
               _i2cHighScl
               _i2cLowScl
           _sendCommandSHT
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
             _i2cWriteByte
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
           _waitForResultSHT
             _i2cHighSda
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _readTemperatureRaw (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awtoft
             ___ftpack
           _getData16SHT
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighSda
             _i2cStop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _shiftIn
               _i2cHighScl
               _i2cLowScl
             _shiftInCRC
               ___awdiv
                 ___awmod (ARG)
               _i2cHighScl
               _i2cLowScl
           _sendCommandSHT
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
             _i2cWriteByte
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
           _waitForResultSHT
             _i2cHighSda
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _getData16SHT
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighSda
       _i2cStop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _shiftIn
         _i2cHighScl
         _i2cLowScl
       _shiftInCRC
         ___awdiv
           ___awmod (ARG)
         _i2cHighScl
         _i2cLowScl
     _readTemperatureC
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _readTemperatureRaw (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awtoft
                       ___ftpack
                     _getData16SHT
                       _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _i2cHighSda
                       _i2cStop
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _shiftIn
                         _i2cHighScl
                         _i2cLowScl
                       _shiftInCRC
                         ___awdiv
                           ___awmod (ARG)
                         _i2cHighScl
                         _i2cLowScl
                     _sendCommandSHT
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                       _i2cWriteByte
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                     _waitForResultSHT
                       _i2cHighSda
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _readTemperatureRaw (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awtoft
             ___ftpack
           _getData16SHT
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighSda
             _i2cStop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _shiftIn
               _i2cHighScl
               _i2cLowScl
             _shiftInCRC
               ___awdiv
                 ___awmod (ARG)
               _i2cHighScl
               _i2cLowScl
           _sendCommandSHT
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
             _i2cWriteByte
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
           _waitForResultSHT
             _i2cHighSda
       _readTemperatureRaw
         ___awdiv
           ___awmod (ARG)
         ___awtoft
           ___ftpack
         _getData16SHT
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighSda
           _i2cStop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _shiftIn
             _i2cHighScl
             _i2cLowScl
           _shiftInCRC
             ___awdiv
               ___awmod (ARG)
             _i2cHighScl
             _i2cLowScl
         _sendCommandSHT
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
           _i2cWriteByte
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _waitForResultSHT
           _i2cHighSda
     _sendCommandSHT
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
       _i2cWriteByte
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _waitForResultSHT
       _i2cHighSda
   _readTemperatureC
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _readTemperatureRaw (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awtoft
             ___ftpack
           _getData16SHT
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighSda
             _i2cStop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _shiftIn
               _i2cHighScl
               _i2cLowScl
             _shiftInCRC
               ___awdiv
                 ___awmod (ARG)
               _i2cHighScl
               _i2cLowScl
           _sendCommandSHT
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
             _i2cWriteByte
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
           _waitForResultSHT
             _i2cHighSda
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _readTemperatureRaw (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awtoft
             ___ftpack
           _getData16SHT
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighSda
             _i2cStop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _shiftIn
               _i2cHighScl
               _i2cLowScl
             _shiftInCRC
               ___awdiv
                 ___awmod (ARG)
               _i2cHighScl
               _i2cLowScl
           _sendCommandSHT
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
             _i2cWriteByte
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
           _waitForResultSHT
             _i2cHighSda
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _readTemperatureRaw (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awtoft
           ___ftpack
         _getData16SHT
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighSda
           _i2cStop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _shiftIn
             _i2cHighScl
             _i2cLowScl
           _shiftInCRC
             ___awdiv
               ___awmod (ARG)
             _i2cHighScl
             _i2cLowScl
         _sendCommandSHT
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
           _i2cWriteByte
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _waitForResultSHT
           _i2cHighSda
     _readTemperatureRaw
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___ftpack
       _getData16SHT
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighSda
         _i2cStop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _shiftIn
           _i2cHighScl
           _i2cLowScl
         _shiftInCRC
           ___awdiv
             ___awmod (ARG)
           _i2cHighScl
           _i2cLowScl
       _sendCommandSHT
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
         _i2cWriteByte
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _waitForResultSHT
         _i2cHighSda
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___awmod
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _readTemperatureRaw (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awtoft
             ___ftpack
           _getData16SHT
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighSda
             _i2cStop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _shiftIn
               _i2cHighScl
               _i2cLowScl
             _shiftInCRC
               ___awdiv
                 ___awmod (ARG)
               _i2cHighScl
               _i2cLowScl
           _sendCommandSHT
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
             _i2cWriteByte
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
           _waitForResultSHT
             _i2cHighSda
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _readTemperatureRaw (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awtoft
                       ___ftpack
                     _getData16SHT
                       _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _i2cHighSda
                       _i2cStop
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _shiftIn
                         _i2cHighScl
                         _i2cLowScl
                       _shiftInCRC
                         ___awdiv
                           ___awmod (ARG)
                         _i2cHighScl
                         _i2cLowScl
                     _sendCommandSHT
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                       _i2cWriteByte
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                     _waitForResultSHT
                       _i2cHighSda
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _readTemperatureRaw (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awtoft
             ___ftpack
           _getData16SHT
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighSda
             _i2cStop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _shiftIn
               _i2cHighScl
               _i2cLowScl
             _shiftInCRC
               ___awdiv
                 ___awmod (ARG)
               _i2cHighScl
               _i2cLowScl
           _sendCommandSHT
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
             _i2cWriteByte
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
           _waitForResultSHT
             _i2cHighSda
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _readTemperatureRaw (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awtoft
             ___ftpack
           _getData16SHT
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighSda
             _i2cStop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _shiftIn
               _i2cHighScl
               _i2cLowScl
             _shiftInCRC
               ___awdiv
                 ___awmod (ARG)
               _i2cHighScl
               _i2cLowScl
           _sendCommandSHT
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
             _i2cWriteByte
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
           _waitForResultSHT
             _i2cHighSda
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _readTemperatureRaw (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awtoft
             ___ftpack
           _getData16SHT
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighSda
             _i2cStop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _shiftIn
               _i2cHighScl
               _i2cLowScl
             _shiftInCRC
               ___awdiv
                 ___awmod (ARG)
               _i2cHighScl
               _i2cLowScl
           _sendCommandSHT
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
             _i2cWriteByte
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
           _waitForResultSHT
             _i2cHighSda
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _readTemperatureRaw (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awtoft
                       ___ftpack
                     _getData16SHT
                       _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _i2cHighSda
                       _i2cStop
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _shiftIn
                         _i2cHighScl
                         _i2cLowScl
                       _shiftInCRC
                         ___awdiv
                           ___awmod (ARG)
                         _i2cHighScl
                         _i2cLowScl
                     _sendCommandSHT
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                       _i2cWriteByte
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                     _waitForResultSHT
                       _i2cHighSda
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
     ___fttol
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _readTemperatureRaw (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awtoft
           ___ftpack
         _getData16SHT
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighSda
           _i2cStop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _shiftIn
             _i2cHighScl
             _i2cLowScl
           _shiftInCRC
             ___awdiv
               ___awmod (ARG)
             _i2cHighScl
             _i2cLowScl
         _sendCommandSHT
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
           _i2cWriteByte
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _waitForResultSHT
           _i2cHighSda
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _readTemperatureRaw (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awtoft
             ___ftpack
           _getData16SHT
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighSda
             _i2cStop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _shiftIn
               _i2cHighScl
               _i2cLowScl
             _shiftInCRC
               ___awdiv
                 ___awmod (ARG)
               _i2cHighScl
               _i2cLowScl
           _sendCommandSHT
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
             _i2cWriteByte
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
           _waitForResultSHT
             _i2cHighSda
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _readHumidity (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _readTemperatureRaw (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awtoft
                       ___ftpack
                     _getData16SHT
                       _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _i2cHighSda
                       _i2cStop
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _shiftIn
                         _i2cHighScl
                         _i2cLowScl
                       _shiftInCRC
                         ___awdiv
                           ___awmod (ARG)
                         _i2cHighScl
                         _i2cLowScl
                     _sendCommandSHT
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                       _i2cWriteByte
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                     _waitForResultSHT
                       _i2cHighSda
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _getData16SHT
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighSda
         _i2cStop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _shiftIn
           _i2cHighScl
           _i2cLowScl
         _shiftInCRC
           ___awdiv
             ___awmod (ARG)
           _i2cHighScl
           _i2cLowScl
       _readTemperatureC
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _readTemperatureRaw (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awtoft
                       ___ftpack
                     _getData16SHT
                       _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _i2cHighSda
                       _i2cStop
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _shiftIn
                         _i2cHighScl
                         _i2cLowScl
                       _shiftInCRC
                         ___awdiv
                           ___awmod (ARG)
                         _i2cHighScl
                         _i2cLowScl
                     _sendCommandSHT
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                       _i2cWriteByte
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                     _waitForResultSHT
                       _i2cHighSda
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _readTemperatureRaw (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awtoft
                       ___ftpack
                     _getData16SHT
                       _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _i2cHighSda
                       _i2cStop
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _shiftIn
                         _i2cHighScl
                         _i2cLowScl
                       _shiftInCRC
                         ___awdiv
                           ___awmod (ARG)
                         _i2cHighScl
                         _i2cLowScl
                     _sendCommandSHT
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                       _i2cWriteByte
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                     _waitForResultSHT
                       _i2cHighSda
                 ___lltoft (ARG)
                   ___ftpack
                   ___fttol (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _readTemperatureRaw (ARG)
                       ___awdiv
                         ___awmod (ARG)
                       ___awtoft
                         ___ftpack
                       _getData16SHT
                         _i2cAck
                           _i2cHighScl
                           _i2cHighSda
                           _i2cLowScl
                           _i2cLowSda
                         _i2cHighSda
                         _i2cStop
                           _i2cHighScl
                           _i2cHighSda
                           _i2cLowScl
                           _i2cLowSda
                         _shiftIn
                           _i2cHighScl
                           _i2cLowScl
                         _shiftInCRC
                           ___awdiv
                             ___awmod (ARG)
                           _i2cHighScl
                           _i2cLowScl
                       _sendCommandSHT
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                         _i2cWriteByte
                           _i2cHighScl
                           _i2cHighSda
                           _i2cLowScl
                           _i2cLowSda
                       _waitForResultSHT
                         _i2cHighSda
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _readTemperatureRaw (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awtoft
                       ___ftpack
                     _getData16SHT
                       _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _i2cHighSda
                       _i2cStop
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _shiftIn
                         _i2cHighScl
                         _i2cLowScl
                       _shiftInCRC
                         ___awdiv
                           ___awmod (ARG)
                         _i2cHighScl
                         _i2cLowScl
                     _sendCommandSHT
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                       _i2cWriteByte
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                     _waitForResultSHT
                       _i2cHighSda
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         _readTemperatureRaw
           ___awdiv
             ___awmod (ARG)
           ___awtoft
             ___ftpack
           _getData16SHT
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighSda
             _i2cStop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _shiftIn
               _i2cHighScl
               _i2cLowScl
             _shiftInCRC
               ___awdiv
                 ___awmod (ARG)
               _i2cHighScl
               _i2cLowScl
           _sendCommandSHT
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
             _i2cWriteByte
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
           _waitForResultSHT
             _i2cHighSda
       _sendCommandSHT
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
         _i2cWriteByte
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _waitForResultSHT
         _i2cHighSda
     _readTemperatureC (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _readTemperatureRaw (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awtoft
                       ___ftpack
                     _getData16SHT
                       _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _i2cHighSda
                       _i2cStop
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                       _shiftIn
                         _i2cHighScl
                         _i2cLowScl
                       _shiftInCRC
                         ___awdiv
                           ___awmod (ARG)
                         _i2cHighScl
                         _i2cLowScl
                     _sendCommandSHT
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                       _i2cWriteByte
                         _i2cHighScl
                         _i2cHighSda
                         _i2cLowScl
                         _i2cLowSda
                     _waitForResultSHT
                       _i2cHighSda
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _readTemperatureRaw (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awtoft
                     ___ftpack
                   _getData16SHT
                     _i2cAck
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _i2cHighSda
                     _i2cStop
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                     _shiftIn
                       _i2cHighScl
                       _i2cLowScl
                     _shiftInCRC
                       ___awdiv
                         ___awmod (ARG)
                       _i2cHighScl
                       _i2cLowScl
                   _sendCommandSHT
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                     _i2cWriteByte
                       _i2cHighScl
                       _i2cHighSda
                       _i2cLowScl
                       _i2cLowSda
                   _waitForResultSHT
                     _i2cHighSda
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _readTemperatureRaw (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awtoft
             ___ftpack
           _getData16SHT
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighSda
             _i2cStop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _shiftIn
               _i2cHighScl
               _i2cLowScl
             _shiftInCRC
               ___awdiv
                 ___awmod (ARG)
               _i2cHighScl
               _i2cLowScl
           _sendCommandSHT
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
             _i2cWriteByte
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
           _waitForResultSHT
             _i2cHighSda
       _readTemperatureRaw
         ___awdiv
           ___awmod (ARG)
         ___awtoft
           ___ftpack
         _getData16SHT
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighSda
           _i2cStop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _shiftIn
             _i2cHighScl
             _i2cLowScl
           _shiftInCRC
             ___awdiv
               ___awmod (ARG)
             _i2cHighScl
             _i2cLowScl
         _sendCommandSHT
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
           _i2cWriteByte
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _waitForResultSHT
           _i2cHighSda
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _readTemperatureRaw (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awtoft
                   ___ftpack
                 _getData16SHT
                   _i2cAck
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _i2cHighSda
                   _i2cStop
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                   _shiftIn
                     _i2cHighScl
                     _i2cLowScl
                   _shiftInCRC
                     ___awdiv
                       ___awmod (ARG)
                     _i2cHighScl
                     _i2cLowScl
                 _sendCommandSHT
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                   _i2cWriteByte
                     _i2cHighScl
                     _i2cHighSda
                     _i2cLowScl
                     _i2cLowSda
                 _waitForResultSHT
                   _i2cHighSda
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _readTemperatureRaw (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awtoft
               ___ftpack
             _getData16SHT
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighSda
               _i2cStop
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _shiftIn
                 _i2cHighScl
                 _i2cLowScl
               _shiftInCRC
                 ___awdiv
                   ___awmod (ARG)
                 _i2cHighScl
                 _i2cLowScl
             _sendCommandSHT
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
               _i2cWriteByte
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
             _waitForResultSHT
               _i2cHighSda
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _readTemperatureRaw (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awtoft
                 ___ftpack
               _getData16SHT
                 _i2cAck
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _i2cHighSda
                 _i2cStop
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
                 _shiftIn
                   _i2cHighScl
                   _i2cLowScl
                 _shiftInCRC
                   ___awdiv
                     ___awmod (ARG)
                   _i2cHighScl
                   _i2cLowScl
               _sendCommandSHT
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
                 _i2cWriteByte
                   _i2cHighScl
                   _i2cHighSda
                   _i2cLowScl
                   _i2cLowSda
               _waitForResultSHT
                 _i2cHighSda
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _readTemperatureRaw (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awtoft
             ___ftpack
           _getData16SHT
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighSda
             _i2cStop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _shiftIn
               _i2cHighScl
               _i2cLowScl
             _shiftInCRC
               ___awdiv
                 ___awmod (ARG)
               _i2cHighScl
               _i2cLowScl
           _sendCommandSHT
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
             _i2cWriteByte
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
           _waitForResultSHT
             _i2cHighSda
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _high_isr (ROOT)
   _PHYGetLongRAMAddr
     _SPIGet
       _SPIPut
     _SPIPut
   _PHYGetShortRAMAddr
     _SPIGet
       _SPIPut
     _SPIPut
   _PHYSetShortRAMAddr
     _SPIPut
   _UserInterruptHandler

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0     100      16      100.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      86      14       52.3%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      BE      12       74.2%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      E8      10       90.6%
BITBANK1           100      0       0       7        0.0%
BANK1              100     3F      FD       8       98.8%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9C      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      54       1       89.4%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     51B       6        0.0%
DATA                 0      0     51B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Oct 29 12:00:15 2018

         readTemperatureRaw@_gTempCmd 007D                        _LCD_Initialize 335E  
                        _RoutingTable 0112                          ___awdiv@sign 006B  
                         ?_LCD_Update 0001                   ___wmul@multiplicand 0070  
                   _ActiveScanResults 0200                       getData16SHT@CRC 0077  
         readHumidity@_linearHumidity 00D3                          ___ftadd@exp1 00C1  
                        ___ftadd@exp2 00C0                          ___ftadd@sign 00BF  
                     getData16SHT@val 0075                                   _MTP 0036  
          __end_of_readTemperatureRaw 2DFE           __size_of_PHYSetShortRAMAddr 0028  
                        ___awmod@sign 0065                                   prod 000FF3  
                                 wreg 000FE8                         ?_i2cWriteByte 0001  
                        ___ftdiv@cntr 00BC                          ___ftdiv@sign 00C1  
                                l2030 3992                                  l3000 3582  
                                l3001 3590                                  l2300 20B4  
                                l2310 02E2                                  l3007 361E  
                                l2311 02E8                                  l3008 3612  
                                l2400 0B5A                                  l2312 02EE  
                                l2304 02AE                                  l2313 02F4  
                                l2305 02CA                                  l2410 0BC8  
                                l2330 059E                                  l2322 03E6  
                                l2411 0BB2                                  l2323 0490  
                                l2307 02FC                                  l2324 0430  
                                l2308 02DC                                  l2501 15C6  
                                l2413 0BFC                                  l2405 0B9C  
                                l2333 049E                                  l2510 1678  
                                l2502 14E2                                  l2430 0DF4  
                                l2406 0B86                                  l2334 0606  
                                l2350 04F8                                  l2342 04B2  
                                l2326 047A                                  l2318 03B6  
                                l2158 3722                                  l2423 0DBA  
                                l2415 0BE6                                  l2343 04B4  
                                l2335 04A2                                  l2327 043A  
                                l2319 034E                                  l2520 1788  
                                l2512 169E                                  l2504 15E8  
                                l2432 0E1C                                  l2424 0CFC  
                                l2360 0586                                  l2352 0536  
                                l2344 04B8                                  l2336 04A4  
                                l2521 16F4                                  l2505 15D2  
                                l2425 0D1C                                  l2361 0598  
                                l2353 051A                                  l2345 04D4  
                                l2337 04A8                                  l2290 2308  
                                l2514 176C                                  l2362 1620  
                                l2450 11B6                                  l2442 0F8C  
                                l2370 07A6                                  l2346 04EA  
                                l2338 04AA                                  l1811 351C  
                                l2531 17D4                                  l2515 16B8  
                                l2443 1068                                  l2427 0DDC  
                                l2419 0C10                                  l2371 07AA  
                                l2363 061C                                  l2347 04F2  
                                l2339 04AE                                  l1812 34E4  
                                l2540 18B4                                  l2532 1800  
                                l2444 102A                                  l2428 0DC6  
                                l2372 0EBA                                  l2364 065E  
                                l2356 055E                                  l2293 1EC4  
                                l2541 18BC                                  l2525 1730  
                                l2453 115E                                  l2437 10A8  
                                l2381 08DC                                  l2357 054E  
                                l2349 0508                                  l2294 1DE6  
                                l2542 18EA                                  l2534 182C  
                                l2470 12DC                                  l2438 0EE4  
                                l2382 0966                                  l2366 06FC  
                                l2287 2232                                  l2551 1930  
                                l2543 18F4                                  l2535 1836  
                                l2463 12A4                                  l2367 0766  
                                l2359 0572                                  l2608 36D8  
                                l1736 3864                                  l2800 28FC  
                                l2544 19B0                                  l2536 1870  
                                l2480 134A                                  l2392 0AEE  
                                l2384 09D6                                  l2609 36EC  
                                l2297 1E9E                                  l2553 198E  
                                l2545 191E                                  l2529 17AA  
                                l2481 1334                                  l2449 10E8  
                                l2393 0B22                                  l2377 07EE  
                                l2369 0790                                  l1738 386E  
                                l2802 293A                                  l2298 1FFC  
                                l2490 1424                                  l2466 12C6  
                                l2386 09F6                                  l2378 0800  
                                l1739 3872                                  l1827 37E4  
                                l2803 292A                                  l2571 1A12  
                                l2555 1976                                  l2547 1908  
                                l2491 138E                                  l2483 137E  
                                l2475 131E                                  l2467 132E  
                                l2459 121C                                  l2387 0A56  
                                l2379 0804                                  l2900 2746  
                                l2572 1A48                                  l2476 1308  
                                l2468 12F2                                  l2396 0B44  
                                l2388 0A18                                  l2581 1C0C  
                                l2565 19FE                                  l2493 1444  
                                l2485 1368                                  l2397 0BAC  
                                l2902 2772                                  l2590 1BB0  
                                l2582 1AA4                                  l2494 142E  
                                l2398 0B70                                  l2831 2E5C  
                                l2903 27AC                                  l2567 19E8  
                                l2832 2E46                                  l2808 295E  
                                l2912 2834                                  l2904 27D4  
                                l2584 1C28                                  l2576 1A8E  
                                l2496 1468                                  l1961 307E  
                                l2809 2952                                  l2913 2828  
                                l2585 1B1E                                  l2497 146C  
                                l1962 3096                                  l2834 2E84  
                                l2930 2C1A                                  l2906 2810  
                                l2498 1492                                  l1955 3010  
                                l2835 2E7A                                  l2931 2C2A  
                                l2771 32B8                                  l2907 2800  
                                l2579 1C3A                                  l2587 1B82  
                                l1884 3240                                  l2828 2E28  
                                l2924 2B98                                  l2772 32C2  
                                l2764 326A                                  l2780 3496  
                                l1957 302E                                  l1885 322C  
                                l2829 2E1E                                  l2773 32D0  
                                l2765 327A                                  l2917 3162  
                                l2941 3828                                  l2781 348E  
                                l1958 3046                                  l2926 2BC0  
                                l2918 3192                                  l1959 3060  
                                l2863 25E8                                  l2927 2BF2  
                                l2767 3298                                  l2935 3958  
                                l2928 2C02                                  l2792 38A2  
                                l2768 3290                                  l2784 34AE  
                                l2960 3980                                  l2873 2644  
                                l2953 2B40                                  l2945 2AA4  
                                l2785 34B8                                  l2777 3474  
                                l2882 2682                                  l2874 263A  
                                l2954 2B34                                  l2786 34C6  
                                l2778 3480                                  l2883 2678  
                                l2859 25BE                                  l2947 2B1C  
                                l2868 264E                                  l2956 2B5C  
                                l2948 2B0C                                  l2892 2C8E  
                                l2796 286C                                  l2885 26A6  
                                l2886 26C2                                  l2894 2CB6  
                                l2990 333E                                  l2798 288A  
                                l2887 26F2                                  l2895 2CF4  
                                l2991 334C                                  l2799 28CC  
                                l2896 2D1A                                  l2986 330A  
                                l2987 32FE                                  l2996 355A  
                                l2997 354E                                  STR_1 FF80  
                                STR_2 FE32                                  STR_3 FD52  
                                STR_4 FE51                                  STR_5 FD94  
                                STR_6 FD31                                  STR_7 FD73  
                                STR_9 FC05                        _sendCommandSHT 3668  
                                _TMR3 000F7A                                  _main 371E  
                        ___ftpack@arg 0060                          ___ftpack@exp 0063  
                                _role 003F                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr2h 000FDA  
                                fsr0l 000FE9                                  indf1 000FE7  
                                indf2 000FDF                                  fsr1l 000FE1  
                                fsr2l 000FD9                                  btemp 0055  
                   sendCommandSHT@ack 0065                       __end_of_SPIPut2 39A4  
                                prodh 000FF4                                  prodl 000FF3  
                                start 029C                      __end_of_DELAY_ms 3254  
                       ?_LCD_WriteCmd 0001                          _sprintf$4950 01C8  
                        _sprintf$4953 01CA                          _sprintf$4954 01CC  
                        _sprintf$4955 01CE                          _sprintf$4964 01D6  
                        _sprintf$4956 01D0                          _sprintf$4957 01D2  
                        _sprintf$4949 01C6                          _sprintf$5669 01C0  
                        _sprintf$4958 01D4                __end_of_LCD_Initialize 33E0  
                       _LCD_WriteData 39BE                          ___ftmul@cntr 00AA  
                        ___param_bank 000000                     _PHYGetLongRAMAddr 3774  
                        ___ftmul@sign 00AB                       __end_of_i2cStop 39F8  
                        high_isr@temp 0020                  __end_of_getData16SHT 345E  
                        ___fttol@exp1 0090                    ?_PHYGetLongRAMAddr 0003  
                        ___fttol@lval 008C                         __CFG_PLLDIV$2 000000  
                readTemperatureC@_val 00CE                                 l10659 31BE  
                               l18215 35B4                                 l18181 385C  
                               l19083 04F8                                 l19413 1134  
                               l19405 10E8                                 l18287 37D4  
                               l19255 0B80                                 l19433 1220  
                               l19257 0B86                                 l19089 051A  
                               l19267 0BB2                                 l19099 054E  
                               l19517 142E                                 l19373 0F0A  
                               l19623 1734                                 l19359 0E98  
                               l19287 0C0C                                 l19713 198A  
                               l19609 16F8                                 l19473 1302  
                               l19811 3008                                 l19715 198E  
                               l19475 1308                                 l19565 1600  
                               l19485 1334                                 l19753 1A48  
                               l19745 1A0E                                 l19675 18BC  
                               l19667 1870                                 l19595 16BC  
                               l19829 3058                                 l19785 1C0C  
                               l19795 1C5C                                 l19789 1C34  
                 waitForResultSHT@ack 0061                                 ?_main 0001  
                     __end_of___awdiv 32DA                                 _ADRES 000FC3  
                     __end_of___ftadd 2718                                 STR_10 FEF9  
                               STR_11 FEAA                                 STR_12 FFD6  
                               STR_20 FCEF                                 STR_13 FF6F  
                               STR_21 FE70                                 STR_30 FFE2  
                               STR_22 FE8D                                 STR_31 FFF1  
                               STR_23 FFA1                                 STR_24 FD10  
                               STR_33 FFF5                                 STR_25 FDF4  
                               STR_41 FCAD                                 STR_34 FFEC  
                               STR_50 FF13                                 STR_26 FE13  
                               STR_51 FF2A                                 STR_43 FC4A  
                               STR_28 FF5E                                 STR_44 FDD5  
                               STR_36 FC8C                                 STR_52 FC29  
                     __end_of___awmod 34D0                                 STR_45 FFCA  
                               STR_29 FF91                                 STR_53 FF3C  
                               STR_37 FCCE                                 STR_54 FF4D  
                               STR_46 FEDF                                 STR_38 FDB5  
                               STR_47 FEC5                                 STR_39 FC6B  
                               STR_48 FFBE                                 STR_49 FFB0  
                     __end_of___ftdiv 2D4C                       __end_of___ftneg 3966  
                     __end_of___lldiv 335E                       __end_of___ftmul 2C64  
                     ___awdiv@divisor 0068                                 _T1CON 000FCD  
                     __end_of___llmod 35A2                       __end_of___ftsub 3852  
                     __end_of___fttol 2B6E                                 u22040 349A  
                               u23000 0A98                                 u21420 329C  
                         LCD_Update@i 0063                                 u21510 35C8  
                               u23110 0BD6                                 u23030 0B1C  
                               u15120 2B46                                 u21520 3600  
                               u24000 19D8                                 u23200 0DE4  
                               _T3CON 000F79                                 u21610 36A0  
                               u22410 2964                                 u21540 2E10  
                               u21620 36BA                                 u22500 330E  
                               u22340 283A                                 u24100 1C5C  
                               u23300 0F42                                 u15061 2A88  
                               u22421 2C76                                 u22261 272A  
                               u21518 35CC                                 u21470 3886  
                               u24110 1C7A                                 u23310 0F5E  
                               u15080 2AC2                                 u21480 34F4  
                               u21640 37F8                                 u24120 1C94  
                               u23240 0E98                                 u23160 0CDE  
                               u22441 2C9E                                 u22281 2756  
                               u21810 25DA                                 u21618 36A4  
                               u22530 355E                                 u24051 1A6E  
                               u21580 2E8E                                 u21628 36BE  
                               u23420 1258                                 u23340 10BA  
                               u21741 257C                                 u15085 2ABA  
                               u21670 399C                                 u24150 304C  
                               u21910 268A                                 u23350 10FA  
                               u21751 2590                                 u21840 2618  
                               u21488 34F8                                 u21648 37FC  
                               u23600 1482                                 u23520 1358  
                               u23440 129E                                 u22800 0698  
                               u21780 25B0                                 u23380 1134  
                               u22805 068E                                 u22910 07FA  
                               u21951 2B80                                 u21880 2656  
                               u23640 1600                                 u22840 07A0  
                               u23570 1452                                 u21971 2BA8  
                               u23580 1462                                 u22870 07C2  
                               u22880 07DC                                 u22980 09EE  
                               u26407 3A2A                                 u23880 18AA  
                               u26417 3A36                                 u23990 19BA  
                               u26377 37E6                                 u26387 3A10  
                               u26397 3A1E                                 _T1RUN 007A94  
                               i2l960 00C0                                 i2l961 00DC  
                               i2l970 0140                                 i2l971 0220  
                               i2l972 020A                                 i2l956 0074  
                     ___awdiv@counter 006A                                 i2l981 024C  
                               i2l973 01C6                                 i2l965 0112  
                               i2l974 0192                                 i2l976 0214  
                               i2l968 0124                                 i2l977 022A  
                               i2l978 0238                   ??_PHYGetLongRAMAddr 0005  
                               _TMR1H 000FCF                                 _TMR0L 000FD6  
                    _CurrentNodeIndex 0047                                 _TMR1L 000FCE  
                               _TRISB 000F93                   ___lmul@multiplicand 0064  
                          _MiWiSeqNum 0040                          ___lltoft@exp 0099  
                      ??_i2cWriteByte 0060                        _myShortAddress 0050  
          __end_of_PHYGetShortRAMAddr 38F0                            _i2cHighSda 3A26  
                          _i2cHighScl 3A32                         ___awtoft@sign 006B  
              __end_of_sendCommandSHT 36C6                         _questionnaire 013C  
                     __end_of_dpowers FB97                                 _scale 1CA2  
                     __end_of_isdigit 3988                         ___ftpack@sign 0064  
                     __end_of_shiftIn 353A                                 pclath 000FFA  
                               tablat 000FF5                   __size_of_LCD_Update 00A0  
                               status 000FD8                                 wtemp6 0056  
                     __end_of_sprintf 1CA2             __end_of_PHYGetLongRAMAddr 37C6  
                      ??_LCD_WriteCmd 0062                        ?_LCD_WriteData 0001  
           __size_of_readTemperatureC 0094                       ?_LCD_Initialize 0001  
                     __initialization 2EAE                          __end_of_main 3774  
                       high_isr@flags 0027                     _MACCurrentChannel 0137  
           PHYGetShortRAMAddr@address 0003                      __end_of_ScanTime FB3F  
                              ??_main 00FC                         ___fttol@sign1 008B  
                       __activetblptr 000002                  __size_of__tdiv_to_l_ 0134  
           PHYGetShortRAMAddr@tmpRFIE 0005                         ?_readHumidity 00D0  
           PHYSetShortRAMAddr@address 0004                                _ADCON0 000FC2  
                              _ADCON1 000FC1                       ?_sendCommandSHT 0062  
                    ___llmod@dividend 006D                                ?_scale 00AC  
                              _EECON2 000FA7                                _ANCON0 000F48  
                              _ANCON1 000F49                             ??_SPIPut2 0060  
                    ___awdiv@dividend 0066                    __size_of_i2cLowSda 000E  
                  __size_of_i2cLowScl 000E                      __end_of___awtoft 38C6  
                    __end_of___ftpack 2EAE                      __end_of___lltoft 3668  
                              i2l2019 39AC                        __CFG_WDTEN$OFF 000000  
                              _OSCCON 000FD3                                _TMR3IE 007D01  
                              _TMR3IF 007D09                                _TMR3IP 007D11  
              readHumidity@_gHumidCmd 00EB                                _RPINR1 000EE7  
                              _RPOR21 000EDB                                _RPOR19 000ED9  
                              _SPIGet 3A48                                _SPIPut 39A4  
           PHYSetShortRAMAddr@tmpRFIE 0005                             ??_i2cStop 0060  
            readHumidity@_temperature 00D9         __size_of_UserInterruptHandler 0002  
                              _i2cAck 39F8                 readTemperatureRaw@crc 007C  
                      __CFG_XINST$OFF 000000                                _TxData 0049  
                    __end_of__powers_ FBBE                      LCD_WriteCmd@data 0062  
                    __end_of_high_isr 029C                                ___ftge 3130  
                              ___lmul 36C6                                ___wmul 38F0  
                           ??___awdiv 006A                             ??___ftadd 00BC  
                           ??___awmod 0064                             ??___ftdiv 00B9  
                           ??___ftneg 009D                             ??___lldiv 0068  
                           ??___ftmul 00A3                             ??___llmod 0075  
                           ??___ftsub 00C8                             ??___fttol 0086  
                              _fround 20DA                                clear_0 2F10  
                              clear_1 2F1C                                clear_2 2F28  
                              clear_3 2F34                                clear_4 2F46  
                    ___awdiv@quotient 006C                       ___awmod@divisor 0062  
                     ___awmod@counter 0064                 ___ftmul@f3_as_product 00A7  
                        __pdataCOMRAM 0053                             ??_isdigit 0060  
                      _openSocketInfo 0191                        ??_readHumidity 00D3  
                        __mediumconst FB02                             ??_shiftIn 0062  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                             ?_DELAY_ms 006C  
                         ?_i2cHighSda 0001                           ?_i2cHighScl 0001  
                     readHumidity@crc 00ED                             ??_sprintf 00F6  
                   ?_waitForResultSHT 0001                     _SYSTEM_Initialize 2F5A  
                  ??_waitForResultSHT 0060                            __accesstop 0060  
             __end_of__initialization 2F4C                            ___ftadd@f1 00B6  
                          ___ftadd@f2 00B9                       ??_LCD_WriteData 0062  
                          ___ftge@ff1 00C2                            ___ftge@ff2 00C5  
                  ?_SYSTEM_Initialize 0001                   i2cWriteByte@outByte 0060  
                       ___rparam_used 000001                            ___ftdiv@f1 00B3  
                          ___ftdiv@f2 00B6                            ___ftdiv@f3 00BD  
               __size_of_getData16SHT 007E            __size_of_PHYGetLongRAMAddr 0052  
                          ___ftneg@f1 009A                            ___awtoft@c 0068  
                          ___ftmul@f1 009D                            ___ftmul@f2 00A0  
                          ___ftsub@f1 00C2                            ___ftsub@f2 00C5  
                          ___fttol@f1 0082                 _ActiveScanResultIndex 0042  
                  readTemperatureC@D1 00C8                    readTemperatureC@D2 00CB  
                __end_of_i2cWriteByte 388C                        __pcstackCOMRAM 0001  
                      high_isr@RxBank 0029                     waitForResultSHT@i 0063  
                        __pidataBANK1 3A3E                          __pidataBANK5 2976  
                 ??_SYSTEM_Initialize 0072                            ___lltoft@c 0091  
                   __end_of_i2cLowSda 3A18                     __end_of_i2cLowScl 3A26  
                       __end_of_scale 20DA                          ??_LCD_Update 0063  
                       i2cWriteByte@n 0061                            __div_to_l_ 284C  
                   _readHumidity$5664 00EE                     _readHumidity$5665 00F1  
                     _ConnectionEntry 00FD                       _ConnectionTable 025C  
                __end_of_LCD_WriteCmd 39E6                            ??_DELAY_ms 006E  
                     __div_to_l_@exp1 006B                       __div_to_l_@cntr 006A  
                             ??_scale 00AF             __end_of_SYSTEM_Initialize 2FFC  
                     __div_to_l_@quot 0066                          sprintf@width 01E5  
                        _getData16SHT 33E0                     high_isr@temp_2151 0022  
                          __pbssBANK0 00FC                            __pbssBANK1 0100  
                          __pbssBANK2 0200                            __pbssBANK3 0300  
                          __pbssBANK4 0400                    _readTemperatureRaw 2D4C  
                             ?_SPIGet 0001                               ?_SPIPut 0001  
                  __end_of_LCD_Update 309C                         __div_to_l_@f1 0060  
                       __div_to_l_@f2 0063                               ?_i2cAck 0001  
                    _readTemperatureC 309C            PHYGetShortRAMAddr@toReturn 0004  
                 ?_readTemperatureRaw 0079                               ?___ftge 00C2  
                             ?___lmul 0060                               ?___wmul 006E  
                 __size_of_i2cHighSda 000C                   __size_of_i2cHighScl 000C  
                             ?_fround 00AC                        ___lmul@product 0068  
                             SPIPut@i 0001                               SPIPut@v 0002  
                           ?___awtoft 0068                             ?___ftpack 0060  
          __end_of_PHYSetShortRAMAddr 3940                             ?___lltoft 0091  
                             i2l17409 00DA                    __CFG_OSC$INTOSCPLL 000000  
                             i2l17439 011C                               _LCDText 0170  
                ??_readTemperatureRaw 007C                       __CFG_WDTPS$2048 000000  
                             _RPINR21 000EFB                        _failureCounter 012F  
                             _SSP1BUF 000FC9                               _SSP2BUF 000F75  
                             _SPIPut2 3988                             ?_high_isr 0001  
                             _SST_Val 01B3                       shiftIn@_numBits 0060  
                    ??_LCD_Initialize 0072                       _timerExtension1 0046  
                     _timerExtension2 013A                       __size_of_SPIGet 000A  
                    _AdditionalNodeID 0044                       __size_of_SPIPut 001A  
                             _i2cStop 39E6                readTemperatureRaw@_val 007F  
                  _PHYGetShortRAMAddr 38C6                           shiftInCRC@i 0073  
                          DELAY_ms@ms 006C                   _AcknowledgementAddr 012D  
                     __size_of_i2cAck 0012                     __end_of__npowers_ FBE5  
                             __Hparam 0000                            _scale$5668 00AF  
                             __Lparam 0000                  __end_of_readHumidity 256A  
                   LCD_WriteData@data 0062                       __size_of___ftge 0092  
                             ___awdiv 3254                       __size_of___lmul 0058  
                             ___ftadd 256A                               ___awmod 345E  
                             ___ftdiv 2C64                               ___ftneg 3940  
                 ?_PHYGetShortRAMAddr 0001                               ___lldiv 32DA  
                     __size_of___wmul 0028                               ___ftmul 2B6E  
                             ___llmod 353A                               ___ftsub 3810  
                             ___fttol 2A76                        _tempNodeStatus 00FC  
                             __pcinit 2EAE                            ??___awtoft 006B  
                          ??___ftpack 0065                       __size_of_fround 0270  
                             __ramtop 0F00                            ??___lltoft 0095  
                             __ptext0 371E                               __ptext1 02A0  
                             __ptext2 1CA2                               __ptext3 3966  
                             __ptext4 20DA                               __ptext5 38F0  
                             __ptext6 345E                               __ptext7 2718  
                             __ptext8 284C                               __ptext9 360A  
                             _myPANID 004A                     __end_of_hexpowers FC05  
                           _T1CONbits 000FCD                           ?__div_to_l_ 0060  
                    ??_sendCommandSHT 0064                               _dpowers FB6F  
                             _isdigit 3966                         _myLongAddress 01F4  
                           _MAC_PANID 004E                      ___awmod@dividend 0060  
                             _shiftIn 34D0                  ??_PHYGetShortRAMAddr 0003  
          __size_of_SYSTEM_Initialize 00A2                               _sprintf 02A0  
                          ??_high_isr 0009                  end_of_initialization 2F4C  
                    _MiWiStateMachine 003D                     __end_of_octpowers FB6F  
                       __Lmediumconst FB02                 __size_of_i2cWriteByte 003A  
                           i2u2030_40 006E                             i2u2031_40 0070  
                          _shiftInCRC 35A2                             i2u2043_40 0144  
                           i2u2029_45 0060                             i2u2029_46 0062  
                           i2u1448_40 39B6                             i2u1780_45 37C0  
                           i2u1780_46 37C2                             i2u1778_45 393C  
                     ___lldiv@divisor 0064                             i2u1778_46 393E  
                           i2u1779_45 38EA                             i2u1779_46 38EC  
                     ___lldiv@counter 006C                               postdec1 000FE5  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                      readHumidity@_val 00F4  
DELAY_ms@cyclesRequiredForEntireDelay 006E                        __tdiv_to_l_@f1 0060  
                      __tdiv_to_l_@f2 0063                         ??__tdiv_to_l_ 0066  
               __size_of_LCD_WriteCmd 0014                             _PORTAbits 000F80  
                           _PORTBbits 000F81          __end_of_UserInterruptHandler 3A56  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                          ??_i2cHighSda 0060  
                        ??_i2cHighScl 0060                          _i2cWriteByte 3852  
                           _BankIndex 0054                     __size_of_DELAY_ms 0092  
                         ___ftdiv@exp 00C0                      _indirectMessages 0400  
                      __end_of_SPIGet 3A52                        __end_of_SPIPut 39BE  
                 __size_of__div_to_l_ 012A                          _LCD_WriteCmd 39D2  
                      __end_of_i2cAck 3A0A                           ___ftmul@exp 00A6  
                          _switch_val 0048             __size_of_waitForResultSHT 004A  
        readTemperatureC@_temperature 00C5                    __end_of_i2cHighSda 3A32  
                      __end_of___ftge 31C2                    __end_of_i2cHighScl 3A3E  
                      __end_of___lmul 371E                        __end_of___wmul 3918  
            PHYGetLongRAMAddr@address 0003                         __pidataCOMRAM 3A52  
                      __end_of_fround 234A                             _i2cLowSda 3A0A  
                           _i2cLowScl 3A18                   start_initialization 2EAE  
            __end_of_readTemperatureC 3130              PHYGetLongRAMAddr@tmpRFIE 0008  
                 __end_of__tdiv_to_l_ 284C                         shiftInCRC@ret 0071  
                     high_isr@results 0024                 __size_of_readHumidity 0220  
                            ??_SPIGet 0003                              ??_SPIPut 0001  
                     ___llmod@divisor 0071                           ?_shiftInCRC 006E  
                     ___llmod@counter 0075                              ??_i2cAck 0060  
                      _currentChannel 0052                 __end_of_LCD_WriteData 39D2  
                            ??___ftge 00C8                              ??___lmul 0068  
                            ??___wmul 0072                           __pdataBANK1 01F3  
                         __pdataBANK5 0500                              ??_fround 00AF  
                      readHumidity@C1 00DC                        readHumidity@C2 00DF  
                      readHumidity@C3 00E2                        readHumidity@T1 00E5  
                      readHumidity@T2 00E8                         sprintf@tmpval 01DF  
                          ?_i2cLowSda 0001                            ?_i2cLowScl 0001  
                          fround@prec 00B5                     __size_of___awtoft 003A  
                   __size_of___ftpack 00B0                     __size_of___lltoft 005E  
                         __pbssCOMRAM 002B                         __pcstackBANK0 0060  
                       __pcstackBANK1 01B4                          _BuzzerStatus 0139  
                        _readHumidity 234A                           _defaultHops 0053  
                        _isdigit$5190 0061                              ?_SPIPut2 0001  
                  _PHYSetShortRAMAddr 3918               PHYSetShortRAMAddr@value 0003  
                   __size_of_high_isr 0294                           sprintf@flag 01F1  
                         sprintf@fval 01EB                           sprintf@prec 01EE  
                         sprintf@temp 01D8                              ?_i2cStop 0001  
                 ?_PHYSetShortRAMAddr 0003                  _UserInterruptHandler 3A54  
                    _MiWiCapacityInfo 0135                             __pintcode 0008  
                       __pmediumconst FB02                              ?___awdiv 0066  
                            ?___ftadd 00B6                              ?___awmod 0060  
                            ?___ftdiv 00B3                              ?___ftneg 009A  
                            ?___lldiv 0060                              ?___ftmul 009D  
                            ?___llmod 006D                              ?___ftsub 00C2  
                           __npowers_ FBBE                              ?___fttol 0082  
                         __tdiv_to_l_ 2718                          ??__div_to_l_ 0066  
                ??_PHYSetShortRAMAddr 0004                              ?_isdigit 0001  
                 __size_of_shiftInCRC 0068                              SPIPut2@i 0060  
                            SPIPut2@v 0061                    _AcknowledgementSeq 01F3  
                            ?_shiftIn 0060           __size_of_readTemperatureRaw 00B2  
                          shiftIn@ret 0067                             _myChannel 01FC  
                            _DELAY_ms 31C2                             _hexpowers FBE5  
                           _init_case 013B                              ?_sprintf 01B4  
                      __size_of_scale 0438             readTemperatureRaw@calcCRC 0081  
                      ___wmul@product 0072                              _LATAbits 000F89  
                            _LATBbits 000F8A                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                           _tempPANID 01AF                 ?_UserInterruptHandler 0001  
                           _octpowers FB3F        readHumidity@_correctedHumidity 00D6  
                            _PIE1bits 000F9D             PHYGetLongRAMAddr@toReturn 0007  
                            _PIR1bits 000F9E                    __end_of__div_to_l_ 2976  
                            _PIR3bits 000FA4                             _rxMessage 0100  
                            _RCONbits 000FD0                      _waitForResultSHT 37C6  
                            _SSP1CON1 000FC6                              _SSP2CON1 000F72  
                            _SSP1STAT 000FC7                              _SSP2STAT 000F73  
                         _MACRxPacket 002B                            _ADCON0bits 000FC2  
                   ___wmul@multiplier 006E                           ??_i2cLowSda 0060  
                         ??_i2cLowScl 0060                             high_isr@i 002A  
                           high_isr@u 0136                sendCommandSHT@_command 0062  
                     _MiWiAckRequired 0134                              _ConnMode 0043  
                   ___lmul@multiplier 0060                           _INTCON2bits 000FF1  
         __size_of_PHYGetShortRAMAddr 002A                             copy_data0 2EC2  
                           copy_data1 2EE6                      __size_of_SPIPut2 001C  
                            _ScanTime FB03                              _NodeTemp 0300  
                          _ANCON1bits 000F49                      __size_of_i2cStop 0012  
                            _RxBuffer 031E                              __Hrparam 0000  
                            _TxBuffer 013D                              __Lrparam 0000  
             __size_of_LCD_Initialize 0082                      __size_of___awdiv 0086  
                    __size_of___ftadd 01AE                      __size_of___awmod 0072  
                    __size_of___ftdiv 00E8                      __size_of___ftneg 0026  
                    __size_of___lldiv 0084                      __size_of___ftmul 00F6  
                    __size_of___llmod 0068                      __size_of___ftsub 0042  
                    __size_of___fttol 00F8                       _tempLongAddress 011A  
                            ___awtoft 388C                              ___ftpack 2DFE  
                         _fround$5666 00B2                           _fround$5667 00AF  
                            ___lltoft 360A                            sprintf@idx 01C3  
                          sprintf@len 01DB                            sprintf@exp 01E3  
                          sprintf@val 01E7                            _EEPROM_Val 01AC  
         high_isr@pwm_value_high_time 0025                      __size_of_isdigit 0022  
                   ?_readTemperatureC 00C2                              _crcTable 0500  
                          _IEEESeqNum 0138                      __size_of_shiftIn 006A  
                            __ptext10 353A                              __ptext11 32DA  
                            __ptext20 3668                              __ptext12 3810  
                            __ptext21 3852                              __ptext13 3940  
                            __ptext30 3A26                              __ptext22 33E0  
                            __ptext14 3130                              __ptext31 3A32  
                            __ptext23 35A2                              __ptext15 2C64  
                            __ptext40 36C6                              __ptext32 388C  
                            __ptext24 3254                              __ptext16 234A  
                            __ptext41 2FFC                              __ptext33 2A76  
                            __ptext25 34D0                              __ptext17 309C  
                            __ptext50 3A48                              __ptext42 39BE  
                            __ptext34 2B6E                              __ptext26 39E6  
                            __ptext18 2D4C                              __ptext51 39A4  
                            __ptext43 39D2                              __ptext35 256A  
                            __ptext27 39F8                              __ptext19 37C6  
                            __ptext44 3988                              __ptext36 2DFE  
                            __ptext28 3A0A                              __ptext37 2F5A  
                            __ptext29 3A18                              __ptext46 3A54  
                            __ptext38 335E                              __ptext47 3918  
                            __ptext39 31C2                              __ptext48 38C6  
                            __ptext49 3774                      _switch0PressTime 0126  
                        _SSP1CON1bits 000FC6                              __powers_ FB97  
                       ?_getData16SHT 0075                    ??_readTemperatureC 00C5  
                            _high_isr 0008                          _SSP2CON1bits 000F72  
                    __size_of_sprintf 1A02                      _switch1PressTime 0122  
             __size_of_sendCommandSHT 005E                ??_UserInterruptHandler 0001  
                       __size_of_main 0056                          ??_shiftInCRC 0070  
                            _myParent 0041                      _tempShortAddress 004C  
                            int$flags 0055                            _LCD_Update 2FFC  
               __CFG_CPUDIV$OSC3_PLL3 000000                           _OSCTUNEbits 000F9B  
                          _INTCONbits 000FF2                    __end_of_shiftInCRC 360A  
                            isdigit@c 0062                      _myNetworkAddress 01B1  
                      ??_getData16SHT 0079                              scale@scl 00B2  
                            intlevel2 0000                             sprintf@ap 01DD  
                           sprintf@cp 01C4                      __tdiv_to_l_@exp1 006E  
                    __tdiv_to_l_@cntr 006D                             sprintf@sp 01B4  
                    __tdiv_to_l_@quot 0069                           _tempAverage 0131  
                    ___lldiv@dividend 0060                              shiftIn@i 0065  
                       _MACInitParams 012A                        _MRF24J40Status 0045  
                        ?__tdiv_to_l_ 0060                      _BroadcastRecords 023C  
                            sprintf@c 01F0                              sprintf@f 01B6  
                          _PPSCONbits 000EFF                      ___lldiv@quotient 0068  
              __size_of_LCD_WriteData 0014                            _WDTCONbits 000FC0  
            __end_of_waitForResultSHT 3810                     _knownCoordinators 0133  
                      _RouterFailures 010A  
